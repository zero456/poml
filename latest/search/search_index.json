{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"POML Documentation","text":"<p>Welcome to the Prompt Orchestration Markup Language (POML) documentation.</p> <p>POML (Prompt Orchestration Markup Language) is a novel markup language designed to bring structure, maintainability, and versatility to advanced prompt engineering for Large Language Models (LLMs). It addresses common challenges in prompt development, such as lack of structure, complex data integration, format sensitivity, and inadequate tooling. POML provides a systematic way to organize prompt components, integrate diverse data types seamlessly, and manage presentation variations, empowering developers to create more sophisticated and reliable LLM applications.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Structured Prompting Markup: Employs an HTML-like syntax with semantic components such as <code>&lt;role&gt;</code>, <code>&lt;task&gt;</code>, and <code>&lt;example&gt;</code> to encourage modular design, enhancing prompt readability, reusability, and maintainability.</li> <li>Comprehensive Data Handling: Incorporates specialized data components (e.g., <code>&lt;document&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;img&gt;</code>) that seamlessly embed or reference external data sources like text files, spreadsheets, and images, with customizable formatting options.</li> <li>Decoupled Presentation Styling: Features a CSS-like styling system that separates content from presentation. This allows developers to modify styling (e.g., verbosity, syntax format) via <code>&lt;stylesheet&gt;</code> definitions or inline attributes without altering core prompt logic, mitigating LLM format sensitivity.</li> <li>Integrated Templating Engine: Includes a built-in templating engine with support for variables (<code>{{ }}</code>), loops (<code>for</code>), conditionals (<code>if</code>), and variable definitions (<code>&lt;let&gt;</code>) for dynamically generating complex, data-driven prompts.</li> <li>Rich Development Toolkit:</li> <li>IDE Extension (Visual Studio Code): Provides essential development aids like syntax highlighting, context-aware auto-completion, hover documentation, real-time previews, inline diagnostics for error checking, and integrated interactive testing.</li> <li>Software Development Kits (SDKs): Offers SDKs for Node.js (JavaScript/TypeScript) and Python for seamless integration into various application workflows and popular LLM frameworks.</li> </ul>"},{"location":"#sitemap","title":"Sitemap","text":"<ul> <li>Language Basics: Get started with POML syntax and structure.</li> <li>VS Code Extension: Enhance your development experience with the POML Visual Studio Code extension.</li> <li>TypeScript SDK: Use the POML TypeScript API for building applications.</li> <li>Python SDK: Integrate POML into your Python projects.</li> </ul>"},{"location":"#research-papers","title":"Research Papers","text":"<ul> <li>Prompt Orchestration Markup Language \u2014 Introduces POML with component-based markup, specialized data tags, CSS-like styling, templating, and developer tooling. arXiv:2508.13948</li> <li>Beyond Prompt Content: Enhancing LLM Performance via Content-Format Integrated Prompt Optimization \u2014 Presents an iterative method that jointly optimizes prompt content and formatting, yielding measurable gains across tasks. arXiv:2502.04295</li> </ul>"},{"location":"#ecosystem-community-projects","title":"Ecosystem &amp; Community Projects","text":"<ul> <li>mini-poml-rs \u2013 Experimental Rust-based POML renderer for environments without JavaScript or Python interpreters.</li> <li>poml-ruby \u2013 Ruby gem implementation of POML for Ruby applications.</li> <li>ai-chatbot-with-python-and-angular \u2013 A chatbot built with Python and Angular (version 20), utilizing POML for prompting and the Langchain framework. Developed by HERE AND NOW AI.</li> <li>PomlSDK.jl \u2013 Julia implementation of the POML specification.</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Join our Discord community: Connect with the team and other users on our Discord server.</p>"},{"location":"contributing/","title":"Contributing to POML","text":"<p>Thank you for your interest in contributing to POML! This guide will help you set up your development environment.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 22.x</li> <li>Python 3.11+ (for Python components)</li> <li>Git</li> </ul>"},{"location":"contributing/#quick-start","title":"Quick Start","text":"<pre><code>git clone https://github.com/microsoft/poml\ncd poml\nnpm ci\nnpm run build-webview\nnpm run build-cli\n</code></pre>"},{"location":"contributing/#development-install","title":"Development Install","text":"<p>For Python development, install the package in editable mode:</p> <pre><code>python -m pip install -e .[dev]\n</code></pre> <p>This installs the Python package with development dependencies including pytest, black, and isort for code formatting.</p>"},{"location":"contributing/#building-packages","title":"Building Packages","text":"<p>The project has multiple build targets:</p>"},{"location":"contributing/#vscode-extension","title":"VSCode Extension","text":"<pre><code>npm run build-extension-dev    # Development build\nnpm run watch-extension        # Watch mode for development\nnpm run package                # Create .vsix package\n</code></pre> <p>Note</p> <p>It's recommended to use the VSCode Extension Development Host for testing the extension. In most cases, you don't need to worry about building or watching the extension manually.</p>"},{"location":"contributing/#npm-package","title":"NPM Package","text":"<pre><code>cd packages/poml-build\nnpm run build    # Builds both CommonJS and ESM versions\nnpm pack         # Creates distributable .tgz file\n</code></pre>"},{"location":"contributing/#cli-and-webview","title":"CLI and Webview","text":"<pre><code>npm run build-cli      # Build CLI executable (used in Python SDK)\nnpm run build-webview  # Build webview components\n</code></pre>"},{"location":"contributing/#git-hooks-with-husky","title":"Git Hooks with Husky","text":"<p>Husky automatically sets up pre-commit hooks that run <code>lint-staged</code>, which formats code with Prettier and runs ESLint. The hooks are configured during <code>npm install</code> via the <code>prepare</code> script and enforce consistent code style across TypeScript, JavaScript, Python, JSON, Markdown, and YAML files.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Run the full test suite:</p> <pre><code>npm run test                                 # Node.js/TypeScript tests\nnpx jest /path/to/specific/testfile.test.ts  # Run specific test file\nnpm run test-vscode                          # VSCode extension tests\npytest -v python/tests                       # Python tests\n</code></pre> <p>For linting and formatting:</p> <pre><code>npm run format             # Format all files (with prettier)\nnpm run format:check       # Check formatting without fixing\nnpm run lint               # ESLint check\n</code></pre>"},{"location":"deep-dive/ir/","title":"Intermediate Representation","text":"<p>Attributes Applicable to All Tags:</p> <ul> <li>speaker (ai/human/system) - The speaker of the current content</li> <li>original-start-index (integer) - The start offset of the element corresponding to the current one in the original document</li> <li> <p>original-end-index (integer) - The end offset of the element corresponding to the current one in the original document</p> </li> <li> <p>any - Represents a generic container for arbitrary data values. Useful for storing dynamic or unstructured content.</p> </li> <li>type (string) - The data type of the value ('string', 'integer', 'float', 'boolean', 'array', 'object', 'buffer', 'null', or 'undefined').</li> <li> <p>name (string) - An optional identifier for the data.</p> </li> <li> <p>b - Represents text that should be displayed in boldface. Useful for highlighting important words or phrases.</p> </li> <li> <p>code - Represents a block or inline fragment of code. It can optionally include language and formatting attributes.</p> </li> <li>inline (boolean) - Indicates whether the code is inline (true) or a block element (false).</li> <li>lang (string) - Specifies the programming language or syntax highlighting mode.</li> <li> <p>blank-line (boolean) - Inserts a blank line before and after the code block if inline = false.</p> </li> <li> <p>env - Represents a formatting environment or container to specify how nested content should be output.</p> </li> <li>presentation (string) - The output style or format mode ('markup', 'serialize', 'free', or 'multimedia').</li> <li>markup-lang (string) - The specific markup language, required only if presentation = 'markup'.</li> <li>serializer (string) - The name of the serializer, required only if presentation = 'serialize'.</li> <li> <p>writer-options (object) - Optional parameters passed to the writer constructor for customizing output.</p> </li> <li> <p>h - Represents a heading element.</p> </li> <li> <p>level (integer) - Indicates the heading level. Typically ranges from 1 (highest level) to 6 (lowest level).</p> </li> <li> <p>i - Represents text that should be displayed in italics. Useful for emphasizing words or phrases.</p> </li> <li> <p>img - Represents an image element.</p> </li> <li>base64 (string) - The base64-encoded image data.</li> <li>alt (string) - Alternative text describing the image.</li> <li>position (string) - The placement of the image relative to text, such as 'here', 'top', or 'bottom'.</li> <li> <p>type (string) - The image MIME type (e.g., 'image/jpeg', 'image/png').</p> </li> <li> <p>item - Represents a single item within a list. Typically used as a child element of \"list\".</p> </li> <li> <p>list - Represents an ordered or unordered list of items.</p> </li> <li> <p>list-style (string) - The style of the list bullets or enumeration (e.g., 'star', 'dash', 'decimal').</p> </li> <li> <p>nl - Inserts newline characters.</p> </li> <li> <p>count (integer) - Specifies how many newline characters to insert.</p> </li> <li> <p>obj - Represents a data object, typically stored in JSON format.</p> </li> <li> <p>data (object) - A valid JSON object containing the structured data.</p> </li> <li> <p>p - Represents a paragraph of text. Useful for dividing content into readable blocks.</p> </li> <li> <p>blank-line (boolean) - Inserts a blank line before and after the paragraph when true.</p> </li> <li> <p>s - Represents text that should be displayed with a strikethrough style.</p> </li> <li> <p>span - Represents an inline container for text without additional formatting. Useful for applying attributes without changing display structure.</p> </li> <li> <p>table - Represents a table structure containing rows and cells.</p> </li> <li> <p>tbody - Represents the body section of a table, containing the majority of data rows.</p> </li> <li> <p>tcell - Represents a single cell within a table row.</p> </li> <li> <p>text - Represents raw or unformatted text content.</p> </li> <li> <p>thead - Represents the header section of a table, typically containing column headings.</p> </li> <li> <p>trow - Represents a single row within a table, containing one or more cells.</p> </li> <li> <p>u - Represents text that should be displayed with an underline.</p> </li> </ul>"},{"location":"deep-dive/proposals/poml_extended/","title":"Extended POML File Format Design Specification","text":"<p>Status: Under implementation</p>"},{"location":"deep-dive/proposals/poml_extended/#overview","title":"Overview","text":"<p>This document describes the design for an extended POML file format that supports mixed content files - files that can contain both pure text (e.g., Markdown) and POML markup elements seamlessly integrated together.</p>"},{"location":"deep-dive/proposals/poml_extended/#current-limitations","title":"Current Limitations","text":"<p>The current POML implementation requires files to be fully enclosed within <code>&lt;poml&gt;...&lt;/poml&gt;</code> tags. Even though the outer level <code>&lt;poml&gt;...&lt;/poml&gt;</code> can be optional, the markup file is always parsed with one single pass of XML parser. This creates friction when users want to:</p> <ol> <li>Write primarily text-based documents (like Markdown or Jinja) with occasional POML components</li> <li>Usually need to escape characters like <code>&lt;</code> and <code>&gt;</code> in text content</li> <li>Gradually migrate existing text files to use POML features</li> </ol>"},{"location":"deep-dive/proposals/poml_extended/#design-goals","title":"Design Goals","text":"<ol> <li>Backward Compatibility: Most of existing POML files should continue to work without changes</li> <li>Flexibility: Support pure text files with embedded POML elements</li> <li>Seamless Integration: Allow switching between text and POML modes within a single file</li> </ol>"},{"location":"deep-dive/proposals/poml_extended/#file-format-specification","title":"File Format Specification","text":""},{"location":"deep-dive/proposals/poml_extended/#extended-poml-files","title":"Extended POML Files","text":"<p>Extended POML files can contain:</p> <ol> <li>Pure Text Content: Regular text content (Markdown, plain text, etc.)</li> <li>POML Element Pairs: Any element pair defined in <code>componentDocs.json</code> (e.g., <code>&lt;poml&gt;...&lt;/poml&gt;</code>, <code>&lt;p&gt;...&lt;/p&gt;</code>, <code>&lt;task&gt;...&lt;/task&gt;</code>)</li> <li>Mixed Content: Combination of pure text and POML elements</li> </ol>"},{"location":"deep-dive/proposals/poml_extended/#element-detection","title":"Element Detection","text":"<p>The system will assume the whole file is a pure text file and detects certain parts as POML elements based on the following:</p> <ol> <li>Loading component definitions from <code>componentDocs.json</code> and extracting valid POML component names and their aliases.</li> <li>Scanning for opening tags that match these components, and scanning until the corresponding closing tag is found.</li> <li>If a special tag <code>&lt;text&gt;...&lt;/text&gt;</code> is found within a POML segment, it will be treated as pure text content and processed following the rules above (step 1 and 2).</li> </ol> <p>An example is shown below:</p>"},{"location":"deep-dive/proposals/poml_extended/#example-1","title":"Example 1","text":"<pre><code># My Analysis Document\n\nThis is a regular markdown document that explains the task.\n\n&lt;task&gt;\n  Analyze the following data and provide insights.\n&lt;/task&gt;\n\nHere are some key points to consider:\n\n- Data quality\n- Statistical significance\n- Business impact\n\n&lt;examples&gt;\n  &lt;example&gt;\n    &lt;input&gt;Sample data point 1&lt;/input&gt;\n    &lt;output&gt;Analysis result 1&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n\n## Conclusion\n\nThe analysis shows...\n</code></pre>"},{"location":"deep-dive/proposals/poml_extended/#example-2","title":"Example 2","text":"<pre><code>&lt;poml&gt;\n  &lt;task&gt;Process the following data&lt;/task&gt;\n  &lt;text&gt;\n    This is **markdown** content that will be processed as pure text.\n\n    - Item 1\n    - Item 2\n\n    {{ VARIABLES_WILL_ALSO_SHOWN_AS_IS }}\n    &lt;cp caption=\"Nested POML\"&gt;This is a nested POML component that will be processed as POML.&lt;/cp&gt;\n\n    No POML processing happens here.\n  &lt;/text&gt;\n  &lt;hint&gt;Remember to check the format&lt;/hint&gt;\n&lt;/poml&gt;\n\nThere can be some intervening text here as well.\n\n&lt;poml&gt;\n  &lt;p&gt;You can add another POML segment here: {{variable_will_be_substituted}}&lt;/p&gt;\n&lt;/poml&gt;\n\n&lt;p&gt;POML elements do not necessarily reside in a &lt;text&gt;&lt;poml&gt; (the &lt;poml&gt; here is processed as is.)&lt;/text&gt; element.&lt;/p&gt;\n</code></pre> <p>Escaping Note: To directly show a POML tag in the text, users can use a <code>&lt;text&gt;</code> tag to wrap the content, as shown in the example above. If they want to escape a pair such as <code>&lt;poml&gt;...&lt;/poml&gt;</code>, they can escape the opening tag and closing tag respectively, such as <code>&lt;text&gt;&lt;poml&gt;&lt;/text&gt;...&lt;text&gt;&lt;/poml&gt;&lt;/text&gt;</code>.</p>"},{"location":"deep-dive/proposals/poml_extended/#file-level-metadata","title":"File-level Metadata","text":"<p>Metadatas are information that is useful when parsing and rendering the file, such as context variables, stylesheets, version information, file paths, etc. File-level metadata can be included at any place of the file in a special <code>&lt;meta&gt;</code> tag. This metadata will be processed before any content parsing.</p>"},{"location":"deep-dive/proposals/poml_extended/#architecture-design","title":"Architecture Design","text":""},{"location":"deep-dive/proposals/poml_extended/#high-level-processing-pipeline","title":"High-level Processing Pipeline","text":"<p>The core of the new architecture is a three-pass process: Segmentation, Metadata Extraction, and Recursive Rendering.</p>"},{"location":"deep-dive/proposals/poml_extended/#i-segmentation-pass","title":"I. Segmentation Pass","text":"<p>This initial pass is a crucial preprocessing step that scans the raw file content and partitions it into a hierarchical tree of segments. It does not parse the full XML structure of POML blocks; it only identifies their boundaries.</p> <ul> <li>Objective: To classify every part of the file as <code>META</code>, <code>POML</code>, or <code>TEXT</code> and build a nested structure.</li> <li>Algorithm:</li> <li>Load all valid POML component tag names (including aliases) from <code>componentDocs.json</code>. This set of tags will be used for detection.</li> <li>Initialize the root of the segment tree as a single, top-level <code>TEXT</code> segment spanning the entire file, unless the root segment is a single <code>&lt;poml&gt;...&lt;/poml&gt;</code> block spanning the whole file (in which case it will be treated as a <code>POML</code> segment).</li> <li>Use a stack-based algorithm to scan the text.</li> <li>When an opening tag (e.g., <code>&lt;task&gt;</code>) that matches a known POML component is found, push its name and start position onto the stack. This marks the beginning of a potential <code>POML</code> segment.</li> <li>When a closing tag (e.g., <code>&lt;/task&gt;</code>) is found that matches the tag at the top of the stack, pop the stack. This marks a complete <code>POML</code> segment. This new segment is added as a child to the current parent segment in the tree.</li> <li>The special <code>&lt;text&gt;</code> tag is handled recursively. If a <code>&lt;text&gt;</code> tag is found inside a <code>POML</code> segment, the scanner will treat its content as a nested <code>TEXT</code> segment. This <code>TEXT</code> segment can, in turn, contain more <code>POML</code> children.</li> <li>Any content not enclosed within identified <code>POML</code> tags remains part of its parent <code>TEXT</code> segment.</li> <li> <p><code>&lt;meta&gt;</code> tags are treated specially. They are identified and parsed into <code>META</code> segments at any level but are logically hoisted and processed first. They should not have children.</p> </li> <li> <p>Output: A <code>Segment</code> tree. For backward compatibility, if the root segment is a single <code>&lt;poml&gt;...&lt;/poml&gt;</code> block spanning the whole file, the system can revert to the original, simpler parsing model.</p> </li> </ul> <p><code>Segment</code> Interface: The <code>children</code> property is key to representing the nested structure of mixed-content files.</p> <pre><code>interface Segment {\n  id: string; // Unique ID for caching and React keys\n  kind: 'META' | 'TEXT' | 'POML';\n  start: number;\n  end: number;\n  content: string; // The raw string content of the segment\n  parent?: Segment; // Reference to the parent segment\n  children: Segment[]; // Nested segments (e.g., a POML block within text)\n  tagName?: string; // For POML segments, the name of the root tag (e.g., 'task')\n}\n</code></pre>"},{"location":"deep-dive/proposals/poml_extended/#ii-metadata-processing","title":"II. Metadata Processing","text":"<p>Once the segment tree is built, all <code>META</code> segments are processed.</p> <ul> <li>Extraction: Traverse the tree to find all <code>META</code> segments.</li> <li>Population: Parse the content of each <code>&lt;meta&gt;</code> tag and populate the global <code>PomlContext</code> object.</li> <li>Removal: After processing, <code>META</code> segments are removed from the tree to prevent them from being rendered.</li> </ul> <p><code>PomlContext</code> Interface: This context object is the single source of truth for the entire file, passed through all readers. It's mutable, allowing stateful operations like <code>&lt;let&gt;</code> to have a file-wide effect.</p> <pre><code>interface PomlContext {\n  variables: { [key: string]: any }; // For {{ substitutions }} and &lt;let&gt; (Read/Write)\n  texts: { [key: string]: React.ReactElement }; // Maps TEXT_ID to content for &lt;text&gt; replacement (Read/Write)\n  stylesheet: { [key: string]: string }; // Merged styles from all &lt;meta&gt; tags (Read-Only during render)\n  minimalPomlVersion?: string; // From &lt;meta&gt; (Read-Only)\n  sourcePath: string; // File path for resolving includes (Read-Only)\n}\n</code></pre>"},{"location":"deep-dive/proposals/poml_extended/#iii-textpoml-dispatching-recursive-rendering","title":"III. Text/POML Dispatching (Recursive Rendering)","text":"<p>Rendering starts at the root of the segment tree and proceeds recursively. A controller dispatches segments to the appropriate reader.</p> <ul> <li><code>PureTextReader</code>: Handles <code>TEXT</code> segments.</li> <li>Currently we directly render the pure-text contents as a single React element. In future, we can:<ul> <li>Renders the text content, potentially using a Markdown processor.</li> <li>Performs variable substitutions (<code>{{...}}</code>) using the <code>variables</code> from <code>PomlContext</code>. The logic from <code>handleText</code> in the original <code>PomlFile</code> should be extracted into a shared utility for this.</li> </ul> </li> <li> <p>Iterates through its <code>children</code> segments. For each child <code>POML</code> segment, it calls the <code>PomlReader</code>.</p> </li> <li> <p><code>PomlReader</code>: Handles <code>POML</code> segments.</p> </li> <li>Pre-processing: Before parsing, it replaces any direct child <code>&lt;text&gt;</code> regions with a self-closing placeholder tag containing a unique ID: <code>&lt;text ref=\"TEXT_ID_123\" /&gt;</code>. The original content of the <code>&lt;text&gt;</code> segment is stored in <code>context.texts</code>. This ensures the XML parser inside <code>PomlFile</code> doesn't fail on non-XML content (like Markdown).</li> <li>Delegation: Instantiates a modified <code>PomlFile</code> class with the processed segment content and the shared <code>PomlContext</code>.</li> <li> <p>Rendering: Calls the <code>pomlFile.react(context)</code> method to render the segment.</p> </li> <li> <p><code>IntelliSense Layer</code>: The segment tree makes it easy to provide context-aware IntelliSense. By checking the <code>kind</code> of the segment at the cursor's offset, the request can be routed to the correct provider\u2014either the <code>PomlReader</code>'s XML-aware completion logic or a simpler text/variable completion provider for <code>TEXT</code> segments.</p> </li> </ul> <p><code>Reader</code> Interface: This interface defines the contract for both <code>PureTextReader</code> and <code>PomlReader</code>.</p> <pre><code>interface Reader {\n  read(segment: Segment, context: PomlContext?): React.ReactElement;\n  getHoverToken(segment: Segment, offset: number): PomlToken | undefined;\n  getCompletions(offset: number): PomlToken[];\n}\n</code></pre>"},{"location":"deep-dive/proposals/poml_extended/#implementation-pomlfile-refactoring","title":"Implementation &amp; <code>PomlFile</code> Refactoring","text":"<p>To achieve this design, the existing <code>PomlFile</code> class needs significant refactoring. Its role changes from a file-level controller to a specialized parser for <code>POML</code> segments.</p>"},{"location":"deep-dive/proposals/poml_extended/#key-modifications-to-pomlfile","title":"Key Modifications to <code>PomlFile</code>","text":"<ol> <li> <p>Constructor (<code>new PomlFile</code>):</p> </li> <li> <p>Remove Auto-Wrapping: The <code>autoAddPoml</code> logic must be removed. The <code>PomlReader</code> will only pass it well-formed XML content corresponding to a single <code>POML</code> segment. The constructor will now assume the input <code>text</code> is a valid XML string.</p> </li> <li> <p>Receive Context: The constructor should accept the <code>PomlContext</code> object to access shared state.</p> </li> <li> <p>State Management (<code>handleLet</code>):</p> </li> <li> <p>The <code>&lt;let&gt;</code> tag's implementation must be modified to read from and write to the shared <code>PomlContext.variables</code> object, not a local context. This ensures that a variable defined in one POML block is available to subsequent POML blocks in the same file.</p> </li> <li> <p>Handling <code>&lt;include&gt;</code>:</p> </li> <li> <p>The <code>handleInclude</code> method should be removed from <code>PomlFile</code>. Inclusion is now handled at a higher level by the main processing pipeline. When the <code>PomlReader</code> encounters an <code>&lt;include&gt;</code> tag, it will invoke the entire pipeline (Segmentation, Metadata, Rendering) on the included file and insert the resulting React elements.</p> </li> <li> <p>Parsing <code>TEXT</code> Placeholders:</p> </li> <li> <p>The core <code>parseXmlElement</code> method needs a new branch to handle the <code>&lt;text ref=\"...\" /&gt;</code> placeholder.</p> </li> <li>When it encounters this element:</li> <li>It extracts the <code>ref</code> attribute (e.g., <code>\"TEXT_ID_123\"</code>).</li> <li>It looks up the corresponding raw text from <code>context.texts</code>.</li> <li>It fetches from the <code>context.texts</code> map and returns a React element containing the pure text content.</li> </ol>"},{"location":"language/basic/","title":"POML Basic Syntax","text":"<p>POML (Prompt Orchestration Markup Language) provides a convenient way to create prompts using a markup language that is easy to read and write. The standalone file mode is the most commonly used approach, where you create a file with a <code>.poml</code> extension. This file contains XML-like syntax that POML renders into a prompt. This mode is particularly useful for creating reusable templates and managing complex prompts without embedding POML directly in JSX files or using a Python SDK.</p> <p>In this mode, you wrap your content with a top-level <code>&lt;poml&gt;</code> tag, allowing POML to parse and render your markup correctly. Below is a guide on how to effectively use the standalone file mode.</p> <p>To create a POML file, simply create a file with the <code>.poml</code> extension and wrap your content within the <code>&lt;poml&gt;</code> tag:</p> <pre><code>&lt;poml&gt;\n  &lt;p&gt;Hello, world!&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>You can also type anything without a <code>poml</code> tag, and it will be treated as a string. It's called \"free text mode\" in POML. However, it has several limitations currently, including unabling to render any XML tags wrapped with <code>&lt;&gt;</code>, unabling to use many special characters, and unabling to use all the wonderful features of POML. So, it's always recommended to use the <code>poml</code> tag before everything.</p> <p>Tip: Glossary for Beginners:</p> <ul> <li>Tag: A tag is a fundamental building block in XML (and POML). It's used to mark the beginning and end of an element. Tags are enclosed in angle brackets (<code>&lt;</code> and <code>&gt;</code>). For example, <code>&lt;p&gt;</code> is an opening tag, and <code>&lt;/p&gt;</code> is a closing tag. Everything between the opening and closing tags is considered part of that element.</li> <li>Attribute: An attribute provides additional information about an element. Attributes are placed inside the opening tag, and they consist of a name and a value (enclosed in double quotes). For example, in <code>&lt;p speaker=\"human\"&gt;</code>, <code>speaker</code> is the attribute name, and <code>\"human\"</code> is the attribute value.</li> <li>Content: The content is the text or other elements that appear between the opening and closing tags of an element. For example, in <code>&lt;p&gt;Hello, world!&lt;/p&gt;</code>, \"Hello, world!\" is the content of the <code>&lt;p&gt;</code> element.</li> </ul> <p>Escape Characters: In POML, you can use escape characters to include special characters in your content and attribute values. Due to an implementation issue, the escape syntax in POML is slightly different from what you would know in HTML or XML. For example, to include a double quote (<code>\"</code>) in your content, you can use <code>#quot;</code> (rather than <code>&amp;quot;</code>). Here are some common escape characters:</p> <ol> <li><code>#quot;</code> for <code>\"</code></li> <li><code>#apos;</code> for <code>'</code></li> <li><code>#amp;</code> for <code>&amp;</code></li> <li><code>#lt;</code> for <code>&lt;</code></li> <li><code>#gt;</code> for <code>&gt;</code></li> <li><code>#hash;</code> for <code>#</code></li> <li><code>#lbrace;</code> for <code>{</code></li> <li><code>#rbrace;</code> for <code>}</code></li> </ol> <p>It's not necessary to use the escape characters for most cases, but they can be helpful when you are having trouble displaying those characters in certain cases.</p>"},{"location":"language/components/","title":"Components","text":""},{"location":"language/components/#basic-components","title":"Basic Components","text":""},{"location":"language/components/#audio","title":"Audio","text":"<p>Audio (<code>&lt;audio&gt;</code>) embeds an audio file in the content.</p> <p>Accepts either a file path (<code>src</code>) or base64-encoded audio data (<code>base64</code>). The MIME type can be provided via <code>type</code> or will be inferred from the file extension.</p>"},{"location":"language/components/#usages","title":"Usages","text":"<pre><code>&lt;Audio src=\"path/to/audio.mp3\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters","title":"Parameters","text":"<ul> <li>src: Path to the audio file. If provided, the file will be read and encoded as base64.</li> <li>base64: Base64-encoded audio data. Cannot be used together with <code>src</code>.</li> <li>alt: The alternative text to show when the image cannot be displayed.</li> <li>type: The MIME type of the audio (e.g., audio/mpeg, audio/wav). If not specified, it will be inferred from the file extension.     The type must be consistent with the real type of the file. The consistency will NOT be checked or converted.     The type can be specified with or without the <code>audio/</code> prefix.</li> <li>position: Can be one of: top, bottom, here. The position of the image. Default is <code>here</code>.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, multimedia. Only when specified as <code>multimedia</code>, the image will be shown.     Otherwise, the alt text will be shown. By default, it's <code>multimedia</code> when <code>alt</code> is not specified. Otherwise, it's undefined (inherit from parent).</li> </ul>"},{"location":"language/components/#bold","title":"Bold","text":"<p>Bold (<code>&lt;b&gt;</code>) emphasizes text in a bold style when using markup syntaxes.</p>"},{"location":"language/components/#usages_1","title":"Usages","text":"<pre><code>&lt;p&gt;&lt;b&gt;Task:&lt;/b&gt; Do something.&lt;/p&gt;\n</code></pre>"},{"location":"language/components/#parameters_1","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#captionedparagraph","title":"CaptionedParagraph","text":"<p>CaptionedParagraph (<code>&lt;cp&gt;</code> for short) creates a paragraph with a customized caption title.</p>"},{"location":"language/components/#usages_2","title":"Usages","text":"<pre><code>&lt;cp caption=\"Constraints\"&gt;\n  &lt;list&gt;\n    &lt;item&gt;Do not exceed 1000 tokens.&lt;/item&gt;\n    &lt;item&gt;Please use simple words.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/cp&gt;\n</code></pre>"},{"location":"language/components/#parameters_2","title":"Parameters","text":"<ul> <li>caption: The title or label for the paragraph. Required.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes.     By default, it's same as <code>caption</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#code","title":"Code","text":"<p>Code is used to represent code snippets or inline code in markup syntaxes.</p>"},{"location":"language/components/#usages_3","title":"Usages","text":"<pre><code>&lt;code inline=\"true\"&gt;const x = 42;&lt;/code&gt;\n</code></pre> <pre><code>&lt;code lang=\"javascript\"&gt;\nconst x = 42;\n&lt;/code&gt;\n</code></pre>"},{"location":"language/components/#parameters_3","title":"Parameters","text":"<ul> <li>inline: Boolean. Whether to render code inline or as a block. Default is <code>true</code>.</li> <li>lang: The language of the code snippet.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#header","title":"Header","text":"<p>Header (<code>&lt;h&gt;</code>) renders headings in markup syntaxes. It's commonly used to highlight titles or section headings. The header level will be automatically computed based on the context. Use SubContent (<code>&lt;section&gt;</code>) for nested content.</p>"},{"location":"language/components/#usages_4","title":"Usages","text":"<pre><code>&lt;Header syntax=\"markdown\"&gt;Section Title&lt;/Header&gt;\n</code></pre>"},{"location":"language/components/#parameters_4","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#inline","title":"Inline","text":"<p>Inline (<code>&lt;span&gt;</code>) is a container for inline content. When used with markup syntaxes, it wraps text in an inline style, without any preceding or following blank characters. In serializer syntaxes, it's treated as a generic value. Inline elements are not designed to be used alone (especially in serializer syntaxes). One might notice problematic renderings (e.g., speaker not applied) when using it alone.</p>"},{"location":"language/components/#usages_5","title":"Usages","text":"<pre><code>&lt;p&gt;I'm listening to &lt;span&gt;music&lt;/span&gt; right now.&lt;/p&gt;\n</code></pre>"},{"location":"language/components/#parameters_5","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#italic","title":"Italic","text":"<p>Italic (<code>&lt;i&gt;</code>) emphasizes text in an italic style when using markup syntaxes.</p>"},{"location":"language/components/#usages_6","title":"Usages","text":"<pre><code>Your &lt;i&gt;italicized&lt;/i&gt; text.\n</code></pre>"},{"location":"language/components/#parameters_6","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#list","title":"List","text":"<p>List (<code>&lt;list&gt;</code>) is a container for multiple ListItem (<code>&lt;item&gt;</code>) elements. When used with markup syntaxes, a bullet or numbering is added.</p>"},{"location":"language/components/#usages_7","title":"Usages","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"language/components/#parameters_7","title":"Parameters","text":"<ul> <li>listStyle: Can be one of: star, dash, plus, decimal, latin. The style for the list marker, such as dash or star. Default is <code>dash</code>.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#listitem","title":"ListItem","text":"<p>ListItem (<code>&lt;item&gt;</code>) is an item within a List component. In markup mode, it is rendered with the specified bullet or numbering style.</p>"},{"location":"language/components/#usages_8","title":"Usages","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item blankLine=\"true\"&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"language/components/#parameters_8","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#newline","title":"Newline","text":"<p>Newline (<code>&lt;br&gt;</code>) explicitly adds a line break, primarily in markup syntaxes. In serializer syntaxes, it's ignored.</p>"},{"location":"language/components/#usages_9","title":"Usages","text":"<pre><code>&lt;br /&gt;\n</code></pre>"},{"location":"language/components/#parameters_9","title":"Parameters","text":"<ul> <li>newLineCount: Number. The number of linebreaks to add.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#paragraph","title":"Paragraph","text":"<p>Paragraph (<code>&lt;p&gt;</code>) is a standalone section preceded by and followed by two blank lines in markup syntaxes. It's mostly used for text contents.</p>"},{"location":"language/components/#usages_10","title":"Usages","text":"<pre><code>&lt;p&gt;Contents of the paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"language/components/#parameters_10","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#strikethrough","title":"Strikethrough","text":"<p>Strikethrough (<code>&lt;s&gt;</code>, <code>&lt;strike&gt;</code>) indicates removed or invalid text in markup syntaxes.</p>"},{"location":"language/components/#usages_11","title":"Usages","text":"<pre><code>&lt;s&gt;This messages is removed.&lt;/s&gt;\n</code></pre>"},{"location":"language/components/#parameters_11","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#subcontent","title":"SubContent","text":"<p>SubContent (<code>&lt;section&gt;</code>) renders nested content, often following a header. The headers within the section will be automatically adjusted to a lower level.</p>"},{"location":"language/components/#usages_12","title":"Usages","text":"<pre><code>&lt;h&gt;Section Title&lt;/h&gt;\n&lt;section&gt;\n  &lt;h&gt;Sub-section Title&lt;/h&gt;  &lt;!-- Nested header --&gt;\n  &lt;p&gt;Sub-section details&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"language/components/#parameters_12","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#text","title":"Text","text":"<p>Text (<code>&lt;text&gt;</code>, <code>&lt;poml&gt;</code>) is a wrapper for any contents. By default, it uses <code>markdown</code> syntax and writes the contents within it directly to the output. When used with \"markup\" syntaxes, it renders a standalone section preceded and followed by one blank line. It's mostly used in the root element of a prompt, but it should also work in any other places. This component will be automatically added as a wrapping root element if it's not provided: 1. If the first element is pure text contents, <code>&lt;poml syntax=\"text\"&gt;</code> will be added. 2. If the first element is a POML component, <code>&lt;poml syntax=\"markdown\"&gt;</code> will be added.</p>"},{"location":"language/components/#usages_13","title":"Usages","text":"<pre><code>&lt;poml syntax=\"text\"&gt;\nContents of the whole prompt.\n\n1. Your customized list.\n2. You don't need to know anything about POML.\n&lt;/poml&gt;\n</code></pre> <p>To render the whole prompt in markdown syntax with a \"human\" speaker:</p> <pre><code>&lt;poml syntax=\"markdown\" speaker=\"human\"&gt;\n  &lt;p&gt;You are a helpful assistant.&lt;/p&gt;\n  &lt;p&gt;What is the capital of France?&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>Experimental usage with limits and priority:</p> <pre><code>&lt;poml syntax=\"markdown\" tokenLimit=\"10\"&gt;\n  &lt;p priority=\"1\"&gt;This has lower priority and may be truncated first.&lt;/p&gt;\n  &lt;p priority=\"3\"&gt;This has higher priority and will be preserved longer.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/components/#parameters_13","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#underline","title":"Underline","text":"<p>Underline (<code>&lt;u&gt;</code>) draws a line beneath text in markup syntaxes.</p>"},{"location":"language/components/#usages_14","title":"Usages","text":"<pre><code>This text is &lt;u&gt;underlined&lt;/u&gt;.\n</code></pre>"},{"location":"language/components/#parameters_14","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#intentions","title":"Intentions","text":""},{"location":"language/components/#example","title":"Example","text":"<p>Example is useful for providing a context, helping the model to understand what kind of inputs and outputs are expected. It can also be used to demonstrate the desired output style, clarifying the structure, tone, or level of detail in the response.</p>"},{"location":"language/components/#usages_15","title":"Usages","text":"<pre><code>&lt;example&gt;\n  &lt;input&gt;What is the capital of France?&lt;/input&gt;\n  &lt;output&gt;Paris&lt;/output&gt;\n&lt;/example&gt;\n</code></pre> <pre><code>&lt;task&gt;Summarize the following passage in a single sentence.&lt;/task&gt;\n&lt;example&gt;\n  &lt;input caption=\"Passage\"&gt;The sun provides energy for life on Earth through processes like photosynthesis.&lt;/input&gt;\n  &lt;output caption=\"Summary\"&gt;The sun is essential for energy and life processes on Earth.&lt;/output&gt;\n&lt;/example&gt;\n</code></pre>"},{"location":"language/components/#parameters_15","title":"Parameters","text":"<ul> <li>caption: The title or label for the example paragraph. Default is <code>Example</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>example</code>.</li> <li>captionStyle: Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>hidden</code>.   Options include <code>header</code>, <code>bold</code>, <code>plain</code>, or <code>hidden</code>.</li> <li>chat: Boolean. Indicates whether the example should be rendered in chat format.   When used in a example set (<code>&lt;examples&gt;</code>), this is inherited from the example set.   Otherwise, it defaults to <code>false</code> for \"serializer\" syntaxes and <code>true</code> for \"markup\" syntaxes.</li> <li>captionTextTransform: Specifies text transformation for the caption, applicable only for \"markup\" syntaxes.   Options are <code>upper</code>, <code>lower</code>, <code>capitalize</code>, or <code>none</code>. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#exampleinput","title":"ExampleInput","text":"<p>ExampleInput (<code>&lt;input&gt;</code>) is a paragraph that represents an example input. By default, it's spoken by a human speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"language/components/#usages_16","title":"Usages","text":"<pre><code>&lt;input&gt;What is the capital of France?&lt;/input&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;input&gt;What is the capital of {{country}}?&lt;/input&gt;\n</code></pre>"},{"location":"language/components/#parameters_16","title":"Parameters","text":"<ul> <li>caption: The title or label for the example input paragraph. Default is <code>Input</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>input</code>.</li> <li>speaker: The speaker for the example input. Default is <code>human</code> if chat context is enabled (see <code>&lt;example&gt;</code>).</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>hidden</code> if chat context is enabled. Otherwise, it's <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#exampleoutput","title":"ExampleOutput","text":"<p>ExampleOutput (<code>&lt;output&gt;</code>) is a paragraph that represents an example output. By default, it's spoken by a AI speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"language/components/#usages_17","title":"Usages","text":"<pre><code>&lt;output&gt;The capital of France is Paris.&lt;/output&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;output&gt;The capital of {{country}} is {{capital}}.&lt;/output&gt;\n</code></pre>"},{"location":"language/components/#parameters_17","title":"Parameters","text":"<ul> <li>caption: The title or label for the example output paragraph. Default is <code>Output</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>output</code>.</li> <li>speaker: The speaker for the example output. Default is <code>ai</code> if chat context is enabled (see <code>&lt;example&gt;</code>).</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>hidden</code> if chat context is enabled. Otherwise, it's <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#exampleset","title":"ExampleSet","text":"<p>Example set (<code>&lt;examples&gt;</code>) is a collection of examples that are usually presented in a list. With the example set, you can manage multiple examples under a single title and optionally an introducer, as well as the same <code>chat</code> format. You can also choose to use <code>&lt;example&gt;</code> purely without example set.</p>"},{"location":"language/components/#usages_18","title":"Usages","text":"<pre><code>&lt;examples chat={{true}}&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of France?&lt;/input&gt;\n    &lt;output&gt;Paris&lt;/output&gt;\n  &lt;/example&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of Germany?&lt;/input&gt;\n    &lt;output&gt;Berlin&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n</code></pre>"},{"location":"language/components/#parameters_18","title":"Parameters","text":"<ul> <li>caption: The title or label for the example set paragraph. Default is <code>Examples</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>examples</code>.</li> <li>chat: Boolean. Indicates whether the examples should be rendered in chat format.   By default, it's <code>true</code> for \"markup\" syntaxes and <code>false</code> for \"serializer\" syntaxes.</li> <li>introducer: An optional introducer text to be displayed before the examples.   For example, <code>Here are some examples:</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#hint","title":"Hint","text":"<p>Hint can be used anywhere in the prompt where you want to provide a helpful tip or explanation. It is usually a short and concise statement that guides the LLM in the right direction.</p>"},{"location":"language/components/#usages_19","title":"Usages","text":"<pre><code>&lt;hint&gt;Alice first purchased 4 apples and then 3 more, so she has 7 apples in total.&lt;/hint&gt;\n</code></pre>"},{"location":"language/components/#parameters_19","title":"Parameters","text":"<ul> <li>caption: The title or label for the hint paragraph. Default is <code>Hint</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>hint</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#introducer","title":"Introducer","text":"<p>Introducer is a paragraph before a long paragraph (usually a list of examples, steps, or instructions). It serves as a context introducing what is expected to follow.</p>"},{"location":"language/components/#usages_20","title":"Usages","text":"<pre><code>&lt;introducer&gt;Here are some examples.&lt;/introducer&gt;\n</code></pre>"},{"location":"language/components/#parameters_20","title":"Parameters","text":"<ul> <li>caption: The title or label for the introducer paragraph. Default is <code>Introducer</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>introducer</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>hidden</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#outputformat","title":"OutputFormat","text":"<p>Output format deals with the format in which the model should provide the output. It can be a specific format such as JSON, XML, or CSV, or a general format such as a story, a diagram or steps of instructions. Please refrain from specifying too complex formats that the model may not be able to generate, such as a PDF file or a video.</p>"},{"location":"language/components/#usages_21","title":"Usages","text":"<pre><code>&lt;output-format&gt;Respond with a JSON without additional characters or punctuations.&lt;/output-format&gt;\n</code></pre>"},{"location":"language/components/#parameters_21","title":"Parameters","text":"<ul> <li>caption: The title or label for the output format paragraph. Default is <code>Output Format</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>outputFormat</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#question","title":"Question","text":"<p>Question (<code>&lt;qa&gt;</code>) is actually a combination of a question and a prompt for the answer. It's usually used at the end of a prompt to ask a question. The question is followed by a prompt for answer (e.g., <code>Answer:</code>) to guide the model to respond.</p>"},{"location":"language/components/#usages_22","title":"Usages","text":"<pre><code>&lt;qa&gt;What is the capital of France?&lt;/qa&gt;\n</code></pre>"},{"location":"language/components/#parameters_22","title":"Parameters","text":"<ul> <li>questionCaption: The title or label for the question paragraph. Default is <code>Question</code>.</li> <li>answerCaption: The title or label for the answer paragraph. Default is <code>Answer</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>question</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#role","title":"Role","text":"<p>Specifies the role you want the language model to assume when responding. Defining a role provides the model with a perspective or context, such as a scientist, poet, child, or any other persona you choose.</p>"},{"location":"language/components/#usages_23","title":"Usages","text":"<pre><code>&lt;role&gt;You are a data scientist.&lt;/role&gt;\n</code></pre>"},{"location":"language/components/#parameters_23","title":"Parameters","text":"<ul> <li>caption: The title or label for the role paragraph. Default is <code>Role</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>role</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#stepwiseinstructions","title":"StepwiseInstructions","text":"<p>StepwiseInstructions that elaborates the task by providing a list of steps or instructions. Each step should be concise and clear, and the list should be easy to follow.</p>"},{"location":"language/components/#usages_24","title":"Usages","text":"<pre><code>&lt;stepwise-instructions&gt;\n  &lt;list&gt;\n    &lt;item&gt;Interpret and rewrite user's query.&lt;/item&gt;\n    &lt;item&gt;Think of a plan to solve the query.&lt;/item&gt;\n    &lt;item&gt;Generate a response based on the plan.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/stepwise-instructions&gt;\n</code></pre>"},{"location":"language/components/#parameters_24","title":"Parameters","text":"<ul> <li>caption: The title or label for the stepwise instructions paragraph. Default is <code>Stepwise Instructions</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>stepwiseInstructions</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#task","title":"Task","text":"<p>Task represents the action you want the language model to perform. It is a directive or instruction that you want the model to follow. Task is usually not long, but rather a concise and clear statement. Users can also include a list of steps or instructions to complete the task.</p>"},{"location":"language/components/#usages_25","title":"Usages","text":"<pre><code>&lt;task&gt;Cook a recipe on how to prepare a beef dish.&lt;/task&gt;\n</code></pre> <p>When including a list of steps: <pre><code>&lt;task&gt;\n  Planning a schedule for a travel.\n  &lt;list&gt;\n    &lt;item&gt;Decide on the destination and plan the duration.&lt;/item&gt;\n    &lt;item&gt;Find useful information about the destination.&lt;/item&gt;\n    &lt;item&gt;Write down the schedule for each day.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/task&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_25","title":"Parameters","text":"<ul> <li>caption: The title or label for the task paragraph. Default is <code>Task</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>task</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#data-displays","title":"Data Displays","text":""},{"location":"language/components/#document","title":"Document","text":"<p>Displaying an external document like PDF, TXT or DOCX.</p>"},{"location":"language/components/#usages_26","title":"Usages","text":"<p>To display a Word document without including the real multimedia: <pre><code>&lt;Document src=\"sample.docx\" multimedia=\"false\"/&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_26","title":"Parameters","text":"<ul> <li>src: The source file to read the data from. This must be provided if records is not provided.</li> <li>buffer: Buffer. Document data buffer. Recommended to use <code>src</code> instead unless you want to use a string.</li> <li>base64: Base64 encoded string of the document data. Mutually exclusive with <code>src</code> and <code>buffer</code>.</li> <li>parser: Can be one of: auto, pdf, docx, txt. The parser to use for reading the data. If not provided, it will be inferred from the file extension.</li> <li>multimedia: Boolean. If true, the multimedias will be displayed. If false, the alt strings will be displayed at best effort. Default is <code>true</code>.</li> <li>selectedPages: The pages to be selected. This is only available for PDF documents. If not provided, all pages will be selected.   You can use a string like <code>2</code> to specify a single page, or slice like <code>2:4</code> to specify a range of pages (2 inclusive, 4 exclusive).   The pages selected are 0-indexed. Negative indexes like <code>-1</code> is not supported here.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#folder","title":"Folder","text":"<p>Displays a directory structure as a tree.</p>"},{"location":"language/components/#usages_27","title":"Usages","text":"<p>To display a directory structure with a filter for Python files: <pre><code>&lt;folder src=\"project_dir\" filter=\".*\\.py$\" maxDepth=\"3\" /&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_27","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, text, xml. The output syntax of the content.</li> <li>src: The source directory path to display.</li> <li>data: TreeItemData[]. Alternative to src, directly provide tree data structure.</li> <li>filter: RegExp. A regular expression to filter files.     The regex is applied to the folder names and file names (not the full path).     Directories are included by default unless all of their nested content is filtered out.     When filter is on, empty directories will not be shown.</li> <li>maxDepth: Number. Maximum depth of directory traversal. Default is 3.</li> <li>showContent: Boolean. Whether to show file contents. Default is false.</li> </ul>"},{"location":"language/components/#image","title":"Image","text":"<p>Image (<code>&lt;img&gt;</code>) displays an image in the content. Alternatively, it can also be shown as an alt text by specifying the <code>syntax</code> prop. Note that syntax must be specified as <code>multimedia</code> to show the image.</p>"},{"location":"language/components/#usages_28","title":"Usages","text":"<pre><code>&lt;Image src=\"path/to/image.jpg\" alt=\"Image description\" position=\"bottom\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_28","title":"Parameters","text":"<ul> <li>src: The path or URL to the image file.</li> <li>alt: The alternative text to show when the image cannot be displayed.</li> <li>base64: The base64 encoded image data. It can not be specified together with <code>src</code>.</li> <li>type: The MIME type of the image to be shown. If not specified, it will be inferred from the file extension.     If specified, the image will be converted to the specified type. Can be <code>image/jpeg</code>, <code>image/png</code>, etc., or without the <code>image/</code> prefix.</li> <li>position: Can be one of: top, bottom, here. The position of the image. Default is <code>here</code>.</li> <li>maxWidth: Number. The maximum width of the image to be shown.</li> <li>maxHeight: Number. The maximum height of the image to be shown.</li> <li>resize: Number. The ratio to resize the image to to be shown.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, multimedia. Only when specified as <code>multimedia</code>, the image will be shown.     Otherwise, the alt text will be shown. By default, it's <code>multimedia</code> when <code>alt</code> is not specified. Otherwise, it's undefined (inherit from parent).</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#object","title":"Object","text":"<p>DataObject (<code>&lt;obj&gt;</code>, <code>&lt;object&gt;</code>, <code>&lt;dataObj&gt;</code>) displays external data or object content. When in serialize mode, it's serialized according to the given serializer.</p>"},{"location":"language/components/#usages_29","title":"Usages","text":"<pre><code>&lt;DataObject syntax=\"json\" data=\"{ key: 'value' }\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_29","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml. The syntax or serializer of the content. Default is <code>json</code>.</li> <li>data: Object. The data object to render.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#table","title":"Table","text":"<p>Displaying a table with records and columns.</p>"},{"location":"language/components/#usages_30","title":"Usages","text":"<pre><code>&lt;table records=\"{{[{ name: 'Alice', age: 20 }, { name: 'Bob', age: 30 }]}}\" /&gt;\n</code></pre> <p>To import an excel file, and display the first 10 records in csv syntax:</p> <pre><code>&lt;table src=\"data.xlsx\" parser=\"excel\" maxRecords=\"10\" syntax=\"csv\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_30","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, text, csv, tsv, xml. The output syntax of the content.</li> <li>records: Object. A list, each element is an object / dictionary / list of elements. The keys are the fields and the values are the data in cells.</li> <li>columns: Object. A list of column definitions. Each column definition is an object with keys \"field\", \"header\", and \"description\".   The field is the key in the record object, the header is displayed in the top row, and the description is meant to be an explanation.   Columns are optional. If not provided, the columns are inferred from the records.</li> <li>src: The source file to read the data from. This must be provided if records is not provided.</li> <li>parser: Can be one of: auto, csv, tsv, excel, json, jsonl. The parser to use for reading the data. If not provided, it will be inferred from the file extension.</li> <li>selectedColumns: Object. The selected columns to display. If not provided, all columns will be displayed.   It should be an array of column field names, e.g. <code>[\"name\", \"age\"]</code>; or a string like <code>2:4</code> to select columns 2 (inclusive) to 4 (exclusive).   There is a special column name called <code>index</code> which is the enumeration of the records starting from 0.   You can also use a special value called <code>+index</code> to add the index column to the original table.</li> <li>selectedRecords: Object. The selected records to display. If not provided, all records will be displayed.   It should be an array of record indices, e.g. <code>[0, 1]</code>; or a string like <code>2:4</code> to select records 2 (inclusive) to 4 (exclusive).</li> <li>maxRecords: Number. The maximum number of records to display. If not provided, all records will be displayed.</li> <li>maxColumns: Number. The maximum number of columns to display. If not provided, all columns will be displayed.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#tree","title":"Tree","text":"<p>Renders a tree structure in various formats.</p>"},{"location":"language/components/#usages_31","title":"Usages","text":"<pre><code>&lt;Tree items={treeData} syntax=\"markdown\" showContent={true} /&gt;\n</code></pre>"},{"location":"language/components/#parameters_31","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, text, xml. The output syntax to use for rendering the tree</li> <li>items: TreeItemData[]. Array of tree items to render</li> <li>showContent: Boolean. Whether to show content values of tree items</li> </ul>"},{"location":"language/components/#webpage","title":"Webpage","text":"<p>Displays content from a webpage.</p>"},{"location":"language/components/#usages_32","title":"Usages","text":"<p>Display content from a URL: <pre><code>&lt;webpage url=\"https://example.com\" /&gt;\n</code></pre></p> <p>Extract only specific content using a selector: <pre><code>&lt;webpage url=\"https://example.com\" selector=\"main article\" /&gt;\n</code></pre></p> <p>Convert HTML to structured POML components: <pre><code>&lt;webpage url=\"https://example.com\" extractText=\"false\" /&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_32","title":"Parameters","text":"<ul> <li>url: The URL of the webpage to fetch and display.</li> <li>src: Local file path to an HTML file to display.</li> <li>buffer: Buffer. HTML content as string or buffer.</li> <li>base64: Base64 encoded HTML content.</li> <li>extractText: Boolean. Whether to extract plain text content (true) or convert HTML to structured POML (false). Default is false.</li> <li>selector: CSS selector to extract specific content from the page (e.g., \"article\", \".content\", \"#main\"). Default is \"body\".</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#utilities","title":"Utilities","text":""},{"location":"language/components/#aimessage","title":"AiMessage","text":"<p>Wrap the contents in a AI message.</p>"},{"location":"language/components/#usages_33","title":"Usages","text":"<pre><code>&lt;ai-msg&gt;Paris&lt;/ai-msg&gt;\n</code></pre>"},{"location":"language/components/#parameters_33","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#conversation","title":"Conversation","text":"<p>Display a conversation between system, human and AI.</p>"},{"location":"language/components/#usages_34","title":"Usages","text":"<pre><code>&lt;conversation messages=\"{{[{ speaker: 'human', content: 'What is the capital of France?' }, { speaker: 'ai', content: 'Paris' }]}}\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_34","title":"Parameters","text":"<ul> <li>messages: Object. A list of message. Each message should have a <code>speaker</code> and a <code>content</code> field.</li> <li>selectedMessages: The messages to be selected. If not provided, all messages will be selected.   You can use a string like <code>2</code> to specify a single message, or slice like <code>2:4</code> to specify a range of messages (2 inclusive, 4 exclusive).   Or use <code>-6:</code> to select the last 6 messages.</li> </ul>"},{"location":"language/components/#humanmessage","title":"HumanMessage","text":"<p>Wrap the contents in a user message.</p>"},{"location":"language/components/#usages_35","title":"Usages","text":"<pre><code>&lt;user-msg&gt;What is the capital of France?&lt;/user-msg&gt;\n</code></pre>"},{"location":"language/components/#parameters_35","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#messagecontent","title":"MessageContent","text":"<p>Display a message content.</p>"},{"location":"language/components/#usages_36","title":"Usages","text":"<pre><code>&lt;msg-content content=\"What is the capital of France?\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_36","title":"Parameters","text":"<ul> <li>content: Object. The content of the message. It can be a string, or an array of strings and multimedia content.</li> </ul>"},{"location":"language/components/#systemmessage","title":"SystemMessage","text":"<p>Wrap the contents in a system message.</p>"},{"location":"language/components/#usages_37","title":"Usages","text":"<pre><code>&lt;system-msg&gt;Answer concisely.&lt;/system-msg&gt;\n</code></pre>"},{"location":"language/components/#parameters_37","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content. Note <code>xml</code> and <code>text</code> are experimental.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> <li>whiteSpace: Can be one of: pre, filter, trim. Experimental. Controls how whitespace is handled in text content.     <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;     <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;     <code>'trim'</code>: Trims whitespace from the beginning and end.</li> <li>charLimit: Number. Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>tokenLimit: Number. Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</li> <li>priority: Number. Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</li> </ul>"},{"location":"language/components/#toolrequest","title":"ToolRequest","text":"<p>ToolRequest represents an AI-generated tool request with parameters. Used to display tool calls made by AI models.</p>"},{"location":"language/components/#usages_38","title":"Usages","text":"<pre><code>&lt;ToolRequest id=\"123\" name=\"search\" parameters={{ query: \"hello\" }} /&gt;\n</code></pre>"},{"location":"language/components/#parameters_38","title":"Parameters","text":"<ul> <li>id: Tool request ID</li> <li>name: Tool name</li> <li>parameters: Any. Tool input parameters</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. Default is <code>ai</code>.</li> </ul>"},{"location":"language/components/#toolresponse","title":"ToolResponse","text":"<p>ToolResponse represents the result of a tool execution. Used to display tool execution results with rich content.</p>"},{"location":"language/components/#usages_39","title":"Usages","text":"<pre><code>&lt;ToolResponse id=\"123\" name=\"search\"&gt;\n &lt;Paragraph&gt;Search results for \"hello\":&lt;/Paragraph&gt;\n &lt;List&gt;\n  &lt;ListItem&gt;Result 1&lt;/ListItem&gt;\n  &lt;ListItem&gt;Result 2&lt;/ListItem&gt;\n &lt;/List&gt;\n&lt;/ToolResponse&gt;\n</code></pre>"},{"location":"language/components/#parameters_39","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of ToolResponse is special.     It is always <code>multimedia</code> for itself. The syntax is used to render the content inside.     If not specified, it will inherit from the parent context.</li> <li>id: Tool call ID to respond to</li> <li>name: Tool name</li> <li>speaker: Can be one of: human, ai, system, tool. The speaker of the content. Default is <code>tool</code>.</li> </ul>"},{"location":"language/meta/","title":"Meta","text":"<p>POML documents support two types of meta elements that control document behavior and configuration:</p> <ol> <li>The <code>&lt;meta&gt;</code> element - Defines the most fundamental metadata about a POML file, such as version requirements and component control</li> <li>Meta-like components - Elements that look like normal POML components but affect prompt rendering and LLM execution without appearing in the final prompt messages (e.g., <code>&lt;stylesheet&gt;</code>, <code>&lt;output-schema&gt;</code>, <code>&lt;tool-definition&gt;</code>, <code>&lt;runtime&gt;</code>)</li> </ol>"},{"location":"language/meta/#the-meta-element","title":"The <code>&lt;meta&gt;</code> Element","text":"<p>The <code>&lt;meta&gt;</code> element provides core metadata and configuration for POML documents. It allows you to specify version requirements and disable/enable components.</p>"},{"location":"language/meta/#basic-usage","title":"Basic Usage","text":"<p>Meta elements are typically placed at the beginning of a POML document and don't produce any visible output. One POML file can have multiple <code>&lt;meta&gt;</code> elements at any position, but they should be used carefully to avoid conflicts.</p> <pre><code>&lt;poml&gt;\n  &lt;meta minVersion=\"1.0.0\" /&gt;\n  &lt;p&gt;Your content here&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/meta/#meta-element-usage","title":"Meta Element Usage","text":"<p>Meta elements are used for general document configuration:</p> <ul> <li>Version control (<code>minVersion</code>, <code>maxVersion</code>)</li> <li>Component management (<code>components</code>)</li> </ul>"},{"location":"language/meta/#version-control","title":"Version Control","text":"<p>Version requirements ensure compatibility between documents and the POML runtime. This prevents runtime errors when documents require specific POML features.</p> <pre><code>&lt;meta minVersion=\"0.5.0\" maxVersion=\"2.0.0\" /&gt;\n</code></pre> <ul> <li>minVersion: Minimum required POML version. If the current version is lower, an error is thrown.</li> <li>maxVersion: Maximum supported POML version. Documents may not work correctly with newer versions.</li> </ul> <p>Version checking uses semantic versioning (MAJOR.MINOR.PATCH) and occurs during document parsing.</p>"},{"location":"language/meta/#component-control","title":"Component Control","text":"<p>The <code>components</code> attribute dynamically enables or disables POML components within a document. This is useful for conditional content, feature flags, or restricting elements in specific contexts.</p>"},{"location":"language/meta/#disabling-components","title":"Disabling Components","text":"<p>Prefix component names with <code>-</code> to disable them:</p> <pre><code>&lt;meta components=\"-table\" /&gt;\n&lt;!-- Now &lt;table&gt; elements will throw an error --&gt;\n</code></pre> <p>You can disable multiple components:</p> <pre><code>&lt;meta components=\"-table,-image\" /&gt;\n</code></pre>"},{"location":"language/meta/#re-enabling-components","title":"Re-enabling Components","text":"<p>Use <code>+</code> prefix to re-enable previously disabled components:</p> <pre><code>&lt;meta components=\"-table\" /&gt;\n&lt;!-- table is disabled --&gt;\n&lt;meta components=\"+table\" /&gt;\n&lt;!-- table is re-enabled --&gt;\n</code></pre> <p>Component aliases can be disabled independently of the main component name. For example, if a component has both a main name and aliases, you can disable just the alias while keeping the main component available.</p>"},{"location":"language/meta/#meta-like-components","title":"Meta-like Components","text":"<p>The following sections describe components that behave like meta elements - they affect how the prompt is processed and executed but don't appear in the final prompt messages sent to the LLM.</p>"},{"location":"language/meta/#stylesheet","title":"Stylesheet","text":"<p>POML allows you to define styles for your elements using the <code>&lt;stylesheet&gt;</code> tag. This enables you to apply CSS-like styles (or, more generally, component attributes) to your markup.</p> <p>You can define styles within a <code>&lt;stylesheet&gt;</code> tag. The stylesheet must be a valid JSON object and must be placed directly under the root <code>&lt;poml&gt;</code> element.</p> <pre><code>&lt;poml&gt;\n  &lt;stylesheet&gt;\n    {\n      \"p\": {\n        \"syntax\": \"json\"\n      }\n    }\n  &lt;/stylesheet&gt;\n  &lt;p&gt;This text will be rendered as JSON.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>In this example, all <code>&lt;p&gt;</code> elements will have their <code>syntax</code> attribute set to <code>\"json\"</code>. You can set any attribute of a component using the stylesheet.</p>"},{"location":"language/meta/#classname-attribute","title":"ClassName Attribute","text":"<p>Elements can be identified with a <code>className</code> attribute for styling. The stylesheet can then target elements with specific class names using a CSS-like selector syntax (using a dot <code>.</code> before the class name).</p> <pre><code>&lt;poml&gt;\n  &lt;table className=\"csv\" records=\"[[1,2,3],[4,5,6]]\"/&gt;\n  &lt;stylesheet&gt;\n    {\n      \".csv\": {\n        \"syntax\": \"csv\",\n        \"writerOptions\": \"{\\\\\"csvSeparator\\\\\": \\\\\";\\\\\", \\\\\"csvHeader\\\\\": false}\"\n      }\n    }\n  &lt;/stylesheet&gt;\n&lt;/poml&gt;\n</code></pre> <p>Here, the <code>&lt;table&gt;</code> element has the class name \"csv\". The stylesheet targets elements with the class \"csv\" (using <code>.csv</code>) and sets their <code>syntax</code> to \"csv\" and <code>writerOptions</code> to a specific JSON string. Note the escaped backslashes (<code>\\\\</code>) in the <code>writerOptions</code> value, which are necessary because the stylesheet itself is a JSON string. This example will render to:</p> <pre><code>1;2;3\n4;5;6\n</code></pre> <p>NOTE: The writerOptions API is experimental and is subject to change.</p>"},{"location":"language/meta/#response-schema","title":"Response Schema","text":"<p>Response schemas define the expected structure of AI-generated responses, ensuring that language models return data in a predictable, parsable format. This transforms free-form text generation into structured data generation.</p>"},{"location":"language/meta/#json-schema-format","title":"JSON Schema Format","text":"<p>Use the <code>parser=\"json\"</code> attribute to specify JSON Schema format. The schema must be a valid OpenAPI JSON Schema object.</p> <pre><code>&lt;output-schema parser=\"json\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"age\": { \"type\": \"number\" }\n    },\n    \"required\": [\"name\"]\n  }\n&lt;/output-schema&gt;\n</code></pre>"},{"location":"language/meta/#expression-format","title":"Expression Format","text":"<p>Use the <code>parser=\"eval\"</code> attribute (or omit it for auto-detection) to evaluate JavaScript expressions that return schemas. It should return a Zod schema objects or a JavaScript object that complies with OpenAPI JSON Schema standards:</p> <pre><code>&lt;output-schema parser=\"eval\"&gt;\n  z.object({\n    name: z.string(),\n    age: z.number().optional()\n  })\n&lt;/output-schema&gt;\n</code></pre> <p>When <code>parser</code> is omitted, POML auto-detects the format:</p> <ul> <li>If the content starts with <code>{</code>, it's treated as JSON</li> <li>Otherwise, it's treated as an expression</li> </ul>"},{"location":"language/meta/#expression-evaluation-in-schemas","title":"Expression Evaluation in Schemas","text":""},{"location":"language/meta/#json-schema-with-template-expressions","title":"JSON Schema with Template Expressions","text":"<p>JSON schemas support template expressions using <code>{{ }}</code> syntax:</p> <pre><code>&lt;let name=\"maxAge\" value=\"100\" /&gt;\n&lt;output-schema parser=\"json\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"age\": {\n        \"type\": \"number\",\n        \"minimum\": 0,\n        \"maximum\": {{ maxAge }}\n      }\n    }\n  }\n&lt;/output-schema&gt;\n</code></pre>"},{"location":"language/meta/#expression-format-with-javascript-evaluation","title":"Expression Format with JavaScript Evaluation","text":"<p>Expression schemas are evaluated as JavaScript code with access to context variables and the <code>z</code> (Zod) variable:</p> <pre><code>&lt;let name=\"fields\" value='[\"name\", \"email\", \"age\"]' /&gt;\n&lt;output-schema parser=\"eval\"&gt;\n  z.object(\n    Object.fromEntries(fields.map(f =&gt; [f, z.string()]))\n  )\n&lt;/output-schema&gt;\n</code></pre> <p>The expression can return either:</p> <ul> <li>A Zod schema object (detected by the presence of <code>_def</code> property)</li> <li>A plain JavaScript object treated as JSON Schema</li> </ul> <p>Important limitations:</p> <ul> <li>Only one <code>output-schema</code> element is allowed per document. Multiple response schemas will result in an error.</li> </ul>"},{"location":"language/meta/#tool-registration","title":"Tool Registration","text":"<p>Tool registration enables AI models to interact with external functions during conversation. Tools are function definitions that tell the AI model what functions are available, what parameters they expect, and what they do. Tool registration is done using the <code>&lt;tool-definition&gt;</code> or <code>&lt;tool&gt;</code> tag (both are equivalent).</p> <p>Note</p> <p>Using tools together with response schema is only supported for some models, e.g., those from OpenAI.</p>"},{"location":"language/meta/#json-schema-format_1","title":"JSON Schema Format","text":"<pre><code>&lt;tool-definition name=\"getWeather\" description=\"Get weather information\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": { \"type\": \"string\" },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"]\n      }\n    },\n    \"required\": [\"location\"]\n  }\n&lt;/tool-definition&gt;\n</code></pre>"},{"location":"language/meta/#expression-format_1","title":"Expression Format","text":"<pre><code>&lt;tool-definition name=\"calculate\" description=\"Perform calculation\" parser=\"eval\"&gt;\n  z.object({\n    operation: z.enum(['add', 'subtract', 'multiply', 'divide']),\n    a: z.number(),\n    b: z.number()\n  })\n&lt;/tool-definition&gt;\n</code></pre>"},{"location":"language/meta/#expression-evaluation-in-tool-schemas","title":"Expression Evaluation in Tool Schemas","text":"<p>Tool schemas support the same evaluation modes as response schemas:</p>"},{"location":"language/meta/#json-with-template-expressions","title":"JSON with Template Expressions","text":"<pre><code>&lt;let name=\"maxValue\" value=\"1000\" /&gt;\n&lt;tool-definition name=\"calculator\" description=\"Calculate values\" parser=\"json\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"value\": {\n        \"type\": \"number\",\n        \"maximum\": {{ maxValue }}\n      }\n    }\n  }\n&lt;/tool-definition&gt;\n</code></pre>"},{"location":"language/meta/#expression-format_2","title":"Expression Format","text":"<pre><code>&lt;let name=\"supportedOperations\" value='[\"add\", \"subtract\", \"multiply\", \"divide\"]' /&gt;\n&lt;tool-definition name=\"calculator\" description=\"Perform mathematical operations\" parser=\"eval\"&gt;\n  z.object({\n    operation: z.enum(supportedOperations),\n    a: z.number(),\n    b: z.number()\n  })\n&lt;/tool-definition&gt;\n</code></pre> <p>In expression mode, the <code>z</code> variable is automatically available for constructing Zod schemas, and you have direct access to all context variables.</p> <p>Required attributes for tools:</p> <ul> <li>name: Tool identifier (required)</li> <li>description: Tool description (optional but recommended)</li> <li>parser: Schema parser, either \"json\" or \"eval\" (optional, auto-detected based on content)</li> </ul>"},{"location":"language/meta/#template-expressions-in-attributes","title":"Template Expressions in Attributes","text":"<p>Both schemas and tools support template expressions in their attributes:</p> <pre><code>&lt;let name=\"toolName\"&gt;calculate&lt;/let&gt;\n&lt;let name=\"toolDesc\"&gt;Perform mathematical calculations&lt;/let&gt;\n&lt;let name=\"schemaParser\"&gt;json&lt;/let&gt;\n\n&lt;tool-definition name=\"{{toolName}}\" description=\"{{toolDesc}}\" parser=\"{{schemaParser}}\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"operation\": { \"type\": \"string\" }\n    }\n  }\n&lt;/tool-definition&gt;\n</code></pre> <p>Similarly for output schemas:</p> <pre><code>&lt;let name=\"schemaJson\"&gt;\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"result\": { \"type\": \"string\" }\n  }\n}\n&lt;/let&gt;\n&lt;output-schema parser=\"json\"&gt;\n{{ schemaJson }}\n&lt;/output-schema&gt;\n</code></pre> <p>You can define multiple tools in a single document.</p>"},{"location":"language/meta/#runtime-parameters","title":"Runtime Parameters","text":"<p>Runtime parameters configure the language model's behavior during execution. These parameters are automatically used in VSCode's test command functionality, which is based on the Vercel AI SDK.</p> <pre><code>&lt;runtime temperature=\"0.7\"\n         max-output-tokens=\"1000\"\n         model=\"gpt-5\"\n         top-p=\"0.9\" /&gt;\n</code></pre> <p>All attributes are passed as runtime parameters with automatic type conversion:</p>"},{"location":"language/meta/#key-conversion","title":"Key Conversion","text":"<ul> <li>Keys are converted from kebab-case to camelCase</li> <li>Examples: <code>max-tokens</code> \u2192 <code>maxTokens</code>, <code>top-p</code> \u2192 <code>topP</code>, <code>frequency-penalty</code> \u2192 <code>frequencyPenalty</code></li> </ul>"},{"location":"language/meta/#value-conversion","title":"Value Conversion","text":"<ul> <li>Boolean strings: <code>\"true\"</code> and <code>\"false\"</code> \u2192 <code>true</code> and <code>false</code></li> <li>Number strings: <code>\"1000\"</code>, <code>\"0.7\"</code> \u2192 <code>1000</code>, <code>0.7</code></li> <li>JSON strings: <code>'[\"END\", \"STOP\"]'</code>, <code>'{\"key\": \"value\"}'</code> \u2192 parsed JSON objects/arrays</li> </ul>"},{"location":"language/meta/#common-parameters","title":"Common Parameters","text":"<ul> <li>provider: Language model provider (e.g., \"openai\", \"anthropic\", \"microsoft\")</li> <li>model: Model identifier (e.g., \"gpt-5\", \"claude-4-sonnet\")</li> <li>temperature: Controls randomness (0-2, typically 0.3-0.7 for balanced output)</li> <li>maxOutputTokens: Maximum response length in tokens</li> <li>topP: Nucleus sampling threshold (0-1, typically 0.9-0.95)</li> <li>frequencyPenalty: Reduces token repetition based on frequency (-2 to 2)</li> <li>presencePenalty: Reduces repetition based on presence (-2 to 2)</li> <li>seed: For deterministic outputs (integer value)</li> </ul> <p>What parameters are available does not really matter, unless you are passing them to an LLM SDK. POML's built-in VS Code runner is based on the Vercel AI SDK. Therefore, the full parameter list depends on whether you're using standard text generation or structured data generation:</p> <ul> <li>Text generation parameters - Standard text generation</li> <li>Structured data parameters - When using response schemas</li> </ul> <p>The Vercel AI SDK automatically handles parameter validation and conversion for different model providers.</p> <p>If you are using the POML Python SDK, the runtime parameters are converted to snake case and returned as a dictionary. For example, <code>maxOutputTokens</code> becomes <code>max_output_tokens</code>, and <code>topP</code> becomes <code>top_p</code>.</p>"},{"location":"language/template/","title":"Template Engine","text":"<p>The template engine of POML allows you to incorporate dynamic content and control structures. Here are some key features.</p>"},{"location":"language/template/#expressions","title":"Expressions","text":"<p>You can use expressions enclosed in double curly brackets (<code>{{</code> <code>}}</code>) to evaluate variables or expressions dynamically:</p> <pre><code>&lt;poml&gt;\n  &lt;p&gt;Hello, {{name}}!&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>In this example, if <code>name</code> is set to \"Alice\" (e.g., using a <code>&lt;let&gt;</code> tag, described below), the output will be \"Hello, Alice!\".</p>"},{"location":"language/template/#usage-in-attributes","title":"Usage in Attributes","text":"<p>Expressions can also be used within attribute values:</p> <pre><code>&lt;poml&gt;\n  &lt;task caption=\"Task #{{index}}\"&gt;This is task No. {{index}}.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This renders to the following when <code>index</code> is set to 1.</p> <pre><code># Task #1\n\nThis is task No. 1.\n</code></pre>"},{"location":"language/template/#expression-usages","title":"Expression Usages","text":"<p>POML supports various JavaScript expressions within the double curly brackets. This includes but is not limited to:</p> <ul> <li>Variables: <code>{{variableName}}</code></li> <li>Arithmetic: <code>{{a + b}}</code>, <code>{{x * y}}</code>, <code>{{count / total}}</code></li> <li>String Concatenation: <code>{{firstName + \" \" + lastName}}</code></li> <li>Array Access: <code>{{myArray[0]}}</code></li> <li>Object Property Access: <code>{{myObject.propertyName}}</code></li> <li>Function Calls: <code>{{myFunction(arg1, arg2)}}</code> (if <code>myFunction</code> is defined in the context)</li> <li>Ternary Operators: <code>{{condition ? valueIfTrue : valueIfFalse}}</code></li> <li>Accessing loop variables: <code>{{loop.index}}</code> (explained in the \"For Attribute\" section)</li> </ul>"},{"location":"language/template/#let-expressions","title":"Let Expressions","text":"<p>The <code>&lt;let&gt;</code> tag allows you to define variables, import data from external files, and set values within your POML template.</p>"},{"location":"language/template/#syntax-1-setting-a-variable-from-a-value","title":"Syntax 1: Setting a variable from a value","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"greeting\"&gt;Hello, world!&lt;/let&gt;\n  &lt;p&gt;{{greeting}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This will output \"Hello, world!\". When using the content approach (as shown above), the text is treated as a literal string.</p> <p>Alternatively, you can use the <code>value</code> attribute which must contain an evaluatable JavaScript expression:</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"greeting\" value=\"'Hello, world!'\" /&gt;\n  &lt;p&gt;{{greeting}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>Note that when using the <code>value</code> attribute, string literals must be properly quoted (e.g., <code>\"'Hello, world!'\"</code> or <code>'\"Hello, world!\"'</code>) since the value is evaluated as JavaScript. The <code>value</code> attribute can contain strings, numbers, arrays, objects, or any valid JavaScript expression.</p>"},{"location":"language/template/#syntax-2-importing-data-from-a-file","title":"Syntax 2: Importing data from a file","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"users\" src=\"users.json\" /&gt;\n  &lt;p&gt;First user: {{users[0].name}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This imports the contents of <code>users.json</code> and assigns it to the <code>users</code> variable. The <code>src</code> attribute specifies the path to the file (relative to the POML file). The optional <code>type</code> attribute can specify the file type (e.g., \"json\", \"text\", \"csv\"). If not provided, POML attempts to infer it from the file extension.</p>"},{"location":"language/template/#syntax-3-importing-data-from-a-file-without-a-name","title":"Syntax 3: Importing data from a file without a name","text":"<pre><code>&lt;poml&gt;\n  &lt;let src=\"config.json\" /&gt;\n  &lt;p&gt;API Key: {{apiKey}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>If <code>config.json</code> contains <code>{ \"apiKey\": \"your_api_key\" }</code>, this will output \"API Key: your_api_key\". When you use <code>src</code> without <code>name</code>, and the file content is a JSON object, the properties of that object are directly added to the context.</p>"},{"location":"language/template/#syntax-4-setting-a-variable-using-inline-json","title":"Syntax 4: Setting a variable using inline JSON","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"person\"&gt;\n    {\n      \"name\": \"Alice\",\n      \"age\": 30\n    }\n  &lt;/let&gt;\n  &lt;p&gt;Name: {{person.name}}, Age: {{person.age}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This defines a <code>person</code> variable with the given JSON object. You can also specify the <code>type</code> attribute:</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"count\" type=\"integer\"&gt;5&lt;/let&gt;\n  &lt;p&gt;Count: {{count}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/template/#syntax-5-setting-a-variable-from-an-expression","title":"Syntax 5: Setting a variable from an expression","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"base\" value=\"10\" /&gt;\n  &lt;let name=\"increment\" value=\"5\" /&gt;\n  &lt;let name=\"total\" value=\"{{ base + increment }}\" /&gt;\n  &lt;p&gt;Total: {{ total }}&lt;/p&gt;  &lt;!-- Output: Total: 15 --&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/template/#type-autocasting-in-attributes","title":"Type-Autocasting in Attributes","text":"<p>The attributes of components will be automatically cast based on their defined types in the component documentation. This means you don't have to worry about manually converting types in many cases.</p> <ul> <li>Boolean: If an attribute is defined as a boolean, values like <code>\"true\"</code>, <code>1</code>, <code>\"1\"</code>, or <code>{{true}}</code> will be cast to the boolean value <code>true</code>. Similarly, <code>\"false\"</code>, <code>0</code>, <code>\"0\"</code>, or <code>{{false}}</code> will be cast to <code>false</code>.</li> <li>Number: If an attribute is defined as a number, values like <code>\"123\"</code>, <code>45.6</code>, <code>{{anyNumber}}</code> or <code>{{myNumber+1.3}}</code> will be cast to their corresponding numeric values.</li> <li> <p>Object: If an attribute is defined as an object, POML will attempt to parse the attribute value as a JSON string. For example, <code>data=\"{{{name: 'John', age: 30}}}\"</code> or <code>data='{\"name\":\"John\",\"age\":30}'</code> will be parsed into the corresponding JavaScript object.</p> </li> <li> <p>String: If an attribute is a string, no casting is performed.</p> </li> </ul> <p>In the following example, the first auto-casting happened at let, where <code>true</code> is converted to boolean at <code>let</code> expression.</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"boolVar\" type=\"boolean\" value=\"true\"/&gt;\n  &lt;let name=\"numVar\" type=\"number\" value=\"42\"/&gt;\n  &lt;let name=\"objVar\" type=\"object\" value=\"{{ { key: 'value' } }}\"/&gt;\n\n  &lt;MyComponent boolProp=\"{{boolVar}}\" numProp=\"{{numVar}}\" objProp=\"{{objVar}}\" stringProp=\"hello\"/&gt;\n&lt;/poml&gt;\n</code></pre> <p>If MyComponent is defined with <code>boolProp</code> as boolean, <code>numProp</code> as number, <code>objProp</code> as object, and <code>stringProp</code> as string, the values will be interpreted and auto-casted again when <code>MyComponent</code> is used.</p>"},{"location":"language/template/#for-attribute","title":"For Attribute","text":"<p>To loop over a list, use the <code>for</code> attribute. The syntax is <code>for=\"itemName in listName\"</code>.</p> <pre><code>&lt;poml&gt;\n  &lt;list&gt;\n    &lt;item for=\"item in ['apple', 'banana', 'cherry']\"&gt;{{item}}&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/poml&gt;\n</code></pre> <p>This will render a list with \"apple\", \"banana\", and \"cherry\".</p>"},{"location":"language/template/#loop-variables","title":"Loop Variables","text":"<p>Inside the loop, you have access to special <code>loop</code> variables:</p> <ul> <li><code>loop.index</code>: The current iteration index (starting from 0).</li> <li><code>loop.length</code>: The total number of items in the list.</li> <li><code>loop.first</code>: <code>true</code> if it's the first iteration, <code>false</code> otherwise.</li> <li><code>loop.last</code>: <code>true</code> if it's the last iteration, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>&lt;poml&gt;\n&lt;let name=\"all_demos\" value='[\n    { \"input\": \"What is your name?\", \"output\": \"My name is POML.\" },\n    { \"input\": \"What can you do?\", \"output\": \"I can generate prompts.\" }\n]'/&gt;\n  &lt;examples&gt;\n    &lt;example for=\"example in all_demos\" chat=\"false\" caption=\"Example {{ loop.index + 1 }}\" captionStyle=\"header\"&gt;\n      &lt;input&gt;{{ example.input }}&lt;/input&gt;\n      &lt;output&gt;{{ example.output }}&lt;/output&gt;\n    &lt;/example&gt;\n  &lt;/examples&gt;\n&lt;/poml&gt;\n</code></pre> <p>This will generate two examples, with captions \"Example 1\" and \"Example 2\", displaying the input and output from each demo in the <code>all_demos</code> array. Note that we use <code>loop.index + 1</code> because <code>loop.index</code> starts from 0.</p>"},{"location":"language/template/#if-condition","title":"If Condition","text":"<p>You can conditionally render elements using the <code>if</code> attribute:</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"isVisible\" value=\"true\"/&gt;\n  &lt;let name=\"isHidden\" value=\"{{ !isVisible }}\"/&gt;\n  &lt;p if=\"isVisible\"&gt;This paragraph is visible.&lt;/p&gt;\n  &lt;p if=\"isHidden\"&gt;This paragraph is hidden.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>If <code>isVisible</code> is <code>true</code>, the first paragraph will be rendered. The second paragraph will not be rendered because isHidden is false. The value of <code>if</code> can be a simple variable name (which is treated as a boolean) or a POML expression.</p>"},{"location":"language/template/#include-files","title":"Include Files","text":"<p>You can split prompts into multiple files and include them using the <code>&lt;include&gt;</code> tag.</p> <pre><code>&lt;poml&gt;\n  &lt;include src=\"snippet.poml\" /&gt;\n&lt;/poml&gt;\n</code></pre> <p>The file specified in <code>src</code> is read and its contents are injected as if they were written in place. Variables from the current context are available inside the included file. The <code>for</code> and <code>if</code> attributes work as expected:</p> <pre><code>&lt;poml&gt;\n  &lt;include src=\"row.poml\" for=\"i in [1,2,3]\" /&gt;\n  &lt;include src=\"footer.poml\" if=\"showFooter\" /&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/token/","title":"Token Control","text":""},{"location":"language/token/#controlling-characters-and-tokens","title":"Controlling Characters and Tokens","text":"<p>Warning</p> <p>This feature is experimental and may change in future releases. Use with caution.</p> <p>POML controls content length through character limits, token limits, and priority-based truncation. These features are particularly useful when working with AI models that have input constraints or when you need to ensure content fits within specific bounds.</p> <p>Note</p> <p>Token control is only supported on components rendered with <code>syntax=\"text\"</code> or <code>syntax=\"markdown\"</code>.</p>"},{"location":"language/token/#character-and-token-limits","title":"Character and Token Limits","text":"<p>You can set soft limits on content using <code>charLimit</code> and <code>tokenLimit</code> attributes. When content exceeds these limits, it will be automatically truncated with a marker.</p> <pre><code>&lt;poml&gt;\n  &lt;!-- Limit content to 100 characters --&gt;\n  &lt;p charLimit=\"100\"&gt;This is a very long paragraph that will be truncated if it exceeds the character limit. The truncation will add a marker to indicate that content was cut off.&lt;/p&gt;\n\n  &lt;!-- Limit content to 50 tokens --&gt;\n  &lt;p tokenLimit=\"10\"&gt;This paragraph will be truncated based on token count rather than character count, which is more accurate for AI model processing.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>Renders to:</p> <pre><code>This is a very long paragraph that will be truncated if it exceeds the character limit. The truncati (...truncated)\n\nThis paragraph will be truncated based on token count rather (...truncated)\n</code></pre> <p>You can customize truncation behavior using <code>writerOptions</code> to control how content is shortened when it exceeds limits:</p> <ul> <li><code>truncateMarker</code>: The string to append when content is truncated (default: <code>(...truncated)</code>)</li> <li><code>truncateDirection</code>: Where to truncate the content:</li> <li><code>\"end\"</code> (default): Keep the beginning, truncate the end</li> <li><code>\"start\"</code>: Keep the end, truncate the beginning</li> <li><code>\"middle\"</code>: Keep both beginning and end, truncate the middle</li> <li><code>tokenEncodingModel</code>: The model to use for token counting (default: <code>\"gpt-4o\"</code> which uses <code>o200k_base</code> encoding)</li> </ul> <pre><code>&lt;p charLimit=\"20\" writerOptions='{ \"truncateMarker\": \" [...] \", \"truncateDirection\": \"middle\"}'&gt;This is a very long paragraph that will be truncated if it exceeds the character limit. The truncation will add a marker to indicate that content was cut off.&lt;/p&gt;\n</code></pre> <p>Renders to:</p> <pre><code>This is a  [...] s cut off.\n</code></pre> <p>Note</p> <p>The default tokenizer for counting tokens is based on <code>js-tiktoken</code> with <code>o200k_base</code> encoding (used in <code>gpt-4o</code> through <code>o3</code> models). You can customize it by specifying the model name in <code>tokenEncodingModel</code> within <code>writerOptions</code>.</p>"},{"location":"language/token/#priority-based-truncation","title":"Priority-Based Truncation","text":"<p>The <code>priority</code> attribute allows you to control which content is preserved when space is limited. Lower priority content (lower numbers) will be truncated first.</p> <pre><code>&lt;poml tokenLimit=\"40\"&gt;\n  &lt;p priority=\"1\"&gt;This content has low priority and may be removed first to save space.&lt;/p&gt;\n\n  &lt;p priority=\"3\"&gt;This content has high priority and will be preserved longer.&lt;/p&gt;\n\n  &lt;p priority=\"2\"&gt;This content has medium priority.&lt;/p&gt;\n\n  &lt;!-- Content without priority defaults to priority 0 (lowest) --&gt;\n  &lt;p&gt;This content will be truncated first since it has no explicit priority.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>Renders to:</p> <pre><code>This content has low priority and may be removed first to save space.\n\nThis content has high priority and will be preserved longer.\n\nThis content has medium priority.\n</code></pre> <p>If the token limit is reduced further to 8, highest priority content is preserved, and also truncated with a marker:</p> <pre><code>This content has high priority and will be (...truncated)\n</code></pre>"},{"location":"language/token/#combining-limits-and-priority","title":"Combining Limits and Priority","text":"<p>You can combine different types of limits with priority settings for sophisticated content management.</p> <p>Token Calculation Order</p> <p>Token limits are applied hierarchically from parent to child components. When a parent component has a token limit:</p> <ol> <li>Children are processed first with their limits and priorities taken into account.</li> <li>Sort children by priority. Low priority children are removed entirely if they exceed the limit</li> <li>Remaining content (including the cases of equal priority) is truncated if still over the limit</li> <li>charLimit/tokenLimit are applied after priority-based removal</li> </ol> <p>This means in the example below, the entire list component might be removed if higher priority content consumes the available tokens.</p> <pre><code>&lt;poml tokenLimit=\"40\"&gt;\n  &lt;h priority=\"5\"&gt;Critical Section Header&lt;/h&gt;\n\n  &lt;p priority=\"4\" charLimit=\"10\"&gt;\n    Important introduction that should be preserved but can be shortened individually.\n  &lt;/p&gt;\n\n  &lt;list priority=\"2\"&gt;\n    &lt;item priority=\"3\"&gt;High priority item&lt;/item&gt;\n    &lt;item priority=\"1\"&gt;Lower priority item&lt;/item&gt;\n    &lt;item&gt;Lowest priority item (no explicit priority)&lt;/item&gt;\n  &lt;/list&gt;\n\n  &lt;p priority=\"3\" tokenLimit=\"5\"&gt;Optional additional context that can be truncated aggressively.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>Renders to:</p> <pre><code># Critical Section Header\n\nImportant  (...truncated)\n\nOptional additional context that can (...truncated)\n</code></pre>"},{"location":"language/white-space/","title":"Controlling White Space","text":"<p>Warning</p> <p>This feature is experimental and may change in future releases. Use with caution.</p> <p>POML provides experimental whitespace control options that allow you to fine-tune how white spaces in texts get processed. This is particularly useful when working with different content types or when you need precise control over spacing.</p>"},{"location":"language/white-space/#white-space-options","title":"White Space Options","text":"<p>The <code>whiteSpace</code> attribute (or <code>white-space</code>) can be applied to most POML components and accepts three values:</p> <ul> <li><code>pre</code> (default for <code>syntax=\"text\"</code>): Preserves all whitespace exactly as written, including spaces, tabs, and line breaks.</li> <li><code>filter</code> (default for other syntaxes): Removes leading and trailing whitespace, and normalizes internal whitespace in the gaps between elements.</li> <li><code>trim</code>: Trims whitespace from the beginning and end of the content.</li> </ul> <p>Note</p> <p><code>whiteSpace</code> only applies to the current component, not its children. If you are applying to multiple components, consider using stylesheets.</p>"},{"location":"language/white-space/#example-usage","title":"Example Usage","text":"<pre><code>&lt;poml&gt;\n  &lt;!-- Preserve exact formatting with 'pre' --&gt;\n  &lt;p whiteSpace=\"pre\" syntax=\"markdown\"&gt;This text    has multiple\n  spaces and\n      indentation preserved.\n\n\n      You can also include endless new lines.&lt;/p&gt;\n\n  &lt;!-- Normalize whitespace with 'filter' --&gt;\n  &lt;p whiteSpace=\"filter\"&gt;This text    will have\n  normalized    spacing.\n\n  New lines will also be reduced to a space.\n  &lt;/p&gt;\n\n  &lt;!-- Trim whitespace with 'trim' --&gt;\n  &lt;p whiteSpace=\"trim\"&gt;   This text will have leading    and trailing spaces removed.   &lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>The POML above renders to:</p> <pre><code>This text    has multiple\n  spaces and\n      indentation preserved.\n\n\n      You can also include endless new lines.\n\nThis text will have normalized spacing. New lines will also be reduced to a space.\n\nThis text will have leading    and trailing spaces removed.\n</code></pre>"},{"location":"language/white-space/#white-space-related-to-syntax","title":"White Space Related to Syntax","text":"<p>The <code>whiteSpace</code> attribute only controls how whitespace is handled when rendering to the IR. When converting the IR to specific formats like Markdown, JSON or XML, the whitespace could still be affected by the syntax rules of that format. For example:</p> <pre><code>&lt;poml syntax=\"markdown\" whiteSpace=\"pre\"&gt;Marker 0\nMarker 1&lt;p&gt;   The first paragraph.   &lt;/p&gt;\nMarker 2&lt;p&gt;   The second paragraph.   &lt;/p&gt;\nMarker 3&lt;/poml&gt;\n</code></pre> <p>Renders to:</p> <pre><code>Marker 0\nMarker 1\n\nThe first paragraph.\n\n\nMarker 2\n\nThe second paragraph.\n\n\nMarker 3\n</code></pre> <p>To keep the whitespace exactly as you want it, consider using <code>syntax=\"text\"</code> with <code>whiteSpace=\"pre\"</code> (but note that you cannot use <code>&lt;p&gt;</code> tags within <code>syntax=\"text\"</code>):</p> <pre><code>&lt;poml syntax=\"text\" whiteSpace=\"pre\"&gt;\n</code></pre>"},{"location":"python/","title":"POML Python SDK","text":"<p>This documentation provides an overview of the POML Python SDK, which allows you to work with POML files and components in your Python projects.</p>"},{"location":"python/#installation","title":"Installation","text":""},{"location":"python/#stable-release","title":"Stable Release","text":"<pre><code>pip install --upgrade poml\n</code></pre>"},{"location":"python/#nightly-build","title":"Nightly Build","text":"<pre><code>pip install --upgrade --pre --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ poml\n</code></pre>"},{"location":"python/#references","title":"References","text":"<ul> <li>POML Core Reference: Detailed reference for the core POML components and utilities.</li> <li>POML Integration: Reference on how to integrate POML with your Python applications.</li> </ul>"},{"location":"python/trace/","title":"Tracing POML Calls","text":""},{"location":"python/trace/#capturing-the-final-crime-scene","title":"Capturing the Final Crime Scene","text":"<p>POML tracing captures the exact state of your prompts at the critical moment -- right before they're sent to LLM APIs. This \"crime scene\" snapshot includes the full POML source, all context variables, and the resulting prompt structure, providing complete visibility into what the LLM actually receives.</p> <p>This capability is invaluable for:</p> <ul> <li>Debugging: When an LLM returns unexpected results in production, trace files provide the complete context needed to reproduce and fix the issue without needing to recreate the exact runtime conditions.</li> <li>Quick Iterations: Modern LLM applications usually involve dozens of LLM calls. Review and refine the traced prompts and contexts without rerunning the whole script. Examine how different context values affect the final prompt structure. Compare trace files across versions to understand the impact of changes.</li> <li>Unit Testing: Use trace files as fixtures for unit tests. Capture successful interactions as golden test cases. Verify that prompt changes maintain backward compatibility.</li> </ul>"},{"location":"python/trace/#enabling-trace","title":"Enabling Trace","text":"<pre><code>import poml\n\n# Start tracing all POML calls\npoml.set_trace(trace_dir=\"pomlruns\")\n</code></pre>"},{"location":"python/trace/#basic-usage","title":"Basic Usage","text":"<pre><code>import poml\nfrom openai import OpenAI\n\npoml.set_trace(trace_dir=\"pomlruns\")\nclient = OpenAI()\n\n# Every POML call is now automatically traced\nparams = poml.poml(\"calculator.poml\",\n                   context={\"question\": \"What is 15% of 200?\"},\n                   format=\"openai_chat\")\nresponse = client.chat.completions.create(model=\"gpt-4\", **params)\n</code></pre>"},{"location":"python/trace/#trace-folder-structure","title":"Trace Folder Structure","text":"<p>Each trace run creates a timestamped directory (YYYYMMDDHHMMSSffffff format) containing all POML executions from that session:</p> <pre><code>pomlruns/\n\u2514\u2500\u2500 20250823231609954409/         # Session timestamp\n    \u251c\u2500\u2500 0001.calculator.context.json\n    \u251c\u2500\u2500 0001.calculator.env\n    \u251c\u2500\u2500 0001.calculator.poml\n    \u251c\u2500\u2500 0001.calculator.result.json\n    \u251c\u2500\u2500 0001.calculator.result.txt\n    \u251c\u2500\u2500 0001.calculator.source.poml -&gt; symbolic link to original POML file\n    \u251c\u2500\u2500 0002.verifier.context.json\n    \u251c\u2500\u2500 0002.verifier.env\n    \u251c\u2500\u2500 0002.verifier.poml\n    \u251c\u2500\u2500 0002.verifier.result.json\n    \u251c\u2500\u2500 0002.verifier.result.txt\n    \u2514\u2500\u2500 0002.verifier.source.poml -&gt; symbolic link to original POML file\n</code></pre>"},{"location":"python/trace/#file-naming-convention","title":"File Naming Convention","text":"<p>Files are labeled with a sequential execution number (0001, 0002, etc.) and the POML source name:</p> <ul> <li>Sequential Number: Four-digit counter (0001, 0002, ...) indicating execution order within the session</li> <li>Source Name: The base name of the POML file being executed</li> </ul>"},{"location":"python/trace/#file-types","title":"File Types","text":"<p>Each POML execution generates six files:</p>"},{"location":"python/trace/#contextjson","title":"<code>.context.json</code>","text":"<p>The context variables passed to the POML file. This captures all dynamic data injected into the source file at runtime.</p> <pre><code>{\n  \"question\": \"What is 15% of 200?\",\n  \"user_id\": \"alice\",\n  \"timestamp\": \"2025-08-23T23:16:09\"\n}\n</code></pre>"},{"location":"python/trace/#env","title":"<code>.env</code>","text":"<p>Environment metadata including the source file path and any environment-specific configuration. For example:</p> <pre><code>SOURCE_PATH=/home/user/project/prompts/calculator.poml\nPOML_VERSION=1.0.0\n</code></pre>"},{"location":"python/trace/#poml","title":"<code>.poml</code>","text":"<p>The original POML source content before any processing. This is the raw source as it exists in your source files.</p>"},{"location":"python/trace/#resultjson","title":"<code>.result.json</code>","text":"<p>The structured output after POML processing, showing the conversation messages in JSON format. This is what gets sent to the LLM API.</p> <pre><code>{\n  \"messages\": [\n    { \"speaker\": \"system\", \"content\": \"You are a helpful calculator.\" },\n    { \"speaker\": \"human\", \"content\": \"What is 15% of 200?\" }\n  ]\n}\n</code></pre>"},{"location":"python/trace/#resulttxt","title":"<code>.result.txt</code>","text":"<p>Human-readable representation of the processed prompt, showing the conversation flow with clear role separators.</p> <pre><code>===== system =====\nYou are a helpful calculator.\n\n===== human =====\nWhat is 15% of 200?\n</code></pre>"},{"location":"python/trace/#sourcepoml","title":"<code>.source.poml</code>","text":"<p>A symbolic link to the original POML source file, allowing quick navigation and editing to the POML definition.</p>"},{"location":"python/trace/#integration-with-observability-frameworks","title":"Integration with Observability Frameworks","text":"<p>POML tracing is designed to integrate seamlessly with popular observability and monitoring frameworks such as AgentOps, Weave, and MLflow. Trace data can be exported to these platforms for centralized monitoring, analysis, and alerting in production environments.</p>"},{"location":"python/integration/agentops/","title":"AgentOps Integration","text":"<p>AgentOps is an observability platform designed for AI agents and LLM applications. The POML-AgentOps integration automatically traces your POML calls and sends them to AgentOps for monitoring, debugging, and analytics.</p> <p></p>"},{"location":"python/integration/agentops/#installation-and-configuration","title":"Installation and Configuration","text":"<p>Install POML with AgentOps support:</p> <pre><code>pip install poml[agent]\n</code></pre> <p>Or install AgentOps separately:</p> <pre><code>pip install agentops\n</code></pre> <p>Set up your AgentOps API key as an environment variable:</p> <pre><code>export AGENTOPS_API_KEY=\"your-api-key-here\"\n</code></pre> <p>You can obtain an API key from the AgentOps dashboard.</p>"},{"location":"python/integration/agentops/#basic-usage","title":"Basic Usage","text":"<p>Enable POML tracing with AgentOps:</p> <pre><code>import os\nimport poml\nimport agentops\nfrom openai import OpenAI\n\n# Initialize AgentOps. Trace is automatically started.\nagentops.init()\n\n# Enable POML tracing with AgentOps\npoml.set_trace(\"agentops\", trace_dir=\"pomlruns\")\n\n# Use POML as usual\nclient = OpenAI()\nmessages = poml.poml(\n    \"explain_code.poml\",\n    context={\"code_path\": \"sample.py\"},\n    format=\"openai_chat\"\n)\n\nresponse = client.chat.completions.create(\n    model=\"gpt-5\",\n    **messages\n)\n\n# Trace ends automatically at the end of the script.\n</code></pre>"},{"location":"python/integration/agentops/#what-gets-traced","title":"What Gets Traced","text":"<p>When AgentOps integration is enabled, POML automatically captures POML Operations. Each POML call is logged as an operation with:</p> <ul> <li>Operation Name: \"poml\"</li> <li>Prompt Content: The raw POML source</li> <li>Context Variables: All context variables passed to the POML call</li> <li>Stylesheet: Any stylesheet configuration</li> <li>Result: The processed prompt structure sent to the LLM</li> </ul>"},{"location":"python/integration/agentops/#example-trace-data","title":"Example Trace Data","text":"<pre><code>{\n  \"resource_attributes\": {\n    \"imported_libraries\": \"[\\\"agentops\\\",\\\"poml\\\"]\"\n  },\n  \"span_attributes\": {\n    \"agentops\": {\n      \"span\": {\n        \"kind\": \"task\"\n      }\n    },\n    \"task\": {\n      \"input\": \"{\\\"args\\\": [\\\"../assets/explain_code.poml\\\", {\\\"code_path\\\": \\\"sample.py\\\"}, null], \\\"kwargs\\\": {}}\",\n      \"output\": \"{\\\"messages\\\": [{\\\"speaker\\\": \\\"human\\\", \\\"content\\\": \\\"# Task\\\\n\\\\nYou are a senior Python developer. Please explain the code.\\\\n\\\\n```\\\\ndef greet(name):\\\\n    print(f\\\\\\\"Hello, {name}!\\\\\\\")\\\\n\\\\ndef add(a, b):\\\\n    return a + b\\\\n\\\\ndef factorial(n):\\\\n    if n == 0:\\\\n        return 1\\\\n    else:\\\\n        return n * factorial(n - 1)\\\\n\\\\ndef is_even(num):\\\\n    return num % 2 == 0\\\\n\\\\ndef main():\\\\n    greet(\\\\\\\"Alice\\\\\\\")\\\\n    x = 5\\\\n    y = 7\\\\n    print(f\\\\\\\"{x} + {y} = {add(x, y)}\\\\\\\")\\\\n    print(f\\\\\\\"Factorial of {x} is {factorial(x)}\\\\\\\")\\\\n    if is_even(x):\\\\n        print(f\\\\\\\"{x} is even\\\\\\\")\\\\n    else:\\\\n        print(f\\\\\\\"{x} is odd\\\\\\\")\\\\n\\\\nif __name__ == \\\\\\\"__main__\\\\\\\":\\\\n    main()\\\\n```\\\"}], \\\"runtime\\\": {\\\"temperature\\\": 0.7, \\\"maxTokens\\\": 256}}\"\n    },\n    \"operation\": {\n      \"name\": \"poml\"\n    }\n  }\n}\n</code></pre>"},{"location":"python/integration/agentops/#see-also","title":"See Also","text":"<ul> <li>POML Tracing Guide</li> <li>AgentOps Documentation</li> <li>AgentOps Dashboard</li> </ul>"},{"location":"python/integration/langchain/","title":"LangChain Integration","text":"<p>POML provides seamless integration with LangChain through the <code>LangchainPomlTemplate</code> class, offering a powerful alternative to LangChain's built-in templating systems (Jinja2 and f-strings).</p>"},{"location":"python/integration/langchain/#installation","title":"Installation","text":"<pre><code>pip install langchain langchain-openai\n</code></pre>"},{"location":"python/integration/langchain/#basic-usage","title":"Basic Usage","text":"<p>POML templates can be used directly in LangChain chains:</p> <pre><code>from poml.integration.langchain import LangchainPomlTemplate\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.output_parsers import StrOutputParser\n\n# Load POML template from file\nprompt_template = LangchainPomlTemplate.from_file(\"explain_code.poml\")\n\n# Or create from string\nprompt_template = LangchainPomlTemplate.from_template(\n    \"&lt;poml&gt;&lt;task&gt;Explain this:&lt;/task&gt;\"\n    \"&lt;code inline=\\\"false\\\"&gt;&lt;document src=\\\"{{ code_file }}\\\" parser=\\\"txt\\\" /&gt;&lt;/code&gt;&lt;/poml&gt;\"\n)\n\n# Use in a LangChain chain\nllm = ChatOpenAI(model=\"gpt-4.1\")\nchain = prompt_template | llm | StrOutputParser()\n\nresult = chain.invoke({\"code_file\": \"test_sample.py\"})\n</code></pre>"},{"location":"python/integration/langchain/#speaker-mode-vs-non-speaker-mode","title":"Speaker Mode vs Non-Speaker Mode","text":"<p>POML templates support two modes for different use cases:</p> <pre><code># Speaker mode: Returns ChatPromptValue with structured messages\n# Use when you need conversation structure (system, user, assistant messages)\ntemplate = LangchainPomlTemplate.from_file(\"conversation.poml\", speaker_mode=True)\n\n# Non-speaker mode: Returns StringPromptValue with plain text\n# Use when you need a single text output\ntemplate = LangchainPomlTemplate.from_file(\"summary.poml\", speaker_mode=False)\n</code></pre>"},{"location":"python/integration/langchain/#poml-vs-f-string-jinja-and-other-templates","title":"POML vs f-string, Jinja, and Other Templates","text":"<p>You can harvest most features of POML by using <code>LangchainPomlTemplate</code>. However, some POML features are also available in other templating systems, and some features might not be compatible with LangChain (e.g., tool use). We thus summarize the key differences and advantages of using POML templates over alternative templating methods, to give you a clearer picture of when and why to choose POML.</p>"},{"location":"python/integration/langchain/#template-syntax-and-capabilities","title":"Template Syntax and Capabilities","text":"<p>Jinja2/f-string templates: Limited to string interpolation and basic conditionals/loops (with Jinja).</p> <pre><code>prompt_template = PromptTemplate.from_template(\n    \"Answer the question as if you are {person}, fully embodying their style, \"\n    \"wit, personality, and habits of speech. The question is: {question}\"\n)\n</code></pre> <p>POML templates: Supports string interpolation plus structured components and logic flows.</p> <pre><code>&lt;poml&gt;\n  &lt;system-msg&gt;You are {{ person }}, answer in their unique style and personality.&lt;/system-msg&gt;\n  &lt;human-msg&gt;{{ question }}&lt;/human-msg&gt;\n  &lt;div if=\"include_examples\"&gt;\n    &lt;examples&gt;\n      &lt;document src=\"{{ person }}_examples.txt\" /&gt;\n    &lt;/examples&gt;\n  &lt;/div&gt;\n&lt;/poml&gt;\n</code></pre> <p>Invoke it with:</p> <pre><code>prompt_template = LangchainPomlTemplate.from_file(\"persona_prompt.poml\")\nprompt_template.invoke({\n    \"person\": \"Mark Twain\",\n    \"question\": \"What is the meaning of life?\",\n    \"include_examples\": True\n})\n</code></pre>"},{"location":"python/integration/langchain/#rich-content-and-file-inclusion","title":"Rich Content and File Inclusion","text":"<p>Alternative approach with Jinja2/f-string: Must manually read and process PDF with external libraries and include text in the template.</p> <pre><code>import PyPDF2\nfrom langchain.prompts import PromptTemplate\n\ndef read_pdf(file_path):\n    with open(file_path, 'rb') as file:\n        reader = PyPDF2.PdfReader(file)\n        text = \"\"\n        for page in reader.pages:\n            text += page.extract_text()\n    return text\n\npdf_content = read_pdf(\"document.pdf\")\nprompt = PromptTemplate.from_template(\n    \"Analyze this document:\\n{pdf_text}\\n\\nQuestion: {question}\"\n)\nresult = chain.invoke({\"pdf_text\": pdf_content, \"question\": \"What are the key points?\"})\n</code></pre> <p>POML approach: Automatic PDF processing with no manual file processing needed.</p> <pre><code>&lt;poml&gt;\n  &lt;task&gt;Analyze this document and answer the question.&lt;/task&gt;\n  &lt;document src=\"{{ pdf_path }}\" /&gt;\n  &lt;human-msg&gt;{{ question }}&lt;/human-msg&gt;\n&lt;/poml&gt;\n</code></pre> <pre><code>result = chain.invoke({\"pdf_path\": \"document.pdf\", \"question\": \"What are the key points?\"})\n</code></pre>"},{"location":"python/integration/langchain/#structured-tags-to-organize-few-shot-examples","title":"Structured Tags to Organize Few-shot Examples","text":"<p>LangChain's FewShotPromptTemplate:</p> <pre><code>from langchain.prompts import FewShotPromptTemplate, PromptTemplate\n\nexamples = [\n    {\"input\": \"2+2\", \"output\": \"4\"},\n    {\"input\": \"3*3\", \"output\": \"9\"}\n]\n\nexample_prompt = PromptTemplate(\n    input_variables=[\"input\", \"output\"],\n    template=\"Input: {input}\\nOutput: {output}\"\n)\n\nfew_shot_prompt = FewShotPromptTemplate(\n    examples=examples,\n    example_prompt=example_prompt,\n    prefix=\"Solve these math problems:\",\n    suffix=\"Input: {input}\\nOutput:\",\n    input_variables=[\"input\"]\n)\n</code></pre> <p>POML approach with structured examples:</p> <pre><code>&lt;poml&gt;\n  &lt;task&gt;Solve these math problems:&lt;/task&gt;\n\n  &lt;example for=\"ex in examples\"&gt;\n    &lt;example-input&gt;{{ ex.input }}&lt;/example-input&gt;\n    &lt;example-output&gt;{{ ex.output }}&lt;/example-output&gt;\n  &lt;/example&gt;\n\n  &lt;human-msg&gt;{{ input }}&lt;/human-msg&gt;\n&lt;/poml&gt;\n</code></pre> <p>Immediately gives you:</p> <pre><code>[\n  { \"speaker\": \"system\", \"content\": \"# Task\\n\\nSolve these math problems:\" },\n  { \"speaker\": \"human\", \"content\": \"2+2\" },\n  { \"speaker\": \"ai\", \"content\": \"4\" },\n  { \"speaker\": \"human\", \"content\": \"3*3\" },\n  { \"speaker\": \"ai\", \"content\": \"9\" },\n  { \"speaker\": \"human\", \"content\": \"5-4\" }\n]\n</code></pre>"},{"location":"python/integration/langchain/#support-for-conversational-formats","title":"Support for Conversational Formats","text":"<p>Alternative approach: Multiple separate prompts or complex string concatenation.</p> <pre><code>system_prompt = \"You are a helpful assistant.\"\nuser_prompt = \"What is {{ language }}?\"\nassistant_response = \"{{ language }} is a programming language...\"\nfollowup = \"Can you give an example of {{ language }}?\"\n\n# Manually manage conversation flow\ntemplate_user = PromptTemplate.from_template(user_prompt)\ntemplate_assistant = PromptTemplate.from_template(assistant_response)\ntemplate_followup = PromptTemplate.from_template(followup)\n\ntemplate_messages = [\n    {\"role\": \"system\", \"content\": system_prompt},\n    {\"role\": \"user\", \"content\": template_user},\n    {\"role\": \"ai\", \"content\": template_assistant},\n    {\"role\": \"user\", \"content\": template_followup},\n]\n</code></pre> <p>POML approach: One file for an entire AI conversation.</p> <pre><code>&lt;poml&gt;\n  &lt;system-msg&gt;You are a helpful assistant.&lt;/system-msg&gt;\n  &lt;human-msg&gt;What is {{ language }}?&lt;/human-msg&gt;\n  &lt;ai-msg&gt;{{ language }} is a high-level, interpreted programming language...&lt;/ai-msg&gt;\n  &lt;human-msg&gt;Can you give an example of {{ language }}?&lt;/human-msg&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"python/integration/langchain/#future-integrations","title":"Future Integrations","text":"<p>Support for additional observability platforms is planned:</p> <ul> <li>LangSmith: Integration for LangChain's debugging and monitoring platform</li> <li>Langfuse: LLM observability and analytics</li> </ul>"},{"location":"python/integration/mcp/","title":"MCP (Model Context Protocol) Integration","text":"<p>The Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. MCP provides a standardized way for AI models to access context and invoke tools from various services.</p> <p>Warning</p> <p>POML does not have built-in support for MCP yet. Currently, we resort to tool calls with templates to emulate MCP-like behavior. Native support for MCP is planned for a future release.</p> <p>Note</p> <p>Some providers support calling MCP servers remotely, e.g., OpenAI Response API. Those behaviors are outside the scope of this document because developers do not need to handle MCP invocations at all.</p>"},{"location":"python/integration/mcp/#how-mcp-works","title":"How MCP Works","text":"<p>MCP (Model Context Protocol) operates on a client-server architecture where:</p> <ol> <li>Tool Discovery: MCP servers expose available tools/functions that can be called</li> <li>Tool Invocation: Clients (LLM applications) can invoke these tools with parameters</li> <li>Response Handling: Servers execute the tools and return results to the client</li> </ol> <p>The MCP workflow typically involves:</p> <ul> <li>Initialization: Establish connection with the MCP server</li> <li>List Tools: Query the server for available tools and their schemas</li> <li>Tool Execution: When the LLM needs a tool, send the request to the MCP server</li> <li>Result Integration: Incorporate tool results back into the conversation</li> </ul>"},{"location":"python/integration/mcp/#installation","title":"Installation","text":"<pre><code>pip install mcp\n</code></pre>"},{"location":"python/integration/mcp/#dynamic-tools-with-mcp","title":"Dynamic Tools with MCP","text":"<p>POML can work with MCP servers by dynamically loading tool definitions and handling tool interactions through context. This approach uses POML's templating capabilities to create a flexible integration.</p> <p>The dynamic tool approach is ideal for MCP integration because:</p> <ul> <li>MCP servers provide tools dynamically at runtime</li> <li>Tool schemas vary between different MCP servers</li> <li>The same POML template can work with any MCP server</li> <li>Tool interactions need to be tracked across conversation turns</li> </ul>"},{"location":"python/integration/mcp/#poml-template-for-dynamic-tools","title":"POML Template for Dynamic Tools","text":"<p>Here's the POML template (<code>dynamic_tools.poml</code>) that enables MCP integration:</p> <pre><code>&lt;poml&gt;\n  &lt;system-msg&gt;{{ system }}&lt;/system-msg&gt;\n  &lt;human-msg&gt;{{ input }}&lt;/human-msg&gt;\n\n  &lt;!-- Dynamic Tool Loading: Iterates through tools discovered from the MCP server --&gt;\n  &lt;div for=\"tool in tools\"&gt;\n    &lt;!-- Each tool's name, description, and JSON schema are inserted dynamically --&gt;\n    &lt;tool-definition name=\"{{ tool.name }}\" description=\"{{ tool.description }}\"&gt;\n      {{ tool.schema }}\n    &lt;/tool-definition&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Interaction History: Maintains conversation history with tool calls and responses --&gt;\n  &lt;div for=\"i in interactions\"&gt;\n    &lt;!-- All dynamic content is provided through the context parameter --&gt;\n    &lt;tool-request for=\"res in i\" id=\"{{ res.id }}\" name=\"{{ res.name }}\" parameters=\"{{ res.input }}\" /&gt;\n    &lt;tool-response for=\"res in i\" id=\"{{ res.id }}\" name=\"{{ res.name }}\"&gt;\n      &lt;!-- Embeds the tool output directly via POML's Object componenet. --&gt;\n      &lt;object data=\"{{ res.output }}\"/&gt;\n    &lt;/tool-response&gt;\n  &lt;/div&gt;\n\n  &lt;runtime model=\"gpt-4.1\"/&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"python/integration/mcp/#complete-example-with-mcp-server","title":"Complete Example with MCP Server","text":"<p>Here's a complete example using a public MCP demo server for dice rolling.</p>"},{"location":"python/integration/mcp/#1-tool-discovery-and-conversion","title":"1. Tool Discovery and Conversion","text":"<pre><code>async def discover_mcp_tools(mcp_session):\n    \"\"\"Discover available tools from MCP server and convert to POML format\"\"\"\n    mcp_tools = (await mcp_session.list_tools()).tools\n    print(f\"Available MCP tools: {mcp_tools}\")\n\n    # Convert MCP tools to POML context format.\n    # The format must be compatible with the POML template above.\n    poml_tools = []\n    for tool in mcp_tools:\n        poml_tools.append({\n            \"name\": tool.name,\n            \"description\": tool.description,\n            \"schema\": tool.inputSchema\n        })\n    return poml_tools\n</code></pre>"},{"location":"python/integration/mcp/#2-process-tool-calls","title":"2. Process Tool Calls","text":"<pre><code>async def process_tool_calls(mcp_session, tool_calls):\n    \"\"\"Execute MCP tool calls and format responses\"\"\"\n    responses = []\n    for tool_call in tool_calls:\n        function = tool_call.function\n        args = json.loads(function.arguments or \"{}\")\n\n        # Call MCP server tool\n        result = await mcp_session.call_tool(function.name, args)\n        print(f\"Tool {function.name} result: {result}\")\n\n        # Format for POML context.\n        # This format must be compatible with the POML template above.\n        responses.append({\n            \"id\": tool_call.id,\n            \"name\": function.name,\n            \"input\": args,\n            \"output\": result.model_dump()\n        })\n    return responses\n</code></pre>"},{"location":"python/integration/mcp/#3-main-conversation-loop","title":"3. Main Conversation Loop","text":"<pre><code>async def run_mcp_conversation(mcp_session, context):\n    \"\"\"Run the conversation loop with MCP tools\"\"\"\n    # Discover and add tools to context\n    context[\"tools\"] = await discover_mcp_tools(mcp_session)\n\n    client = OpenAI()\n\n    # Conversation loop\n    while True:\n        # Generate OpenAI parameters from POML\n        params = poml.poml(\"dynamic_tools.poml\", context=context, format=\"openai_chat\")\n        response = client.chat.completions.create(**params)\n        message = response.choices[0].message\n\n        if message.tool_calls:\n            # Process and add tool responses to context\n            responses = await process_tool_calls(mcp_session, message.tool_calls)\n            context[\"interactions\"].append(responses)\n        else:\n            # Final response - conversation complete\n            print(f\"Assistant: {message.content}\")\n            return message.content\n</code></pre>"},{"location":"python/integration/mcp/#4-complete-integration","title":"4. Complete Integration","text":"<pre><code>import json\nimport asyncio\nfrom openai import OpenAI\nimport poml\nfrom mcp import ClientSession\nfrom mcp.client.sse import sse_client\n\nasync def main():\n    # Initialize context for POML\n    context = {\n        \"system\": \"You are a helpful DM assistant. Use the dice-rolling tool when needed.\",\n        \"input\": \"Roll 2d4+1\",\n        \"tools\": [],\n        \"interactions\": []\n    }\n\n    # Connect to MCP server (using public demo server)\n    server_url = \"https://dmcp-server.deno.dev/sse\"\n\n    async with sse_client(server_url) as (read, write):\n        async with ClientSession(read, write) as mcp_session:\n            await mcp_session.initialize()\n            result = await run_mcp_conversation(mcp_session, context)\n            print(f\"Conversation completed: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"python/integration/mcp/#comparison-with-direct-mcp-usage","title":"Comparison with Direct MCP Usage","text":"<p>The key differences are:</p> <ul> <li>Message management: Direct approach requires remembering <code>\"role\": \"assistant\"</code> vs <code>\"role\": \"tool\"</code> formats; POML manages this automatically through request/response pairs</li> <li>Content rendering: Manual string conversion and formatting vs POML's <code>&lt;object&gt;</code> component handling all content types</li> <li>Tool formatting: Manual OpenAI-specific formatting vs declarative template that handles the conversion</li> </ul>"},{"location":"python/integration/mcp/#without-poml-direct-approach","title":"Without POML (Direct Approach)","text":"<pre><code># Manually manage message roles and format\nmessages.append({\"role\": \"assistant\", \"content\": msg.content or \"\", \"tool_calls\": msg.tool_calls})\nmessages.append({\"role\": \"tool\", \"tool_call_id\": tc.id, \"name\": fn.name, \"content\": text_result})\n\n# Manually format tool results from MCP\nif result.structuredContent is not None:\n    text_result = json.dumps(result.structuredContent)\nelse:\n    text_result = \"\\n\".join([c.text for c in result.content if isinstance(c, types.TextContent)])\n\n# Convert MCP tools to OpenAI format\noa_tools.append({\n    \"type\": \"function\",\n    \"function\": {\"name\": t.name, \"description\": t.description, \"parameters\": t.inputSchema}\n})\n</code></pre>"},{"location":"python/integration/mcp/#with-poml-structured-approach","title":"With POML (Structured Approach)","text":"<pre><code># Simply track tool request/response pairs\ncontext[\"interactions\"].append([\n    {\"id\": tc.id, \"name\": fn.name, \"input\": args, \"output\": result.model_dump()}\n])\n</code></pre>"},{"location":"python/integration/mcp/#future-native-support","title":"Future Native Support","text":"<p>Native MCP support in POML is planned and will provide a set of simplified syntaxes for MCP operations. Until then, this template-based approach provides a workaround solution for MCP integration with POML.</p>"},{"location":"python/integration/mlflow/","title":"MLflow Integration","text":"<p>MLflow is an open-source platform for managing the machine learning lifecycle, including experimentation, reproducibility, and deployment. The POML-MLflow integration automatically tracks your POML calls as MLflow traces and registers prompts in the MLflow prompt registry.</p> <p></p>"},{"location":"python/integration/mlflow/#installation-and-configuration","title":"Installation and Configuration","text":"<p>Install POML with MLflow support:</p> <pre><code>pip install poml[agent]\n</code></pre> <p>Or install MLflow separately:</p> <pre><code>pip install mlflow mlflow-genai\n</code></pre>"},{"location":"python/integration/mlflow/#configuration","title":"Configuration","text":"<p>Set up MLflow tracking server (optional, defaults to local file store):</p> <pre><code># Start a local MLflow tracking server\nmlflow server --host 0.0.0.0 --port 5000\n\n# Or use a remote tracking server\nexport MLFLOW_TRACKING_URI=\"http://your-mlflow-server:5000\"\n</code></pre>"},{"location":"python/integration/mlflow/#basic-usage","title":"Basic Usage","text":"<p>Enable POML tracing with MLflow:</p> <pre><code>import mlflow\nimport mlflow.openai\nimport poml\nfrom openai import OpenAI\n\n# Set up MLflow experiment\nmlflow.set_experiment(\"poml_integration\")\nmlflow.set_tracking_uri(\"http://localhost:5000\")\n\n# Enable POML tracing with MLflow\npoml.set_trace(\"mlflow\", trace_dir=\"pomlruns\")\n\n# Enable OpenAI autologging for tracing OpenAI API calls as well\nmlflow.openai.autolog()\n\n# Use POML as usual\nclient = OpenAI()\nmessages = poml.poml(\n    \"explain_code.poml\",\n    context={\"code_path\": \"sample.py\"},\n    format=\"openai_chat\"\n)\n\nresponse = client.chat.completions.create(\n    model=\"gpt-5\",\n    **messages\n)\n</code></pre>"},{"location":"python/integration/mlflow/#what-gets-traced","title":"What Gets Traced","text":"<p>When MLflow integration is enabled, POML automatically captures:</p>"},{"location":"python/integration/mlflow/#poml-traces","title":"POML Traces","text":"<p>Each POML call is logged as an MLflow trace with:</p> <ul> <li>Trace Name: \"poml\"</li> <li>Prompt Content: The raw POML source</li> <li>Context Variables: All context variables passed to the POML call</li> <li>Stylesheet: Any stylesheet configuration</li> <li>Result: The processed prompt structure sent to the LLM</li> </ul>"},{"location":"python/integration/mlflow/#prompt-registration","title":"Prompt Registration","text":"<p>POML prompts are automatically registered in MLflow's prompt registry with:</p> <ul> <li>Prompt Name: Automatically derived from the POML filename and sequential number (e.g., <code>0001.explain_code</code>), see trace documentation for details</li> <li>Template: The complete POML source content</li> <li>Version Control: MLflow tracks prompt versions automatically</li> </ul> <p></p>"},{"location":"python/integration/mlflow/#example-trace-data","title":"Example Trace Data","text":"<pre><code>{\n  \"inputs\": {\n    \"prompt\": \"&lt;poml&gt; &lt;task&gt;You are a senior Python developer. Please explain the code.&lt;/task&gt; &lt;code inline=\\\"false\\\"&gt; &lt;document src=\\\"{{ code_path }}\\\" parser=\\\"txt\\\" /&gt; &lt;/code&gt; &lt;runtime temperature=\\\"0.7\\\" max-tokens=\\\"256\\\"/&gt; &lt;/poml&gt;\",\n    \"context\": {\n      \"code_path\": \"sample.py\"\n    },\n    \"stylesheet\": null\n  },\n  \"outputs\": {\n    \"messages\": [\n      {\n        \"speaker\": \"human\",\n        \"content\": \"# Task\\n\\nYou are a senior Python developer. Please explain the code.\\n\\n```\\ndef greet(name):\\n    print(f\\\"Hello, {name}!\\\")\\n...\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"python/integration/mlflow/#see-also","title":"See Also","text":"<ul> <li>POML Tracing Guide</li> <li>MLflow Documentation</li> <li>MLflow Tracing Guide</li> <li>MLflow Prompt Engineering</li> </ul>"},{"location":"python/integration/openai/","title":"OpenAI Integration","text":"<p>POML provides seamless integration with the OpenAI Python SDK, allowing you to use POML files directly with OpenAI's chat completion API.</p>"},{"location":"python/integration/openai/#basic-usage","title":"Basic Usage","text":"<p>POML can generate OpenAI-compatible parameters from your prompt files. Use the <code>format=\"openai_chat\"</code> parameter to get the correct format:</p> <pre><code>import poml\nfrom openai import OpenAI\n\nclient = OpenAI()\n\n# Load POML and get OpenAI-compatible parameters\nparams = poml.poml(\"prompt.poml\", format=\"openai_chat\")\n\n# Use directly with OpenAI SDK\nresponse = client.chat.completions.create(**params)\n</code></pre>"},{"location":"python/integration/openai/#getting-chat-completion-messages","title":"Getting Chat Completion Messages","text":"<p>When you use <code>format=\"openai_chat\"</code>, POML returns a dictionary containing all the parameters needed for OpenAI's chat completion API:</p> <pre><code>params = poml.poml(\"prompt.poml\", format=\"openai_chat\")\n# params contains:\n# {\n#   \"messages\": [...],  # List of chat messages\n#   \"model\": \"gpt-4\",   # If specified in POML\n#   \"temperature\": 0.7, # If specified in POML\n#   ...\n# }\n</code></pre>"},{"location":"python/integration/openai/#runtime-parameters","title":"Runtime Parameters","text":"<p>POML supports runtime parameters through the <code>&lt;runtime&gt;</code> tag. These parameters are converted to snake_case for OpenAI compatibility:</p> <pre><code>&lt;poml&gt;\n  &lt;system-msg&gt;You are a helpful assistant.&lt;/system-msg&gt;\n  &lt;human-msg&gt;Hello!&lt;/human-msg&gt;\n\n  &lt;runtime\n    model=\"gpt-4.1\"\n    temperature=\"0.7\"\n    max-tokens=\"150\"\n    top-p=\"1.0\"\n    frequency-penalty=\"0.5\"\n    presencePenalty=\"0.0\"\n  /&gt;\n  &lt;!-- can be camelCase --&gt;\n&lt;/poml&gt;\n</code></pre> <p>The runtime parameters are automatically converted:</p> <ul> <li><code>max_tokens</code> -&gt; <code>max_tokens</code></li> <li><code>temperature</code> -&gt; <code>temperature</code></li> <li><code>top_p</code> -&gt; <code>top_p</code></li> <li><code>frequency_penalty</code> -&gt; <code>frequency_penalty</code></li> <li><code>presence_penalty</code> -&gt; <code>presence_penalty</code></li> </ul>"},{"location":"python/integration/openai/#response-format-structured-output","title":"Response Format (Structured Output)","text":"<p>POML supports OpenAI's structured output feature through the <code>&lt;output-schema&gt;</code> tag:</p> <pre><code>&lt;poml&gt;\n  &lt;system-msg&gt;Extract the event information.&lt;/system-msg&gt;\n  &lt;human-msg&gt;Alice and Bob are going to a science fair on Friday.&lt;/human-msg&gt;\n  &lt;output-schema&gt;\n  z.object({\n    name: z.string(),\n    date: z.string(),\n    participants: z.array(z.string()),\n  });\n  &lt;/output-schema&gt;\n&lt;/poml&gt;\n</code></pre> <p>Example usage:</p> <pre><code>params = poml.poml(\"response_format.poml\", format=\"openai_chat\")\n# params will include \"response_format\" for structured output\n\nresponse = client.chat.completions.create(model=\"gpt-4.1\", **params)\nresult = json.loads(response.choices[0].message.content)\nprint(result)\n# Output: {'name': 'Science Fair', 'date': 'Friday', 'participants': ['Alice', 'Bob']}\n</code></pre>"},{"location":"python/integration/openai/#tool-calls","title":"Tool Calls","text":"<p>POML supports OpenAI's function calling through tool definitions:</p> <pre><code>&lt;poml&gt;\n  &lt;p&gt;What is my horoscope? I am an Aquarius.&lt;/p&gt;\n\n  &lt;tool-definition name=\"get_horoscope\" description=\"Get today's horoscope for an astrological sign.\"&gt;\n  {\n      \"type\": \"object\",\n      \"properties\": {\n          \"sign\": {\n              \"type\": \"string\",\n              \"description\": \"An astrological sign like Taurus or Aquarius\"\n          }\n      },\n      \"required\": [\"sign\"]\n  }\n  &lt;/tool-definition&gt;\n\n  &lt;!-- Handle tool interactions with context --&gt;\n  &lt;tool-request if=\"tool_request\" id=\"{{ tool_request.id }}\" name=\"{{ tool_request.name }}\" parameters=\"{{ tool_request.parameters }}\" /&gt;\n  &lt;tool-response if=\"tool_response\" id=\"{{ tool_response.id }}\" name=\"{{ tool_response.name }}\"&gt;\n    &lt;object data=\"{{ tool_response.result }}\"/&gt;\n  &lt;/tool-response&gt;\n&lt;/poml&gt;\n</code></pre> <p>Example implementation with tool calls:</p> <pre><code># Initial request\ncontext = {\n    \"tool_request\": None,\n    \"tool_response\": None,\n}\n\nparams = poml.poml(\"tool_call.poml\", context=context, format=\"openai_chat\")\nresponse = client.chat.completions.create(model=\"gpt-4.1\", **params)\n\n# Process tool call\ntool_call = response.choices[0].message.tool_calls[0]\ncontext[\"tool_request\"] = {\n    \"name\": tool_call.function.name,\n    \"parameters\": json.loads(tool_call.function.arguments),\n    \"id\": tool_call.id,\n}\n\n# Execute the function\nresult = {\"horoscope\": get_horoscope(**context[\"tool_request\"][\"parameters\"])}\n\n# Send tool response back\ncontext[\"tool_response\"] = {\n    \"name\": tool_call.function.name,\n    \"result\": result,\n    \"id\": tool_call.id,\n}\n\nparams = poml.poml(\"tool_call.poml\", context=context, format=\"openai_chat\")\nresponse = client.chat.completions.create(model=\"gpt-4.1\", **params)\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"python/integration/weave/","title":"Weave Integration","text":"<p>Weave is Weights &amp; Biases' lightweight AI observability framework for tracking and versioning LLM applications. The POML-Weave integration automatically traces your POML calls and publishes prompts as versioned Weave objects.</p> <p></p>"},{"location":"python/integration/weave/#installation-and-configuration","title":"Installation and Configuration","text":"<p>Install POML with Weave support:</p> <pre><code>pip install poml[agent]\n</code></pre> <p>Or install Weave separately:</p> <pre><code>pip install weave\n</code></pre> <p>Set up your Weights &amp; Biases API key:</p> <pre><code>export WANDB_API_KEY=\"your-api-key-here\"\n</code></pre> <p>You can obtain an API key from Weights &amp; Biases.</p>"},{"location":"python/integration/weave/#basic-usage","title":"Basic Usage","text":"<p>Enable POML tracing with Weave:</p> <pre><code>import poml\nimport weave\nfrom openai import OpenAI\n\n# Initialize Weave project\nweave.init(\"my_poml_project\")\n\n# Enable POML tracing with Weave\npoml.set_trace(\"weave\", trace_dir=\"pomlruns\")\n\n# Use POML as usual\nclient = OpenAI()\nmessages = poml.poml(\n    \"explain_code.poml\",\n    context={\"code_path\": \"sample.py\"},\n    format=\"openai_chat\"\n)\n\nresponse = client.chat.completions.create(\n    model=\"gpt-5\",\n    **messages\n)\n</code></pre>"},{"location":"python/integration/weave/#what-gets-traced","title":"What Gets Traced","text":"<p>When Weave integration is enabled, POML automatically captures:</p>"},{"location":"python/integration/weave/#poml-operations","title":"POML Operations","text":"<p>Each POML call is logged as a Weave operation with:</p> <ul> <li>Operation Name: \"poml\"</li> <li>Prompt Content: The raw POML source</li> <li>Context Variables: All context variables passed to the POML call</li> <li>Stylesheet: Any stylesheet configuration</li> <li>Result: The processed prompt structure sent to the LLM</li> </ul>"},{"location":"python/integration/weave/#prompt-publishing","title":"Prompt Publishing","text":"<p>POML prompts are automatically published as versioned Weave objects:</p> <ul> <li>Object Name: Automatically derived from the POML filename and sequential number (e.g., <code>0001.explain_code</code>), see trace documentation for details</li> <li>Object Content: The complete POML source template</li> <li>Context Object: Published separately as <code>{name}.context</code> if context is provided</li> <li>Stylesheet Object: Published separately as <code>{name}.stylesheet</code> if stylesheet is provided</li> <li>Version Control: Weave automatically versions all published objects</li> </ul> <p></p>"},{"location":"python/integration/weave/#example-trace-data","title":"Example Trace Data","text":"<pre><code>{\n  \"inputs\": {\n    \"prompt\": \"weave://.../001.explain_code:v0\",\n    \"context\": \"weave://.../0001.explain_code.context:v0\",\n    \"stylesheet\": null\n  },\n  \"outputs\": {\n    \"messages\": [\n      {\n        \"speaker\": \"human\",\n        \"content\": \"# Task\\n\\nYou are a senior Python developer. Please explain the code.\\n\\n```\\ndef greet(name):\\n    print(f\\\"Hello, {name}!\\\")\\n...\"\n      }\n    ],\n    \"runtime\": {\n      \"temperature\": 0.7,\n      \"maxTokens\": 256\n    }\n  }\n}\n</code></pre>"},{"location":"python/integration/weave/#see-also","title":"See Also","text":"<ul> <li>POML Tracing Guide</li> <li>Weave Documentation</li> <li>Weights &amp; Biases Platform</li> </ul>"},{"location":"python/reference/core/","title":"Python POML Core APIs","text":""},{"location":"python/reference/core/#poml","title":"<code>poml</code>","text":""},{"location":"python/reference/core/#poml.clear_trace","title":"<code>clear_trace()</code>","text":"<p>Clear the collected trace log.</p> Source code in <code>python/poml/api.py</code> <pre><code>def clear_trace() -&gt; None:\n    \"\"\"Clear the collected trace log.\"\"\"\n    _trace_log.clear()\n</code></pre>"},{"location":"python/reference/core/#poml.get_trace","title":"<code>get_trace()</code>","text":"<p>Return a copy of the trace log.</p> Source code in <code>python/poml/api.py</code> <pre><code>def get_trace() -&gt; List[Dict[str, Any]]:\n    \"\"\"Return a copy of the trace log.\"\"\"\n    return list(_trace_log)\n</code></pre>"},{"location":"python/reference/core/#poml.poml","title":"<code>poml(markup, context=None, stylesheet=None, chat=True, output_file=None, format='message_dict', encoding=None, extra_args=None)</code>","text":"<p>Process POML markup and return the result in the specified format.</p> <p>POML (Prompt Orchestration Markup Language) is a markup language for creating structured prompts and conversations. This function processes POML markup with optional context and styling, returning the result in various formats optimized for different LLM frameworks and use cases.</p> <p>Parameters:</p> Name Type Description Default <code>markup</code> <code>str | Path</code> <p>POML markup content as a string, or path to a POML file. If a string that looks like a file path but doesn't exist, a warning is issued and it's treated as markup content.</p> required <code>context</code> <code>dict | str | Path | None</code> <p>Optional context data to inject into the POML template. Can be a dictionary, JSON string, or path to a JSON file.</p> <code>None</code> <code>stylesheet</code> <code>dict | str | Path | None</code> <p>Optional stylesheet for customizing POML rendering. Can be a dictionary, JSON string, or path to a JSON file.</p> <code>None</code> <code>chat</code> <code>bool</code> <p>If True, process as a chat conversation (default). If False, process as a single prompt.</p> <code>True</code> <code>output_file</code> <code>str | Path | None</code> <p>Optional path to save the output. If not provided, output is returned directly without saving to disk.</p> <code>None</code> <code>format</code> <code>OutputFormat</code> <p>Output format for the result: - \"raw\": Raw string output from POML processor - \"message_dict\": Legacy format returning just messages array (default) - \"dict\": Full CLI result structure with messages, schema, tools, runtime - \"openai_chat\": OpenAI Chat Completion API format with tool support - \"langchain\": LangChain message format with structured data - \"pydantic\": PomlFrame object with typed Pydantic models</p> <code>'message_dict'</code> <code>encoding</code> <code>str | None</code> <p>Optional file encoding for both reading input POML file and writing output file.</p> <code>None</code> <code>extra_args</code> <code>Optional[List[str]]</code> <p>Additional command-line arguments to pass to the POML processor.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list | dict | str | PomlFrame</code> <p>The processed result in the specified format:</p> <code>list | dict | str | PomlFrame</code> <ul> <li>str when format=\"raw\"</li> </ul> <code>list | dict | str | PomlFrame</code> <ul> <li>list when format=\"message_dict\" (legacy messages array)</li> </ul> <code>list | dict | str | PomlFrame</code> <ul> <li>dict when format=\"dict\", \"openai_chat\", or \"langchain\"</li> </ul> <code>list | dict | str | PomlFrame</code> <ul> <li>PomlFrame when format=\"pydantic\"</li> </ul> <code>list | dict | str | PomlFrame</code> <p>For format=\"message_dict\": Returns just the messages array for backward</p> <code>list | dict | str | PomlFrame</code> <p>compatibility. Example: <code>[{\"speaker\": \"human\", \"content\": \"Hello\"}]</code></p> <code>list | dict | str | PomlFrame</code> <p>For format=\"dict\": Returns complete structure with all metadata.</p> <code>Example</code> <code>list | dict | str | PomlFrame</code> <p><code>{\"messages\": [...], \"schema\": {...}, \"tools\": [...], \"runtime\": {...}}</code></p> <code>list | dict | str | PomlFrame</code> <p>For format=\"openai_chat\": Returns OpenAI Chat Completion format with tool/schema</p> <code>list | dict | str | PomlFrame</code> <p>support. Includes \"messages\" in OpenAI format, \"tools\" if present, \"response_format\"</p> <code>list | dict | str | PomlFrame</code> <p>for JSON schema if present, and runtime parameters converted to <code>snake_case</code>.</p> <code>list | dict | str | PomlFrame</code> <p>For format=\"langchain\": Returns LangChain format preserving all metadata with</p> <code>list | dict | str | PomlFrame</code> <p>\"messages\" in LangChain format plus schema, tools, and runtime if present.</p> <code>list | dict | str | PomlFrame</code> <p>For format=\"pydantic\": Returns strongly-typed PomlFrame object containing</p> <code>list | dict | str | PomlFrame</code> <p>messages as PomlMessage objects, output_schema, tools, and runtime.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>When a specified file path doesn't exist.</p> <code>RuntimeError</code> <p>When the POML processor fails or backend tracing requirements aren't met.</p> <code>ValueError</code> <p>When an invalid output format is specified.</p> <p>Examples:</p> <p>Basic usage with markup string:</p> <pre><code>&gt;&gt;&gt; result = poml(\"&lt;p&gt;Hello {{name}}!&lt;/p&gt;\", context={\"name\": \"World\"})\n</code></pre> <p>Load from file with context:</p> <pre><code>&gt;&gt;&gt; result = poml(\"template.poml\", context=\"context.json\")\n</code></pre> <p>Get OpenAI chat format:</p> <pre><code>&gt;&gt;&gt; messages = poml(\"chat.poml\", format=\"openai_chat\")\n</code></pre> <p>Use with custom stylesheet:</p> <pre><code>&gt;&gt;&gt; result = poml(\n...     markup=\"template.poml\",\n...     context={\"user\": \"Alice\"},\n...     stylesheet={\"role\": {\"captionStyle\": \"bold\"}},\n...     format=\"pydantic\"\n... )\n</code></pre> <p>Save output to file:</p> <pre><code>&gt;&gt;&gt; poml(\"template.poml\", output_file=\"output.json\", format=\"raw\")\n</code></pre> Note <ul> <li>When tracing is enabled via set_trace(), call details are automatically logged</li> <li>The function supports various backend integrations (Weave, AgentOps, MLflow)</li> <li>Multi-modal content (images, etc.) is supported in chat format</li> </ul> Source code in <code>python/poml/api.py</code> <pre><code>def poml(\n    markup: str | Path,\n    context: dict | str | Path | None = None,\n    stylesheet: dict | str | Path | None = None,\n    chat: bool = True,\n    output_file: str | Path | None = None,\n    format: OutputFormat = \"message_dict\",\n    encoding: str | None = None,\n    extra_args: Optional[List[str]] = None,\n) -&gt; list | dict | str | PomlFrame:\n    \"\"\"Process POML markup and return the result in the specified format.\n\n    POML (Prompt Orchestration Markup Language) is a markup language for creating\n    structured prompts and conversations. This function processes POML markup\n    with optional context and styling, returning the result in various formats\n    optimized for different LLM frameworks and use cases.\n\n    Args:\n        markup: POML markup content as a string, or path to a POML file.\n            If a string that looks like a file path but doesn't exist,\n            a warning is issued and it's treated as markup content.\n        context: Optional context data to inject into the POML template.\n            Can be a dictionary, JSON string, or path to a JSON file.\n        stylesheet: Optional stylesheet for customizing POML rendering.\n            Can be a dictionary, JSON string, or path to a JSON file.\n        chat: If True, process as a chat conversation (default).\n            If False, process as a single prompt.\n        output_file: Optional path to save the output. If not provided,\n            output is returned directly without saving to disk.\n        format: Output format for the result:\n            - \"raw\": Raw string output from POML processor\n            - \"message_dict\": Legacy format returning just messages array (default)\n            - \"dict\": Full CLI result structure with messages, schema, tools, runtime\n            - \"openai_chat\": OpenAI Chat Completion API format with tool support\n            - \"langchain\": LangChain message format with structured data\n            - \"pydantic\": PomlFrame object with typed Pydantic models\n        encoding: Optional file encoding for both reading input POML file and\n            writing output file.\n        extra_args: Additional command-line arguments to pass to the POML processor.\n\n    Returns:\n        The processed result in the specified format:\n        - str when format=\"raw\"\n        - list when format=\"message_dict\" (legacy messages array)\n        - dict when format=\"dict\", \"openai_chat\", or \"langchain\"\n        - PomlFrame when format=\"pydantic\"\n\n        For format=\"message_dict\": Returns just the messages array for backward\n        compatibility. Example: `[{\"speaker\": \"human\", \"content\": \"Hello\"}]`\n\n        For format=\"dict\": Returns complete structure with all metadata.\n        Example: `{\"messages\": [...], \"schema\": {...}, \"tools\": [...], \"runtime\": {...}}`\n\n        For format=\"openai_chat\": Returns OpenAI Chat Completion format with tool/schema\n        support. Includes \"messages\" in OpenAI format, \"tools\" if present, \"response_format\"\n        for JSON schema if present, and runtime parameters converted to `snake_case`.\n\n        For format=\"langchain\": Returns LangChain format preserving all metadata with\n        \"messages\" in LangChain format plus schema, tools, and runtime if present.\n\n        For format=\"pydantic\": Returns strongly-typed PomlFrame object containing\n        messages as PomlMessage objects, output_schema, tools, and runtime.\n\n    Raises:\n        FileNotFoundError: When a specified file path doesn't exist.\n        RuntimeError: When the POML processor fails or backend tracing requirements aren't met.\n        ValueError: When an invalid output format is specified.\n\n    Examples:\n        Basic usage with markup string:\n        &gt;&gt;&gt; result = poml(\"&lt;p&gt;Hello {{name}}!&lt;/p&gt;\", context={\"name\": \"World\"})\n\n        Load from file with context:\n        &gt;&gt;&gt; result = poml(\"template.poml\", context=\"context.json\")\n\n        Get OpenAI chat format:\n        &gt;&gt;&gt; messages = poml(\"chat.poml\", format=\"openai_chat\")\n\n        Use with custom stylesheet:\n        &gt;&gt;&gt; result = poml(\n        ...     markup=\"template.poml\",\n        ...     context={\"user\": \"Alice\"},\n        ...     stylesheet={\"role\": {\"captionStyle\": \"bold\"}},\n        ...     format=\"pydantic\"\n        ... )\n\n        Save output to file:\n        &gt;&gt;&gt; poml(\"template.poml\", output_file=\"output.json\", format=\"raw\")\n\n    Note:\n        - When tracing is enabled via set_trace(), call details are automatically logged\n        - The function supports various backend integrations (Weave, AgentOps, MLflow)\n        - Multi-modal content (images, etc.) is supported in chat format\n    \"\"\"\n    temp_input_file = temp_context_file = temp_stylesheet_file = None\n    trace_record: Dict[str, Any] | None = None\n    try:\n        if _trace_enabled:\n            trace_record = {}\n            if isinstance(markup, Path) or os.path.exists(str(markup)):\n                path = Path(markup)\n                trace_record[\"markup_path\"] = str(path)\n                if path.exists():\n                    trace_record[\"markup\"] = path.read_text(encoding=encoding)\n            else:\n                trace_record[\"markup\"] = str(markup)\n\n            if isinstance(context, dict):\n                trace_record[\"context\"] = json.dumps(context)\n            elif context:\n                if os.path.exists(str(context)):\n                    cpath = Path(context)\n                    trace_record[\"context_path\"] = str(cpath)\n                    trace_record[\"context\"] = cpath.read_text(encoding=encoding)\n            if isinstance(stylesheet, dict):\n                trace_record[\"stylesheet\"] = json.dumps(stylesheet)\n            elif stylesheet:\n                if os.path.exists(str(stylesheet)):\n                    spath = Path(stylesheet)\n                    trace_record[\"stylesheet_path\"] = str(spath)\n                    trace_record[\"stylesheet\"] = spath.read_text(encoding=encoding)\n\n        if isinstance(markup, Path):\n            if not markup.exists():\n                raise FileNotFoundError(f\"File not found: {markup}\")\n        else:\n            if os.path.exists(markup):\n                markup = Path(markup)\n            else:\n                # Test if the markup looks like a path.\n                if re.match(r\"^[\\w\\-./]+$\", markup):\n                    warnings.warn(\n                        f\"The markup '{markup}' looks like a file path, but it does not exist. Assuming it is a POML string.\"\n                    )\n\n                temp_input_file = write_file(markup, encoding=encoding)\n                markup = Path(temp_input_file.name)\n        with tempfile.NamedTemporaryFile(\"r\", encoding=encoding) as temp_output_file:\n            if output_file is None:\n                output_file = temp_output_file.name\n                output_file_specified = False\n            else:\n                output_file_specified = True\n                if isinstance(output_file, Path):\n                    output_file = str(output_file)\n            args = [\"-f\", str(markup), \"-o\", output_file]\n            if isinstance(context, dict):\n                temp_context_file = write_file(json.dumps(context), encoding=encoding)\n                args.extend([\"--context-file\", temp_context_file.name])\n            elif context:\n                if os.path.exists(context):\n                    args.extend([\"--context-file\", str(context)])\n                else:\n                    raise FileNotFoundError(f\"File not found: {context}\")\n\n            if isinstance(stylesheet, dict):\n                temp_stylesheet_file = write_file(json.dumps(stylesheet), encoding=encoding)\n                args.extend([\"--stylesheet-file\", temp_stylesheet_file.name])\n            elif stylesheet:\n                if os.path.exists(stylesheet):\n                    args.extend([\"--stylesheet-file\", str(stylesheet)])\n                else:\n                    raise FileNotFoundError(f\"File not found: {stylesheet}\")\n\n            if chat:\n                args.extend([\"--chat\", \"true\"])\n            else:\n                args.extend([\"--chat\", \"false\"])\n\n            if _trace_enabled and _trace_dir is not None:\n                args.extend([\"--traceDir\", str(_trace_dir)])\n\n            if extra_args:\n                args.extend(extra_args)\n            process = run(*args)\n            if process.returncode != 0:\n                raise RuntimeError(\n                    f\"POML command failed with return code {process.returncode}. See the log for details.\"\n                )\n\n            if output_file_specified:\n                with open(output_file, \"r\", encoding=encoding) as output_file_handle:\n                    result = output_file_handle.read()\n            else:\n                result = temp_output_file.read()\n\n            if format == \"raw\":\n                # Do nothing\n                return_result = trace_result = result\n            else:\n                parsed_result = trace_result = json.loads(result)\n\n                # Handle the new CLI result format with messages, schema, tools, runtime\n                if isinstance(parsed_result, dict) and \"messages\" in parsed_result:\n                    cli_result = parsed_result\n                    messages_data = cli_result[\"messages\"]\n                else:\n                    # Legacy format - just messages\n                    cli_result: dict = {\"messages\": parsed_result}\n                    messages_data = parsed_result\n\n                if format == \"message_dict\":\n                    # Legacy behavior - return just the messages\n                    return_result = messages_data\n                elif format == \"dict\":\n                    # Return the full CLI result structure\n                    return_result = cli_result\n                else:\n                    # Convert to pydantic messages for other formats\n                    if chat:\n                        pydantic_messages = [PomlMessage(**item) for item in messages_data]\n                    else:\n                        # TODO: Make it a RichContent object\n                        pydantic_messages = [PomlMessage(speaker=\"human\", content=messages_data)]  # type: ignore\n\n                    # Create PomlFrame with full data\n                    poml_frame = PomlFrame(\n                        messages=pydantic_messages,\n                        output_schema=cli_result.get(\"schema\"),\n                        tools=cli_result.get(\"tools\"),\n                        runtime=cli_result.get(\"runtime\"),\n                    )\n\n                    if format == \"pydantic\":\n                        return_result = poml_frame\n                    elif format == \"openai_chat\":\n                        # Return OpenAI-compatible format\n                        openai_messages = _poml_response_to_openai_chat(pydantic_messages)\n                        openai_result: dict = {\"messages\": openai_messages}\n\n                        # Add tools if present\n                        if poml_frame.tools:\n                            openai_result[\"tools\"] = [\n                                {\n                                    \"type\": \"function\",\n                                    \"function\": {\n                                        \"name\": tool.get(\"name\", \"\"),\n                                        \"description\": tool.get(\"description\", \"\"),\n                                        \"parameters\": tool.get(\"parameters\", {}),\n                                    },  # FIXME: hot-fix for the wrong format at node side\n                                }\n                                for tool in poml_frame.tools\n                            ]\n                        if poml_frame.output_schema:\n                            openai_result[\"response_format\"] = {\n                                \"type\": \"json_schema\",\n                                \"json_schema\": {\n                                    \"name\": \"schema\",  # TODO: support schema name\n                                    \"schema\": poml_frame.output_schema,\n                                    \"strict\": True,  # Ensure strict validation\n                                },\n                            }\n                        if poml_frame.runtime:\n                            openai_result.update(\n                                {_camel_case_to_snake_case(k): v for k, v in poml_frame.runtime.items()}\n                            )\n\n                        return_result = openai_result\n                    elif format == \"langchain\":\n                        messages_data = _poml_response_to_langchain(pydantic_messages)\n                        return_result = {\n                            \"messages\": messages_data,\n                            **{k: v for k, v in cli_result.items() if k != \"messages\"},\n                        }\n                    else:\n                        raise ValueError(f\"Unknown output format: {format}\")\n\n            if _weave_enabled:\n                from .integration import weave\n\n                trace_prefix = _latest_trace_prefix()\n                current_version = _current_trace_version()\n                if trace_prefix is None or current_version is None:\n                    raise RuntimeError(\"Weave tracing requires local tracing to be enabled.\")\n                poml_content = _read_latest_traced_file(\".poml\", encoding=encoding)\n                context_content = _read_latest_traced_file(\".context.json\", encoding=encoding)\n                stylesheet_content = _read_latest_traced_file(\".stylesheet.json\", encoding=encoding)\n\n                weave.log_poml_call(\n                    trace_prefix.name,\n                    poml_content or str(markup),\n                    json.loads(context_content) if context_content else None,\n                    json.loads(stylesheet_content) if stylesheet_content else None,\n                    trace_result,\n                )\n\n            if _agentops_enabled:\n                from .integration import agentops\n\n                trace_prefix = _latest_trace_prefix()\n                current_version = _current_trace_version()\n                if trace_prefix is None or current_version is None:\n                    raise RuntimeError(\"AgentOps tracing requires local tracing to be enabled.\")\n                poml_content = _read_latest_traced_file(\".poml\", encoding=encoding)\n                context_content = _read_latest_traced_file(\".context.json\", encoding=encoding)\n                stylesheet_content = _read_latest_traced_file(\".stylesheet.json\", encoding=encoding)\n                agentops.log_poml_call(\n                    trace_prefix.name,\n                    str(markup),\n                    json.loads(context_content) if context_content else None,\n                    json.loads(stylesheet_content) if stylesheet_content else None,\n                    trace_result,\n                )\n\n            if _mlflow_enabled:\n                from .integration import mlflow\n\n                trace_prefix = _latest_trace_prefix()\n                current_version = _current_trace_version()\n                if trace_prefix is None or current_version is None:\n                    raise RuntimeError(\"MLflow tracing requires local tracing to be enabled.\")\n                poml_content = _read_latest_traced_file(\".poml\", encoding=encoding)\n                context_content = _read_latest_traced_file(\".context.json\", encoding=encoding)\n                stylesheet_content = _read_latest_traced_file(\".stylesheet.json\", encoding=encoding)\n                mlflow.log_poml_call(\n                    trace_prefix.name,\n                    poml_content or str(markup),\n                    json.loads(context_content) if context_content else None,\n                    json.loads(stylesheet_content) if stylesheet_content else None,\n                    trace_result,\n                )\n\n            if trace_record is not None:\n                trace_record[\"result\"] = trace_result\n            return return_result\n    finally:\n        if temp_input_file:\n            temp_input_file.close()\n        if temp_context_file:\n            temp_context_file.close()\n        if temp_stylesheet_file:\n            temp_stylesheet_file.close()\n        if trace_record is not None:\n            _trace_log.append(trace_record)\n</code></pre>"},{"location":"python/reference/core/#poml.set_trace","title":"<code>set_trace(enabled=True, /, *, trace_dir=None)</code>","text":"<p>Enable or disable tracing of <code>poml</code> calls with optional backend integrations.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool | List[Backend] | Backend</code> <p>Controls which tracing backends to enable. Can be: - True: Enable local tracing only (equivalent to [\"local\"]) - False: Disable all tracing (equivalent to []) - str: Enable a single backend (\"local\", \"weave\", \"agentops\", \"mlflow\") - List[str]: Enable multiple backends. \"local\" is auto-enabled if any backends are specified.</p> <code>True</code> <code>trace_dir</code> <code>Optional[str | Path]</code> <p>Optional directory for local trace files. If provided when local tracing is enabled, a subdirectory named by the current timestamp (YYYYMMDDHHMMSSffffff) is created inside trace_dir.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>Path to the trace directory if local tracing is enabled, None otherwise.</p> <code>Optional[Path]</code> <p>The directory may be shared with POML Node.js by setting the</p> <code>Optional[Path]</code> <p>POML_TRACE environment variable in the invoking script.</p> Available backends <ul> <li>\"local\": Save trace files to disk</li> <li>\"weave\": Log to Weights &amp; Biases Weave (requires local tracing)</li> <li>\"agentops\": Log to AgentOps (requires local tracing)</li> <li>\"mlflow\": Log to MLflow (requires local tracing)</li> </ul> Source code in <code>python/poml/api.py</code> <pre><code>def set_trace(\n    enabled: bool | List[Backend] | Backend = True, /, *, trace_dir: Optional[str | Path] = None\n) -&gt; Optional[Path]:\n    \"\"\"Enable or disable tracing of ``poml`` calls with optional backend integrations.\n\n    Args:\n        enabled: Controls which tracing backends to enable. Can be:\n            - True: Enable local tracing only (equivalent to [\"local\"])\n            - False: Disable all tracing (equivalent to [])\n            - str: Enable a single backend (\"local\", \"weave\", \"agentops\", \"mlflow\")\n            - List[str]: Enable multiple backends. \"local\" is auto-enabled if any backends are specified.\n        trace_dir: Optional directory for local trace files. If provided when local\n            tracing is enabled, a subdirectory named by the current timestamp\n            (YYYYMMDDHHMMSSffffff) is created inside trace_dir.\n\n    Returns:\n        Path to the trace directory if local tracing is enabled, None otherwise.\n        The directory may be shared with POML Node.js by setting the\n        POML_TRACE environment variable in the invoking script.\n\n    Available backends:\n        - \"local\": Save trace files to disk\n        - \"weave\": Log to Weights &amp; Biases Weave (requires local tracing)\n        - \"agentops\": Log to AgentOps (requires local tracing)\n        - \"mlflow\": Log to MLflow (requires local tracing)\n    \"\"\"\n\n    if enabled is True:\n        enabled = [\"local\"]\n    elif enabled is False:\n        enabled = []\n\n    if isinstance(enabled, str):\n        enabled = [enabled]\n\n    global _trace_enabled, _trace_dir, _weave_enabled, _agentops_enabled, _mlflow_enabled\n    if enabled or \"local\" in enabled:\n        # When enabled is non-empty, we always enable local tracing.\n        _trace_enabled = True\n        env_dir = os.environ.get(\"POML_TRACE\")\n        if trace_dir is not None:\n            base = Path(trace_dir)\n            base.mkdir(parents=True, exist_ok=True)\n            ts = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")\n            run_dir = base / ts\n            run_dir.mkdir(parents=True, exist_ok=True)\n            _trace_dir = run_dir\n        elif env_dir:\n            run_dir = Path(env_dir)\n            run_dir.mkdir(parents=True, exist_ok=True)\n            _trace_dir = run_dir\n        else:\n            _trace_dir = None\n    else:\n        _trace_enabled = False\n        _trace_dir = None\n\n    if \"weave\" in enabled:\n        _weave_enabled = True\n    else:\n        _weave_enabled = False\n\n    if \"agentops\" in enabled:\n        _agentops_enabled = True\n    else:\n        _agentops_enabled = False\n\n    if \"mlflow\" in enabled:\n        _mlflow_enabled = True\n    else:\n        _mlflow_enabled = False\n\n    return _trace_dir\n</code></pre>"},{"location":"python/reference/core/#poml.trace_artifact","title":"<code>trace_artifact(file_suffix, contents, encoding=None)</code>","text":"<p>Write an additional artifact file for the most recent <code>poml</code> call. This API is experimental.</p> Source code in <code>python/poml/api.py</code> <pre><code>def trace_artifact(file_suffix: str, contents: str | bytes, encoding: str | None = None) -&gt; Optional[Path]:\n    \"\"\"Write an additional artifact file for the most recent ``poml`` call. This API is experimental.\"\"\"\n    prefix = _latest_trace_prefix()\n    if prefix is None:\n        return None\n    suffix = file_suffix if file_suffix.startswith(\".\") else f\".{file_suffix}\"\n    path = Path(str(prefix) + suffix)\n    mode = \"wb\" if isinstance(contents, (bytes, bytearray)) else \"w\"\n    with open(path, mode, encoding=(None if \"b\" in mode else encoding)) as f:\n        f.write(contents)\n    return path\n</code></pre>"},{"location":"python/reference/integration/","title":"POML Integrations","text":""},{"location":"python/reference/integration/#poml.integration.agentops","title":"<code>poml.integration.agentops</code>","text":""},{"location":"python/reference/integration/#poml.integration.agentops.log_poml_call","title":"<code>log_poml_call(name, prompt, context, stylesheet, result)</code>","text":"<p>Log the entire poml call to agentops.</p> Source code in <code>python/poml/integration/agentops.py</code> <pre><code>def log_poml_call(name: str, prompt: str, context: dict | None, stylesheet: dict | None, result: Any) -&gt; Any:\n    \"\"\"Log the entire poml call to agentops.\"\"\"\n\n    @agentops.operation(name=\"poml\")\n    def poml(prompt, context, stylesheet):\n        return result\n\n    poml(prompt, context, stylesheet)\n</code></pre>"},{"location":"python/reference/integration/#poml.integration.langchain","title":"<code>poml.integration.langchain</code>","text":""},{"location":"python/reference/integration/#poml.integration.langchain.LangchainPomlTemplate","title":"<code>LangchainPomlTemplate</code>","text":"<p>               Bases: <code>PromptTemplate</code></p> <p>A LangChain-compatible prompt template that uses POML (Prompt Markup Language) for formatting.</p> <p>This class extends LangChain's PromptTemplate to support POML markup, enabling rich prompt formatting with speaker modes and structured content. It can load templates from files or strings and format them into either ChatPromptValue or StringPromptValue objects.</p> <p>Attributes:</p> Name Type Description <code>template_file</code> <code>Union[str, Path, None]</code> <p>Path to the POML template file, if loaded from file.</p> <code>speaker_mode</code> <code>bool</code> <p>Whether to format output as chat messages (True) or plain text (False). Defaults to True.</p> <p>Examples:</p> <p>Create from a template string:</p> <pre><code>&gt;&gt;&gt; template = LangchainPomlTemplate.from_template(\n...     \"Hello {{name}}!\", speaker_mode=True\n... )\n&gt;&gt;&gt; result = template.format(name=\"Alice\")\n</code></pre> <p>Load from a POML file:</p> <pre><code>&gt;&gt;&gt; template = LangchainPomlTemplate.from_file(\n...     \"path/to/template.poml\", speaker_mode=False\n... )\n&gt;&gt;&gt; result = template.format(user_input=\"What is AI?\")\n</code></pre> Note <ul> <li>In speaker_mode=True, returns ChatPromptValue with structured messages</li> <li>In speaker_mode=False, returns StringPromptValue with plain text</li> <li>The from_examples() method is not supported and will raise NotImplementedError</li> </ul> Source code in <code>python/poml/integration/langchain.py</code> <pre><code>class LangchainPomlTemplate(PromptTemplate):\n    \"\"\"A LangChain-compatible prompt template that uses POML (Prompt Markup Language) for formatting.\n\n    This class extends LangChain's PromptTemplate to support POML markup, enabling rich prompt\n    formatting with speaker modes and structured content. It can load templates from files or\n    strings and format them into either ChatPromptValue or StringPromptValue objects.\n\n    Attributes:\n        template_file (Union[str, Path, None]): Path to the POML template file, if loaded from file.\n        speaker_mode (bool): Whether to format output as chat messages (True) or plain text (False).\n            Defaults to True.\n\n    Examples:\n        Create from a template string:\n        &gt;&gt;&gt; template = LangchainPomlTemplate.from_template(\n        ...     \"Hello {{name}}!\", speaker_mode=True\n        ... )\n        &gt;&gt;&gt; result = template.format(name=\"Alice\")\n\n        Load from a POML file:\n        &gt;&gt;&gt; template = LangchainPomlTemplate.from_file(\n        ...     \"path/to/template.poml\", speaker_mode=False\n        ... )\n        &gt;&gt;&gt; result = template.format(user_input=\"What is AI?\")\n\n    Note:\n        - In speaker_mode=True, returns ChatPromptValue with structured messages\n        - In speaker_mode=False, returns StringPromptValue with plain text\n        - The from_examples() method is not supported and will raise NotImplementedError\n    \"\"\"\n\n    template_file: Union[str, Path, None] = None\n    speaker_mode: bool = True\n\n    @property\n    @override\n    def lc_attributes(self) -&gt; dict[str, Any]:\n        return {\n            \"template_file\": self.template_file,\n            \"speaker_mode\": self.speaker_mode,\n            # Template format is not used\n            # \"template_format\": self.template_format,\n        }\n\n    @classmethod\n    @override\n    def get_lc_namespace(cls) -&gt; list[str]:\n        return [\"poml\", \"integration\", \"langchain\"]\n\n    @classmethod\n    def from_examples(cls, *args, **kwargs):\n        raise NotImplementedError(\n            \"LangchainPomlTemplate does not support from_examples. Use from_template or from_file instead.\"\n        )\n\n    @classmethod\n    def from_file(\n        cls, template_file: Union[str, Path], *args, speaker_mode: bool = True, **kwargs\n    ) -&gt; \"LangchainPomlTemplate\":\n        instance: LangchainPomlTemplate = super().from_file(template_file, **kwargs)  # type: ignore\n        instance.template_file = template_file\n        instance.speaker_mode = speaker_mode\n        return instance\n\n    @classmethod\n    def from_template(cls, *args, speaker_mode: bool = True, **kwargs) -&gt; \"LangchainPomlTemplate\":\n        instance: LangchainPomlTemplate = super().from_template(*args, **kwargs)  # type: ignore\n        instance.speaker_mode = speaker_mode\n        return instance\n\n    def format(self, **kwargs) -&gt; Union[ChatPromptValue, StringPromptValue]:  # type: ignore\n        kwargs = self._merge_partial_and_user_variables(**kwargs)\n        if self.template_file:\n            formatted_messages = poml_formatter(self.template_file, self.speaker_mode, kwargs)\n        else:\n            formatted_messages = poml_formatter(self.template, self.speaker_mode, kwargs)\n        if self.speaker_mode:\n            return ChatPromptValue(messages=formatted_messages)\n        else:\n            if len(formatted_messages) == 1:\n                if isinstance(formatted_messages[0].content, str):\n                    return StringPromptValue(text=formatted_messages[0].content)\n                elif isinstance(formatted_messages[0].content, list):\n                    # If the content is a list, we assume it's a single message with multiple parts.\n                    if len(formatted_messages[0].content) == 1:\n                        # If there's only one part, return it as a StringPromptValue\n                        if isinstance(formatted_messages[0].content[0], str):\n                            return StringPromptValue(text=formatted_messages[0].content[0])\n                        else:\n                            raise ValueError(\n                                f\"Unsupported content type for non-speaker mode: {formatted_messages[0].content[0]}\"\n                            )\n                    else:\n                        raise ValueError(\n                            f\"Multi-part contents is not supported for non-speaker mode: {formatted_messages[0].content}\"\n                        )\n                else:\n                    raise ValueError(f\"Unsupported content type for non-speaker mode: {formatted_messages[0].content}\")\n            else:\n                raise ValueError(\n                    f\"Multiple messages returned, but non-speaker mode requires a single message: {formatted_messages}\"\n                )\n\n    def format_prompt(self, **kwargs):\n        return self.format(**kwargs)\n</code></pre>"},{"location":"python/reference/integration/#poml.integration.mlflow","title":"<code>poml.integration.mlflow</code>","text":""},{"location":"python/reference/integration/#poml.integration.mlflow.log_poml_call","title":"<code>log_poml_call(name, prompt, context, stylesheet, result)</code>","text":"<p>Log the entire poml call to mlflow.</p> Source code in <code>python/poml/integration/mlflow.py</code> <pre><code>def log_poml_call(name: str, prompt: str, context: dict | None, stylesheet: dict | None, result: Any) -&gt; Any:\n    \"\"\"Log the entire poml call to mlflow.\"\"\"\n\n    @mlflow.trace\n    def poml(prompt, context, stylesheet):\n        return result\n\n    prompt_registered = mlflow.genai.register_prompt(\n        name=name,\n        template=prompt,\n        tags={\"format\": \"poml\", \"source\": \"auto\"},\n    )\n\n    poml(prompt, context, stylesheet)\n</code></pre>"},{"location":"python/reference/integration/#poml.integration.pydantic","title":"<code>poml.integration.pydantic</code>","text":""},{"location":"python/reference/integration/#poml.integration.pydantic.NotGiven","title":"<code>NotGiven</code>","text":"<p>A sentinel singleton class used to distinguish omitted keyword arguments from those passed in with the value None (which may have different behavior).</p> Source code in <code>python/poml/integration/pydantic.py</code> <pre><code>class NotGiven:\n    \"\"\"\n    A sentinel singleton class used to distinguish omitted keyword arguments\n    from those passed in with the value None (which may have different behavior).\n    \"\"\"\n\n    def __bool__(self) -&gt; Literal[False]:\n        return False\n\n    @override\n    def __repr__(self) -&gt; str:\n        return \"NOT_GIVEN\"\n</code></pre>"},{"location":"python/reference/integration/#poml.integration.pydantic.is_dataclass_like_type","title":"<code>is_dataclass_like_type(typ)</code>","text":"<p>Returns True if the given type likely used <code>@pydantic.dataclass</code></p> Source code in <code>python/poml/integration/pydantic.py</code> <pre><code>def is_dataclass_like_type(typ: type) -&gt; bool:\n    \"\"\"Returns True if the given type likely used `@pydantic.dataclass`\"\"\"\n    return hasattr(typ, \"__pydantic_config__\")\n</code></pre>"},{"location":"python/reference/integration/#poml.integration.pydantic.to_strict_json_schema","title":"<code>to_strict_json_schema(model)</code>","text":"<p>Convert a Pydantic model to a strict JSON schema suitable for OpenAI function calling and response format.</p> <p>This function takes a Pydantic BaseModel class or TypeAdapter and converts it to a JSON schema that conforms to the strict schema requirements for OpenAI's function calling API. The resulting schema ensures all objects have <code>additionalProperties: false</code> and all properties are required.</p> <p>Most of the implementation is adapted from OpenAI Python SDK.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[BaseModel] | TypeAdapter[Any]</code> <p>A Pydantic BaseModel class or TypeAdapter instance to convert to JSON schema</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dictionary representing the strict JSON schema</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the model is not a BaseModel type and Pydantic v2 is not available,       or if a non-BaseModel type is used with Pydantic v1</p> Example <pre><code>from pydantic import BaseModel, Field\nfrom poml.integration.pydantic import to_strict_json_schema\n\nclass Query(BaseModel):\n    name: str = Field(description=\"Query name\")\n    limit: int = Field(description=\"Result limit\", default=10)\n\nschema = to_strict_json_schema(Query)\n# Returns a strict JSON schema with additionalProperties: false\n</code></pre> Source code in <code>python/poml/integration/pydantic.py</code> <pre><code>def to_strict_json_schema(model: type[pydantic.BaseModel] | pydantic.TypeAdapter[Any]) -&gt; dict[str, Any]:\n    \"\"\"\n    Convert a Pydantic model to a strict JSON schema suitable for OpenAI function calling and response format.\n\n    This function takes a Pydantic BaseModel class or TypeAdapter and converts it to a JSON schema\n    that conforms to the strict schema requirements for OpenAI's function calling API. The resulting\n    schema ensures all objects have `additionalProperties: false` and all properties are required.\n\n    Most of the implementation is adapted from [OpenAI Python SDK](https://github.com/openai/openai-python/blob/4e28a424e6afd60040e3bdf7c76eebb63bc0c407/src/openai/lib/_pydantic.py).\n\n    Args:\n        model: A Pydantic BaseModel class or TypeAdapter instance to convert to JSON schema\n\n    Returns:\n        A dictionary representing the strict JSON schema\n\n    Raises:\n        TypeError: If the model is not a BaseModel type and Pydantic v2 is not available,\n                  or if a non-BaseModel type is used with Pydantic v1\n\n    Example:\n        ```python\n        from pydantic import BaseModel, Field\n        from poml.integration.pydantic import to_strict_json_schema\n\n        class Query(BaseModel):\n            name: str = Field(description=\"Query name\")\n            limit: int = Field(description=\"Result limit\", default=10)\n\n        schema = to_strict_json_schema(Query)\n        # Returns a strict JSON schema with additionalProperties: false\n        ```\n    \"\"\"\n    if inspect.isclass(model) and is_basemodel_type(model):\n        if PYDANTIC_V2:\n            schema = model.model_json_schema()\n        else:\n            schema = model.schema()  # type: ignore\n    elif PYDANTIC_V2 and isinstance(model, pydantic.TypeAdapter):\n        schema = model.json_schema()\n    else:\n        raise TypeError(f\"Non BaseModel types are only supported with Pydantic v2 - {model}\")\n\n    return _ensure_strict_json_schema(schema, path=(), root=schema)\n</code></pre>"},{"location":"python/reference/integration/#poml.integration.weave","title":"<code>poml.integration.weave</code>","text":""},{"location":"python/reference/integration/#poml.integration.weave.log_poml_call","title":"<code>log_poml_call(name, prompt, context, stylesheet, result)</code>","text":"<p>Log the entire poml call to weave.</p> Source code in <code>python/poml/integration/weave.py</code> <pre><code>def log_poml_call(name: str, prompt: str, context: dict | None, stylesheet: dict | None, result: Any) -&gt; Any:\n    \"\"\"Log the entire poml call to weave.\"\"\"\n\n    @weave.op\n    def poml(prompt, context, stylesheet):\n        return result\n\n    prompt_ref = weave.publish(prompt, name=name)\n    if context is not None:\n        context_ref = weave.publish(context, name=name + \".context\")\n    else:\n        context_ref = context\n    if stylesheet is not None and stylesheet != \"{}\":\n        stylesheet_ref = weave.publish(stylesheet, name=name + \".stylesheet\")\n    else:\n        stylesheet_ref = stylesheet\n\n    poml(prompt_ref, context_ref, stylesheet_ref)\n</code></pre>"},{"location":"python/reference/prompt/","title":"Python POML Native Prompt","text":""},{"location":"python/reference/prompt/#poml.prompt.Prompt","title":"<code>poml.prompt.Prompt</code>","text":"<p>               Bases: <code>_TagLib</code></p> <p>Builds an XML structure using ElementTree, supporting context-managed tags.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>class Prompt(_TagLib):\n    \"\"\"\n    Builds an XML structure using ElementTree, supporting context-managed tags.\n    \"\"\"\n\n    def __init__(self):\n        self.root_elements: list[ET.Element] = []\n        self.current_parent_stack: list[ET.Element] = []  # Stack of current ET.Element parents\n\n    def _prepare_attrs(self, **attrs) -&gt; dict[str, str]:\n        \"\"\"Converts attribute values to strings suitable for ElementTree.\"\"\"\n        prepared = {}\n        for k, v in attrs.items():\n            if v is None:  # Skip None attributes\n                continue\n            key_str = str(k)  # Keys are typically strings\n            if isinstance(v, bool):\n                val_str = str(v).lower()  # XML often uses \"true\"/\"false\"\n            elif isinstance(v, bytes):\n                b64 = base64.b64encode(v).decode()\n                if key_str == \"buffer\":\n                    prepared[\"base64\"] = b64\n                    continue\n                else:\n                    val_str = base64.b64encode(v).decode(\"ascii\")\n            elif isinstance(v, (int, float, str)):\n                val_str = str(v)\n            else:\n                val_str = json.dumps(v)  # Fallback for complex types, convert to JSON string\n            prepared[key_str] = val_str\n        return prepared\n\n    def text(self, content: str):\n        \"\"\"Adds text content to the currently open XML element.\"\"\"\n        if not self.current_parent_stack:\n            raise ValueError(\"Cannot add text: No tag is currently open. Use a 'with' block for a tag.\")\n\n        current_el = self.current_parent_stack[-1]\n        # ElementTree handles XML escaping for text content automatically\n        content_str = str(content)\n\n        # Append text correctly for mixed content (text between child elements)\n        if len(current_el) &gt; 0:  # If current element has children\n            last_child = current_el[-1]\n            if last_child.tail is None:\n                last_child.tail = content_str\n            else:\n                last_child.tail += content_str\n        else:  # No children yet in the current element, add to its primary text\n            if current_el.text is None:\n                current_el.text = content_str\n            else:\n                current_el.text += content_str\n\n    def _generate_xml_string(self, pretty: bool) -&gt; str:\n        \"\"\"\n        Serializes the built XML structure to a string.\n        Can optionally pretty-print the output.\n        \"\"\"\n        if self.current_parent_stack:\n            # This warning is for cases where rendering/dumping happens with unclosed tags.\n            print(\n                f\"Warning: Generating XML with open tags: {[el.tag for el in self.current_parent_stack]}. \"\n                \"Ensure all 'with' blocks for tags are properly exited before finalizing XML.\"\n            )\n\n        xml_strings = []\n        for root_el in self.root_elements:\n            if pretty:\n                # ET.indent modifies the element in-place (Python 3.9+)\n                ET.indent(root_el, space=\"  \", level=0)\n                xml_strings.append(ET.tostring(root_el, encoding=\"unicode\", method=\"xml\"))\n            else:\n                # Serialize compactly without extra whitespace\n                xml_strings.append(ET.tostring(root_el, encoding=\"unicode\", method=\"xml\"))\n\n        # Join the string representations of each root-level element.\n        # If pretty printing and multiple roots, join with newlines for readability.\n        # Otherwise, join directly to form a contiguous XML stream.\n        joiner = \"\\n\" if pretty and len(xml_strings) &gt; 0 else \"\"  # Add newline between pretty roots\n        return joiner.join(xml_strings)\n\n    def render(self, chat: bool = True, context=None, stylesheet=None) -&gt; list | dict | str:\n        \"\"\"\n        Renders the final XML. Raises error if tags are still open.\n        \"\"\"\n        if self.current_parent_stack:\n            raise ValueError(\n                f\"Cannot render: Open tags remaining: {[el.tag for el in self.current_parent_stack]}. \"\n                \"Ensure all 'with' blocks for tags are properly exited.\"\n            )\n        # poml likely expects a compact, single XML string.\n        final_xml = self._generate_xml_string(pretty=False)\n        return poml(final_xml, context=context, stylesheet=stylesheet, chat=chat)\n\n    def dump_xml(self) -&gt; str:\n        \"\"\"\n        Dumps the generated XML string, pretty-printed by default (useful for debugging).\n        \"\"\"\n        return self._generate_xml_string(pretty=True)\n\n    def __enter__(self):\n        \"\"\"Enter a context for building a prompt.\n\n        The Prompt instance can be reused across multiple ``with`` blocks. On\n        each entry we simply reset the stack of currently open elements while\n        preserving any previously created root elements so that additional tags\n        can be appended in subsequent sessions.\n        \"\"\"\n\n        # Reset the stack of open elements for this new session but leave any\n        # existing root elements intact so the prompt can be extended across\n        # multiple ``with`` blocks.\n        self.current_parent_stack = []\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Cleans up Prompt state upon exiting a 'with' block.\"\"\"\n        if self.current_parent_stack and exc_type is None:\n            # This means the Prompt context itself exited while some _ImplicitDualTagHandler\n            # contexts (tags) were still notionally open.\n            warnings.warn(\n                f\"Warning: Prompt context exited with open tags: {[el.tag for el in self.current_parent_stack]}. \"\n                \"This may indicate nested tag context managers were not properly closed before the Prompt context ended.\"\n            )\n\n        # Clear any open elements from the stack.  Previously the entire state\n        # was discarded on exit which meant ``dump_xml`` and ``render`` could\n        # only be called while inside the ``with`` block.  By keeping the root\n        # elements around we allow callers to finalize or extend the prompt\n        # after the block has exited.\n        self.current_parent_stack.clear()\n\n    def tag(self, tag_name: str, **attrs) -&gt; _ImplicitDualTagHandler:\n        return _ImplicitDualTagHandler(self, tag_name, attrs)\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter a context for building a prompt.</p> <p>The Prompt instance can be reused across multiple <code>with</code> blocks. On each entry we simply reset the stack of currently open elements while preserving any previously created root elements so that additional tags can be appended in subsequent sessions.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def __enter__(self):\n    \"\"\"Enter a context for building a prompt.\n\n    The Prompt instance can be reused across multiple ``with`` blocks. On\n    each entry we simply reset the stack of currently open elements while\n    preserving any previously created root elements so that additional tags\n    can be appended in subsequent sessions.\n    \"\"\"\n\n    # Reset the stack of open elements for this new session but leave any\n    # existing root elements intact so the prompt can be extended across\n    # multiple ``with`` blocks.\n    self.current_parent_stack = []\n    return self\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Cleans up Prompt state upon exiting a 'with' block.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Cleans up Prompt state upon exiting a 'with' block.\"\"\"\n    if self.current_parent_stack and exc_type is None:\n        # This means the Prompt context itself exited while some _ImplicitDualTagHandler\n        # contexts (tags) were still notionally open.\n        warnings.warn(\n            f\"Warning: Prompt context exited with open tags: {[el.tag for el in self.current_parent_stack]}. \"\n            \"This may indicate nested tag context managers were not properly closed before the Prompt context ended.\"\n        )\n\n    # Clear any open elements from the stack.  Previously the entire state\n    # was discarded on exit which meant ``dump_xml`` and ``render`` could\n    # only be called while inside the ``with`` block.  By keeping the root\n    # elements around we allow callers to finalize or extend the prompt\n    # after the block has exited.\n    self.current_parent_stack.clear()\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.ai_message","title":"<code>ai_message(**kwargs)</code>","text":"<p>Wrap the contents in a AI message.</p> Example <pre><code>&lt;ai-msg&gt;Paris&lt;/ai-msg&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def ai_message(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Wrap the contents in a AI message.\n\n\n    Example:\n        ```xml\n        &lt;ai-msg&gt;Paris&lt;/ai-msg&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"AiMessage\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.audio","title":"<code>audio(src=None, base64=None, alt=None, type=None, position=None, syntax=None, **kwargs)</code>","text":"<p>Audio (<code>&lt;audio&gt;</code>) embeds an audio file in the content.</p> <p>Accepts either a file path (<code>src</code>) or base64-encoded audio data (<code>base64</code>). The MIME type can be provided via <code>type</code> or will be inferred from the file extension.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>Optional[str]</code> <p>Path to the audio file. If provided, the file will be read and encoded as base64.</p> <code>None</code> <code>base64</code> <code>Optional[str]</code> <p>Base64-encoded audio data. Cannot be used together with <code>src</code>.</p> <code>None</code> <code>alt</code> <code>Optional[str]</code> <p>The alternative text to show when the image cannot be displayed.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>The MIME type of the audio (e.g., audio/mpeg, audio/wav). If not specified, it will be inferred from the file extension.   The type must be consistent with the real type of the file. The consistency will NOT be checked or converted.   The type can be specified with or without the <code>audio/</code> prefix.</p> <code>None</code> <code>position</code> <code>Optional[str]</code> <p>The position of the image. Default is <code>here</code>. Default is <code>\"here\"</code>. Choices: <code>\"top\"</code>, <code>\"bottom\"</code>, <code>\"here\"</code>.</p> <code>None</code> <code>syntax</code> <code>Optional[str]</code> <p>Only when specified as <code>multimedia</code>, the image will be shown.   Otherwise, the alt text will be shown. By default, it's <code>multimedia</code> when <code>alt</code> is not specified. Otherwise, it's undefined (inherit from parent). Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"xml\"</code>, <code>\"multimedia\"</code>.</p> <code>None</code> Example <pre><code>&lt;Audio src=\"path/to/audio.mp3\" /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def audio(\n    self,\n    src: Optional[str] = None,\n    base64: Optional[str] = None,\n    alt: Optional[str] = None,\n    type: Optional[str] = None,\n    position: Optional[str] = None,\n    syntax: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Audio (`&lt;audio&gt;`) embeds an audio file in the content.\n\n    Accepts either a file path (`src`) or base64-encoded audio data (`base64`).\n    The MIME type can be provided via `type` or will be inferred from the file extension.\n\n    Args:\n        src (Optional[str]): Path to the audio file. If provided, the file will be read and encoded as base64.\n        base64 (Optional[str]): Base64-encoded audio data. Cannot be used together with `src`.\n        alt (Optional[str]): The alternative text to show when the image cannot be displayed.\n        type (Optional[str]): The MIME type of the audio (e.g., audio/mpeg, audio/wav). If not specified, it will be inferred from the file extension.\n              The type must be consistent with the real type of the file. The consistency will NOT be checked or converted.\n              The type can be specified with or without the `audio/` prefix.\n        position (Optional[str]): The position of the image. Default is `here`. Default is `\"here\"`. Choices: `\"top\"`, `\"bottom\"`, `\"here\"`.\n        syntax (Optional[str]): Only when specified as `multimedia`, the image will be shown.\n              Otherwise, the alt text will be shown. By default, it's `multimedia` when `alt` is not specified. Otherwise, it's undefined (inherit from parent). Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"xml\"`, `\"multimedia\"`.\n\n    Example:\n        ```xml\n        &lt;Audio src=\"path/to/audio.mp3\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Audio\",\n        src=src,\n        base64=base64,\n        alt=alt,\n        type=type,\n        position=position,\n        syntax=syntax,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.bold","title":"<code>bold(**kwargs)</code>","text":"<p>Bold (<code>&lt;b&gt;</code>) emphasizes text in a bold style when using markup syntaxes.</p> Example <pre><code>&lt;p&gt;&lt;b&gt;Task:&lt;/b&gt; Do something.&lt;/p&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def bold(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Bold (`&lt;b&gt;`) emphasizes text in a bold style when using markup syntaxes.\n\n\n    Example:\n        ```xml\n        &lt;p&gt;&lt;b&gt;Task:&lt;/b&gt; Do something.&lt;/p&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Bold\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.captioned_paragraph","title":"<code>captioned_paragraph(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>CaptionedParagraph (<code>&lt;cp&gt;</code> for short) creates a paragraph with a customized caption title.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the paragraph. Required.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes.   By default, it's same as <code>caption</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>header</code>. Default is <code>\"header\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;cp caption=\"Constraints\"&gt;\n  &lt;list&gt;\n    &lt;item&gt;Do not exceed 1000 tokens.&lt;/item&gt;\n    &lt;item&gt;Please use simple words.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/cp&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def captioned_paragraph(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"CaptionedParagraph (`&lt;cp&gt;` for short) creates a paragraph with a customized caption title.\n\n    Args:\n        caption (Optional[str]): The title or label for the paragraph. Required.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes.\n              By default, it's same as `caption`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `header`. Default is `\"header\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;cp caption=\"Constraints\"&gt;\n          &lt;list&gt;\n            &lt;item&gt;Do not exceed 1000 tokens.&lt;/item&gt;\n            &lt;item&gt;Please use simple words.&lt;/item&gt;\n          &lt;/list&gt;\n        &lt;/cp&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"CaptionedParagraph\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.code","title":"<code>code(inline=None, lang=None, **kwargs)</code>","text":"<p>Code is used to represent code snippets or inline code in markup syntaxes.</p> <p>Parameters:</p> Name Type Description Default <code>inline</code> <code>Optional[bool]</code> <p>Whether to render code inline or as a block. Default is <code>true</code>. Default is <code>\"true\"</code>.</p> <code>None</code> <code>lang</code> <code>Optional[str]</code> <p>The language of the code snippet.</p> <code>None</code> Example <pre><code>&lt;code inline=\"true\"&gt;const x = 42;&lt;/code&gt;\n</code></pre> <pre><code>&lt;code lang=\"javascript\"&gt;\nconst x = 42;\n&lt;/code&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def code(\n    self,\n    inline: Optional[bool] = None,\n    lang: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Code is used to represent code snippets or inline code in markup syntaxes.\n\n    Args:\n        inline (Optional[bool]): Whether to render code inline or as a block. Default is `true`. Default is `\"true\"`.\n        lang (Optional[str]): The language of the code snippet.\n\n    Example:\n        ```xml\n        &lt;code inline=\"true\"&gt;const x = 42;&lt;/code&gt;\n        ```\n\n        ```xml\n        &lt;code lang=\"javascript\"&gt;\n        const x = 42;\n        &lt;/code&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Code\",\n        inline=inline,\n        lang=lang,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.conversation","title":"<code>conversation(messages=None, selectedMessages=None, **kwargs)</code>","text":"<p>Display a conversation between system, human and AI.</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>Optional[Any]</code> <p>A list of message. Each message should have a <code>speaker</code> and a <code>content</code> field.</p> <code>None</code> <code>selectedMessages</code> <code>Optional[str]</code> <p>The messages to be selected. If not provided, all messages will be selected. You can use a string like <code>2</code> to specify a single message, or slice like <code>2:4</code> to specify a range of messages (2 inclusive, 4 exclusive). Or use <code>-6:</code> to select the last 6 messages.</p> <code>None</code> Example <pre><code>&lt;conversation messages=\"{{[{ speaker: 'human', content: 'What is the capital of France?' }, { speaker: 'ai', content: 'Paris' }]}}\" /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def conversation(\n    self,\n    messages: Optional[Any] = None,\n    selectedMessages: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Display a conversation between system, human and AI.\n\n    Args:\n        messages (Optional[Any]): A list of message. Each message should have a `speaker` and a `content` field.\n        selectedMessages (Optional[str]): The messages to be selected. If not provided, all messages will be selected.\n            You can use a string like `2` to specify a single message, or slice like `2:4` to specify a range of messages (2 inclusive, 4 exclusive).\n            Or use `-6:` to select the last 6 messages.\n\n    Example:\n        ```xml\n        &lt;conversation messages=\"{{[{ speaker: 'human', content: 'What is the capital of France?' }, { speaker: 'ai', content: 'Paris' }]}}\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Conversation\",\n        messages=messages,\n        selectedMessages=selectedMessages,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.document","title":"<code>document(src=None, buffer=None, base64=None, parser=None, multimedia=None, selectedPages=None, **kwargs)</code>","text":"<p>Displaying an external document like PDF, TXT or DOCX.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>Optional[str]</code> <p>The source file to read the data from. This must be provided if records is not provided.</p> <code>None</code> <code>buffer</code> <code>Optional[bytes]</code> <p>Document data buffer. Recommended to use <code>src</code> instead unless you want to use a string.</p> <code>None</code> <code>base64</code> <code>Optional[str]</code> <p>Base64 encoded string of the document data. Mutually exclusive with <code>src</code> and <code>buffer</code>.</p> <code>None</code> <code>parser</code> <code>Optional[str]</code> <p>The parser to use for reading the data. If not provided, it will be inferred from the file extension. Choices: <code>\"auto\"</code>, <code>\"pdf\"</code>, <code>\"docx\"</code>, <code>\"txt\"</code>.</p> <code>None</code> <code>multimedia</code> <code>Optional[bool]</code> <p>If true, the multimedias will be displayed. If false, the alt strings will be displayed at best effort. Default is <code>true</code>. Default is <code>\"true\"</code>.</p> <code>None</code> <code>selectedPages</code> <code>Optional[str]</code> <p>The pages to be selected. This is only available for PDF documents. If not provided, all pages will be selected. You can use a string like <code>2</code> to specify a single page, or slice like <code>2:4</code> to specify a range of pages (2 inclusive, 4 exclusive). The pages selected are 0-indexed. Negative indexes like <code>-1</code> is not supported here.</p> <code>None</code> Example <p>To display a Word document without including the real multimedia: <pre><code>&lt;Document src=\"sample.docx\" multimedia=\"false\"/&gt;\n</code></pre></p> Source code in <code>python/poml/_tags.py</code> <pre><code>def document(\n    self,\n    src: Optional[str] = None,\n    buffer: Optional[bytes] = None,\n    base64: Optional[str] = None,\n    parser: Optional[str] = None,\n    multimedia: Optional[bool] = None,\n    selectedPages: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Displaying an external document like PDF, TXT or DOCX.\n\n    Args:\n        src (Optional[str]): The source file to read the data from. This must be provided if records is not provided.\n        buffer (Optional[bytes]): Document data buffer. Recommended to use `src` instead unless you want to use a string.\n        base64 (Optional[str]): Base64 encoded string of the document data. Mutually exclusive with `src` and `buffer`.\n        parser (Optional[str]): The parser to use for reading the data. If not provided, it will be inferred from the file extension. Choices: `\"auto\"`, `\"pdf\"`, `\"docx\"`, `\"txt\"`.\n        multimedia (Optional[bool]): If true, the multimedias will be displayed. If false, the alt strings will be displayed at best effort. Default is `true`. Default is `\"true\"`.\n        selectedPages (Optional[str]): The pages to be selected. This is only available **for PDF documents**. If not provided, all pages will be selected.\n            You can use a string like `2` to specify a single page, or slice like `2:4` to specify a range of pages (2 inclusive, 4 exclusive).\n            The pages selected are **0-indexed**. Negative indexes like `-1` is not supported here.\n\n    Example:\n        To display a Word document without including the real multimedia:\n        ```xml\n        &lt;Document src=\"sample.docx\" multimedia=\"false\"/&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Document\",\n        src=src,\n        buffer=buffer,\n        base64=base64,\n        parser=parser,\n        multimedia=multimedia,\n        selectedPages=selectedPages,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.dump_xml","title":"<code>dump_xml()</code>","text":"<p>Dumps the generated XML string, pretty-printed by default (useful for debugging).</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def dump_xml(self) -&gt; str:\n    \"\"\"\n    Dumps the generated XML string, pretty-printed by default (useful for debugging).\n    \"\"\"\n    return self._generate_xml_string(pretty=True)\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.example","title":"<code>example(caption=None, captionSerialized=None, captionStyle=None, chat=None, captionTextTransform=None, captionColon=None, **kwargs)</code>","text":"<p>Example is useful for providing a context, helping the model to understand what kind of inputs and outputs are expected. It can also be used to demonstrate the desired output style, clarifying the structure, tone, or level of detail in the response.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the example paragraph. Default is <code>Example</code>. Default is <code>\"Example\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>example</code>. Default is <code>\"example\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>hidden</code>. Options include <code>header</code>, <code>bold</code>, <code>plain</code>, or <code>hidden</code>. Default is <code>\"hidden\"</code>.</p> <code>None</code> <code>chat</code> <code>Optional[bool]</code> <p>Indicates whether the example should be rendered in chat format. When used in a example set (<code>&lt;examples&gt;</code>), this is inherited from the example set. Otherwise, it defaults to <code>false</code> for \"serializer\" syntaxes and <code>true</code> for \"markup\" syntaxes.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Options are <code>upper</code>, <code>lower</code>, <code>capitalize</code>, or <code>none</code>. Default is <code>none</code>. Default is <code>\"none\"</code>.</p> <code>None</code> <code>captionColon</code> <code>Optional[bool]</code> <p>Indicates whether to append a colon after the caption. By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</p> <code>None</code> Example <pre><code>&lt;example&gt;\n  &lt;input&gt;What is the capital of France?&lt;/input&gt;\n  &lt;output&gt;Paris&lt;/output&gt;\n&lt;/example&gt;\n</code></pre> <pre><code>&lt;task&gt;Summarize the following passage in a single sentence.&lt;/task&gt;\n&lt;example&gt;\n  &lt;input caption=\"Passage\"&gt;The sun provides energy for life on Earth through processes like photosynthesis.&lt;/input&gt;\n  &lt;output caption=\"Summary\"&gt;The sun is essential for energy and life processes on Earth.&lt;/output&gt;\n&lt;/example&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def example(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    chat: Optional[bool] = None,\n    captionTextTransform: Optional[str] = None,\n    captionColon: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"Example is useful for providing a context, helping the model to understand what kind of inputs and outputs are expected.\n    It can also be used to demonstrate the desired output style, clarifying the structure, tone, or level of detail in the response.\n\n    Args:\n        caption (Optional[str]): The title or label for the example paragraph. Default is `Example`. Default is `\"Example\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `example`. Default is `\"example\"`.\n        captionStyle (Optional[str]): Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is `hidden`.\n            Options include `header`, `bold`, `plain`, or `hidden`. Default is `\"hidden\"`.\n        chat (Optional[bool]): Indicates whether the example should be rendered in chat format.\n            When used in a example set (`&lt;examples&gt;`), this is inherited from the example set.\n            Otherwise, it defaults to `false` for \"serializer\" syntaxes and `true` for \"markup\" syntaxes.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes.\n            Options are `upper`, `lower`, `capitalize`, or `none`. Default is `none`. Default is `\"none\"`.\n        captionColon (Optional[bool]): Indicates whether to append a colon after the caption.\n            By default, this is true for `bold` or `plain` captionStyle, and false otherwise.\n\n    Example:\n        ```xml\n        &lt;example&gt;\n          &lt;input&gt;What is the capital of France?&lt;/input&gt;\n          &lt;output&gt;Paris&lt;/output&gt;\n        &lt;/example&gt;\n        ```\n\n        ```xml\n        &lt;task&gt;Summarize the following passage in a single sentence.&lt;/task&gt;\n        &lt;example&gt;\n          &lt;input caption=\"Passage\"&gt;The sun provides energy for life on Earth through processes like photosynthesis.&lt;/input&gt;\n          &lt;output caption=\"Summary\"&gt;The sun is essential for energy and life processes on Earth.&lt;/output&gt;\n        &lt;/example&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Example\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        chat=chat,\n        captionTextTransform=captionTextTransform,\n        captionColon=captionColon,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.example_input","title":"<code>example_input(caption=None, captionSerialized=None, speaker=None, captionStyle=None, captionTextTransform=None, captionColon=None, **kwargs)</code>","text":"<p>ExampleInput (<code>&lt;input&gt;</code>) is a paragraph that represents an example input. By default, it's spoken by a human speaker in a chat context, but you can manually specify the speaker.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the example input paragraph. Default is <code>Input</code>. Default is <code>\"Input\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>input</code>. Default is <code>\"input\"</code>.</p> <code>None</code> <code>speaker</code> <code>Optional[str]</code> <p>The speaker for the example input. Default is <code>human</code> if chat context is enabled (see <code>&lt;example&gt;</code>). Default is <code>\"human\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>hidden</code> if chat context is enabled. Otherwise, it's <code>bold</code>. Default is <code>\"hidden\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionColon</code> <code>Optional[bool]</code> <p>Indicates whether to append a colon after the caption. By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</p> <code>None</code> Example <pre><code>&lt;input&gt;What is the capital of France?&lt;/input&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;input&gt;What is the capital of {{country}}?&lt;/input&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def example_input(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    speaker: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionColon: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"ExampleInput (`&lt;input&gt;`) is a paragraph that represents an example input.\n    By default, it's spoken by a human speaker in a chat context, but you can manually specify the speaker.\n\n    Args:\n        caption (Optional[str]): The title or label for the example input paragraph. Default is `Input`. Default is `\"Input\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `input`. Default is `\"input\"`.\n        speaker (Optional[str]): The speaker for the example input. Default is `human` if chat context is enabled (see `&lt;example&gt;`). Default is `\"human\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `hidden` if chat context is enabled. Otherwise, it's `bold`. Default is `\"hidden\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionColon (Optional[bool]): Indicates whether to append a colon after the caption.\n            By default, this is true for `bold` or `plain` captionStyle, and false otherwise.\n\n    Example:\n        ```xml\n        &lt;input&gt;What is the capital of France?&lt;/input&gt;\n        ```\n\n        When used with a template:\n\n        ```xml\n        &lt;input&gt;What is the capital of {{country}}?&lt;/input&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"ExampleInput\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        speaker=speaker,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionColon=captionColon,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.example_output","title":"<code>example_output(caption=None, captionSerialized=None, speaker=None, captionStyle=None, captionTextTransform=None, captionColon=None, **kwargs)</code>","text":"<p>ExampleOutput (<code>&lt;output&gt;</code>) is a paragraph that represents an example output. By default, it's spoken by a AI speaker in a chat context, but you can manually specify the speaker.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the example output paragraph. Default is <code>Output</code>. Default is <code>\"Output\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>output</code>. Default is <code>\"output\"</code>.</p> <code>None</code> <code>speaker</code> <code>Optional[str]</code> <p>The speaker for the example output. Default is <code>ai</code> if chat context is enabled (see <code>&lt;example&gt;</code>). Default is <code>\"ai\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>hidden</code> if chat context is enabled. Otherwise, it's <code>bold</code>. Default is <code>\"hidden\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionColon</code> <code>Optional[bool]</code> <p>Indicates whether to append a colon after the caption. By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</p> <code>None</code> Example <pre><code>&lt;output&gt;The capital of France is Paris.&lt;/output&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;output&gt;The capital of {{country}} is {{capital}}.&lt;/output&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def example_output(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    speaker: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionColon: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"ExampleOutput (`&lt;output&gt;`) is a paragraph that represents an example output.\n    By default, it's spoken by a AI speaker in a chat context, but you can manually specify the speaker.\n\n    Args:\n        caption (Optional[str]): The title or label for the example output paragraph. Default is `Output`. Default is `\"Output\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `output`. Default is `\"output\"`.\n        speaker (Optional[str]): The speaker for the example output. Default is `ai` if chat context is enabled (see `&lt;example&gt;`). Default is `\"ai\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `hidden` if chat context is enabled. Otherwise, it's `bold`. Default is `\"hidden\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionColon (Optional[bool]): Indicates whether to append a colon after the caption.\n            By default, this is true for `bold` or `plain` captionStyle, and false otherwise.\n\n    Example:\n        ```xml\n        &lt;output&gt;The capital of France is Paris.&lt;/output&gt;\n        ```\n\n        When used with a template:\n\n        ```xml\n        &lt;output&gt;The capital of {{country}} is {{capital}}.&lt;/output&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"ExampleOutput\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        speaker=speaker,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionColon=captionColon,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.example_set","title":"<code>example_set(caption=None, captionSerialized=None, chat=None, introducer=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>Example set (<code>&lt;examples&gt;</code>) is a collection of examples that are usually presented in a list. With the example set, you can manage multiple examples under a single title and optionally an introducer, as well as the same <code>chat</code> format. You can also choose to use <code>&lt;example&gt;</code> purely without example set.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the example set paragraph. Default is <code>Examples</code>. Default is <code>\"Examples\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>examples</code>. Default is <code>\"examples\"</code>.</p> <code>None</code> <code>chat</code> <code>Optional[bool]</code> <p>Indicates whether the examples should be rendered in chat format. By default, it's <code>true</code> for \"markup\" syntaxes and <code>false</code> for \"serializer\" syntaxes.</p> <code>None</code> <code>introducer</code> <code>Optional[str]</code> <p>An optional introducer text to be displayed before the examples. For example, <code>Here are some examples:</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>header</code>. Default is <code>\"header\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;examples chat={{true}}&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of France?&lt;/input&gt;\n    &lt;output&gt;Paris&lt;/output&gt;\n  &lt;/example&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of Germany?&lt;/input&gt;\n    &lt;output&gt;Berlin&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def example_set(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    chat: Optional[bool] = None,\n    introducer: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Example set (`&lt;examples&gt;`) is a collection of examples that are usually presented in a list.\n    With the example set, you can manage multiple examples under a single title and optionally an introducer,\n    as well as the same `chat` format.\n    You can also choose to use `&lt;example&gt;` purely without example set.\n\n    Args:\n        caption (Optional[str]): The title or label for the example set paragraph. Default is `Examples`. Default is `\"Examples\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `examples`. Default is `\"examples\"`.\n        chat (Optional[bool]): Indicates whether the examples should be rendered in chat format.\n            By default, it's `true` for \"markup\" syntaxes and `false` for \"serializer\" syntaxes.\n        introducer (Optional[str]): An optional introducer text to be displayed before the examples.\n            For example, `Here are some examples:`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `header`. Default is `\"header\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;examples chat={{true}}&gt;\n          &lt;example&gt;\n            &lt;input&gt;What is the capital of France?&lt;/input&gt;\n            &lt;output&gt;Paris&lt;/output&gt;\n          &lt;/example&gt;\n          &lt;example&gt;\n            &lt;input&gt;What is the capital of Germany?&lt;/input&gt;\n            &lt;output&gt;Berlin&lt;/output&gt;\n          &lt;/example&gt;\n        &lt;/examples&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"ExampleSet\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        chat=chat,\n        introducer=introducer,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.folder","title":"<code>folder(syntax=None, src=None, data=None, filter=None, maxDepth=None, showContent=None, **kwargs)</code>","text":"<p>Displays a directory structure as a tree.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[str]</code> <p>The output syntax of the content. Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"text\"</code>, <code>\"xml\"</code>.</p> <code>None</code> <code>src</code> <code>Optional[str]</code> <p>The source directory path to display.</p> <code>None</code> <code>data</code> <code>Optional[List[Any]]</code> <p>Alternative to src, directly provide tree data structure.</p> <code>None</code> <code>filter</code> <code>Optional[str]</code> <p>A regular expression to filter files.   The regex is applied to the folder names and file names (not the full path).   Directories are included by default unless all of their nested content is filtered out.   When filter is on, empty directories will not be shown.</p> <code>None</code> <code>maxDepth</code> <code>Optional[int]</code> <p>Maximum depth of directory traversal. Default is 3.</p> <code>None</code> <code>showContent</code> <code>Optional[bool]</code> <p>Whether to show file contents. Default is false.</p> <code>None</code> Example <p>To display a directory structure with a filter for Python files: <pre><code>&lt;folder src=\"project_dir\" filter=\".*\\.py$\" maxDepth=\"3\" /&gt;\n</code></pre></p> Source code in <code>python/poml/_tags.py</code> <pre><code>def folder(\n    self,\n    syntax: Optional[str] = None,\n    src: Optional[str] = None,\n    data: Optional[List[Any]] = None,\n    filter: Optional[str] = None,\n    maxDepth: Optional[int] = None,\n    showContent: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"Displays a directory structure as a tree.\n\n    Args:\n        syntax (Optional[str]): The output syntax of the content. Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"text\"`, `\"xml\"`.\n        src (Optional[str]): The source directory path to display.\n        data (Optional[List[Any]]): Alternative to src, directly provide tree data structure.\n        filter (Optional[str]): A regular expression to filter files.\n              The regex is applied to the folder names and file names (not the full path).\n              Directories are included by default unless all of their nested content is filtered out.\n              When filter is on, empty directories will not be shown.\n        maxDepth (Optional[int]): Maximum depth of directory traversal. Default is 3.\n        showContent (Optional[bool]): Whether to show file contents. Default is false.\n\n    Example:\n        To display a directory structure with a filter for Python files:\n        ```xml\n        &lt;folder src=\"project_dir\" filter=\".*\\\\.py$\" maxDepth=\"3\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Folder\",\n        syntax=syntax,\n        src=src,\n        data=data,\n        filter=filter,\n        maxDepth=maxDepth,\n        showContent=showContent,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.header","title":"<code>header(**kwargs)</code>","text":"<p>Header (<code>&lt;h&gt;</code>) renders headings in markup syntaxes. It's commonly used to highlight titles or section headings. The header level will be automatically computed based on the context. Use SubContent (<code>&lt;section&gt;</code>) for nested content.</p> Example <pre><code>&lt;Header syntax=\"markdown\"&gt;Section Title&lt;/Header&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def header(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Header (`&lt;h&gt;`) renders headings in markup syntaxes.\n    It's commonly used to highlight titles or section headings.\n    The header level will be automatically computed based on the context.\n    Use SubContent (`&lt;section&gt;`) for nested content.\n\n\n    Example:\n        ```xml\n        &lt;Header syntax=\"markdown\"&gt;Section Title&lt;/Header&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Header\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.hint","title":"<code>hint(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionColon=None, **kwargs)</code>","text":"<p>Hint can be used anywhere in the prompt where you want to provide a helpful tip or explanation. It is usually a short and concise statement that guides the LLM in the right direction.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the hint paragraph. Default is <code>Hint</code>. Default is <code>\"Hint\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>hint</code>. Default is <code>\"hint\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>bold</code>. Default is <code>\"bold\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionColon</code> <code>Optional[bool]</code> <p>Indicates whether to append a colon after the caption. By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</p> <code>None</code> Example <pre><code>&lt;hint&gt;Alice first purchased 4 apples and then 3 more, so she has 7 apples in total.&lt;/hint&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def hint(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionColon: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"Hint can be used anywhere in the prompt where you want to provide a helpful tip or explanation.\n    It is usually a short and concise statement that guides the LLM in the right direction.\n\n    Args:\n        caption (Optional[str]): The title or label for the hint paragraph. Default is `Hint`. Default is `\"Hint\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `hint`. Default is `\"hint\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `bold`. Default is `\"bold\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionColon (Optional[bool]): Indicates whether to append a colon after the caption.\n            By default, this is true for `bold` or `plain` captionStyle, and false otherwise.\n\n    Example:\n        ```xml\n        &lt;hint&gt;Alice first purchased 4 apples and then 3 more, so she has 7 apples in total.&lt;/hint&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Hint\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionColon=captionColon,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.human_message","title":"<code>human_message(**kwargs)</code>","text":"<p>Wrap the contents in a user message.</p> Example <pre><code>&lt;user-msg&gt;What is the capital of France?&lt;/user-msg&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def human_message(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Wrap the contents in a user message.\n\n\n    Example:\n        ```xml\n        &lt;user-msg&gt;What is the capital of France?&lt;/user-msg&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"HumanMessage\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.image","title":"<code>image(src=None, alt=None, base64=None, type=None, position=None, maxWidth=None, maxHeight=None, resize=None, syntax=None, **kwargs)</code>","text":"<p>Image (<code>&lt;img&gt;</code>) displays an image in the content. Alternatively, it can also be shown as an alt text by specifying the <code>syntax</code> prop. Note that syntax must be specified as <code>multimedia</code> to show the image.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>Optional[str]</code> <p>The path or URL to the image file.</p> <code>None</code> <code>alt</code> <code>Optional[str]</code> <p>The alternative text to show when the image cannot be displayed.</p> <code>None</code> <code>base64</code> <code>Optional[str]</code> <p>The base64 encoded image data. It can not be specified together with <code>src</code>.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>The MIME type of the image to be shown. If not specified, it will be inferred from the file extension.   If specified, the image will be converted to the specified type. Can be <code>image/jpeg</code>, <code>image/png</code>, etc., or without the <code>image/</code> prefix.</p> <code>None</code> <code>position</code> <code>Optional[str]</code> <p>The position of the image. Default is <code>here</code>. Default is <code>\"here\"</code>. Choices: <code>\"top\"</code>, <code>\"bottom\"</code>, <code>\"here\"</code>.</p> <code>None</code> <code>maxWidth</code> <code>Optional[int]</code> <p>The maximum width of the image to be shown.</p> <code>None</code> <code>maxHeight</code> <code>Optional[int]</code> <p>The maximum height of the image to be shown.</p> <code>None</code> <code>resize</code> <code>Optional[float]</code> <p>The ratio to resize the image to to be shown.</p> <code>None</code> <code>syntax</code> <code>Optional[str]</code> <p>Only when specified as <code>multimedia</code>, the image will be shown.   Otherwise, the alt text will be shown. By default, it's <code>multimedia</code> when <code>alt</code> is not specified. Otherwise, it's undefined (inherit from parent). Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"xml\"</code>, <code>\"multimedia\"</code>.</p> <code>None</code> Example <pre><code>&lt;Image src=\"path/to/image.jpg\" alt=\"Image description\" position=\"bottom\" /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def image(\n    self,\n    src: Optional[str] = None,\n    alt: Optional[str] = None,\n    base64: Optional[str] = None,\n    type: Optional[str] = None,\n    position: Optional[str] = None,\n    maxWidth: Optional[int] = None,\n    maxHeight: Optional[int] = None,\n    resize: Optional[float] = None,\n    syntax: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Image (`&lt;img&gt;`) displays an image in the content.\n    Alternatively, it can also be shown as an alt text by specifying the `syntax` prop.\n    Note that syntax must be specified as `multimedia` to show the image.\n\n    Args:\n        src (Optional[str]): The path or URL to the image file.\n        alt (Optional[str]): The alternative text to show when the image cannot be displayed.\n        base64 (Optional[str]): The base64 encoded image data. It can not be specified together with `src`.\n        type (Optional[str]): The MIME type of the image **to be shown**. If not specified, it will be inferred from the file extension.\n              If specified, the image will be converted to the specified type. Can be `image/jpeg`, `image/png`, etc., or without the `image/` prefix.\n        position (Optional[str]): The position of the image. Default is `here`. Default is `\"here\"`. Choices: `\"top\"`, `\"bottom\"`, `\"here\"`.\n        maxWidth (Optional[int]): The maximum width of the image to be shown.\n        maxHeight (Optional[int]): The maximum height of the image to be shown.\n        resize (Optional[float]): The ratio to resize the image to to be shown.\n        syntax (Optional[str]): Only when specified as `multimedia`, the image will be shown.\n              Otherwise, the alt text will be shown. By default, it's `multimedia` when `alt` is not specified. Otherwise, it's undefined (inherit from parent). Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"xml\"`, `\"multimedia\"`.\n\n    Example:\n        ```xml\n        &lt;Image src=\"path/to/image.jpg\" alt=\"Image description\" position=\"bottom\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Image\",\n        src=src,\n        alt=alt,\n        base64=base64,\n        type=type,\n        position=position,\n        maxWidth=maxWidth,\n        maxHeight=maxHeight,\n        resize=resize,\n        syntax=syntax,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.inline","title":"<code>inline(syntax=None, className=None, speaker=None, writerOptions=None, whiteSpace=None, charLimit=None, tokenLimit=None, priority=None, **kwargs)</code>","text":"<p>Inline (<code>&lt;span&gt;</code>) is a container for inline content. When used with markup syntaxes, it wraps text in an inline style, without any preceding or following blank characters. In serializer syntaxes, it's treated as a generic value. Inline elements are not designed to be used alone (especially in serializer syntaxes). One might notice problematic renderings (e.g., speaker not applied) when using it alone.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[str]</code> <p>The syntax of the content. Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"xml\"</code>, <code>\"text\"</code>.</p> <code>None</code> <code>className</code> <code>Optional[str]</code> <p>A class name for quickly styling the current block with stylesheets.</p> <code>None</code> <code>speaker</code> <code>Optional[str]</code> <p>The speaker of the content. By default, it's determined by the context and the content. Choices: <code>\"human\"</code>, <code>\"ai\"</code>, <code>\"system\"</code>.</p> <code>None</code> <code>writerOptions</code> <code>Optional[Any]</code> <p>Experimental.. Optional JSON string to customize the format of markdown headers, JSON indents, etc.</p> <code>None</code> <code>whiteSpace</code> <code>Optional[str]</code> <p>Experimental. Controls how whitespace is handled in text content.   <code>'pre'</code> (default when <code>syntax</code> is <code>text</code>): Preserves all whitespace as-is;   <code>'filter'</code> (default when <code>syntax</code> is not <code>text</code>): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;   <code>'trim'</code>: Trims whitespace from the beginning and end. Choices: <code>\"pre\"</code>, <code>\"filter\"</code>, <code>\"trim\"</code>.</p> <code>None</code> <code>charLimit</code> <code>Optional[float]</code> <p>Experimental. Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</p> <code>None</code> <code>tokenLimit</code> <code>Optional[float]</code> <p>Experimental. Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.</p> <code>None</code> <code>priority</code> <code>Optional[float]</code> <p>Experimental. Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.</p> <code>None</code> Example <pre><code>&lt;p&gt;I'm listening to &lt;span&gt;music&lt;/span&gt; right now.&lt;/p&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def inline(\n    self,\n    syntax: Optional[str] = None,\n    className: Optional[str] = None,\n    speaker: Optional[str] = None,\n    writerOptions: Optional[Any] = None,\n    whiteSpace: Optional[str] = None,\n    charLimit: Optional[float] = None,\n    tokenLimit: Optional[float] = None,\n    priority: Optional[float] = None,\n    **kwargs: Any,\n):\n    \"\"\"Inline (`&lt;span&gt;`) is a container for inline content.\n    When used with markup syntaxes, it wraps text in an inline style, without any preceding or following blank characters.\n    In serializer syntaxes, it's treated as a generic value.\n    Inline elements are not designed to be used alone (especially in serializer syntaxes).\n    One might notice problematic renderings (e.g., speaker not applied) when using it alone.\n\n    Args:\n        syntax (Optional[str]): The syntax of the content. Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"xml\"`, `\"text\"`.\n        className (Optional[str]): A class name for quickly styling the current block with stylesheets.\n        speaker (Optional[str]): The speaker of the content. By default, it's determined by the context and the content. Choices: `\"human\"`, `\"ai\"`, `\"system\"`.\n        writerOptions (Optional[Any]): **Experimental.**. Optional JSON string to customize the format of markdown headers, JSON indents, etc.\n        whiteSpace (Optional[str]): **Experimental.** Controls how whitespace is handled in text content.\n              `'pre'` (default when `syntax` is `text`): Preserves all whitespace as-is;\n              `'filter'` (default when `syntax` is not `text`): Removes leading/trailing whitespace and normalizes internal whitespace in the gaps;\n              `'trim'`: Trims whitespace from the beginning and end. Choices: `\"pre\"`, `\"filter\"`, `\"trim\"`.\n        charLimit (Optional[float]): **Experimental.** Soft character limit before truncation is applied. Content exceeding this limit will be truncated with a marker.\n        tokenLimit (Optional[float]): **Experimental.** Soft token limit before truncation is applied. Content exceeding this limit will be truncated with a marker.\n        priority (Optional[float]): **Experimental.** Priority used when truncating globally. Lower numbers are dropped first when content needs to be reduced to fit limits.\n\n    Example:\n        ```xml\n        &lt;p&gt;I'm listening to &lt;span&gt;music&lt;/span&gt; right now.&lt;/p&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Inline\",\n        syntax=syntax,\n        className=className,\n        speaker=speaker,\n        writerOptions=writerOptions,\n        whiteSpace=whiteSpace,\n        charLimit=charLimit,\n        tokenLimit=tokenLimit,\n        priority=priority,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.introducer","title":"<code>introducer(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>Introducer is a paragraph before a long paragraph (usually a list of examples, steps, or instructions). It serves as a context introducing what is expected to follow.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the introducer paragraph. Default is <code>Introducer</code>. Default is <code>\"Introducer\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>introducer</code>. Default is <code>\"introducer\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>hidden</code>. Default is <code>\"hidden\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;introducer&gt;Here are some examples.&lt;/introducer&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def introducer(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Introducer is a paragraph before a long paragraph (usually a list of examples, steps, or instructions).\n    It serves as a context introducing what is expected to follow.\n\n    Args:\n        caption (Optional[str]): The title or label for the introducer paragraph. Default is `Introducer`. Default is `\"Introducer\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `introducer`. Default is `\"introducer\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `hidden`. Default is `\"hidden\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;introducer&gt;Here are some examples.&lt;/introducer&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Introducer\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.italic","title":"<code>italic(**kwargs)</code>","text":"<p>Italic (<code>&lt;i&gt;</code>) emphasizes text in an italic style when using markup syntaxes.</p> Example <pre><code>Your &lt;i&gt;italicized&lt;/i&gt; text.\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def italic(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Italic (`&lt;i&gt;`) emphasizes text in an italic style when using markup syntaxes.\n\n\n    Example:\n        ```xml\n        Your &lt;i&gt;italicized&lt;/i&gt; text.\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Italic\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.list","title":"<code>list(listStyle=None, **kwargs)</code>","text":"<p>List (<code>&lt;list&gt;</code>) is a container for multiple ListItem (<code>&lt;item&gt;</code>) elements. When used with markup syntaxes, a bullet or numbering is added.</p> <p>Parameters:</p> Name Type Description Default <code>listStyle</code> <code>Optional[str]</code> <p>The style for the list marker, such as dash or star. Default is <code>dash</code>. Default is <code>\"dash\"</code>. Choices: <code>\"star\"</code>, <code>\"dash\"</code>, <code>\"plus\"</code>, <code>\"decimal\"</code>, <code>\"latin\"</code>.</p> <code>None</code> Example <pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def list(\n    self,\n    listStyle: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"List (`&lt;list&gt;`) is a container for multiple ListItem (`&lt;item&gt;`) elements.\n    When used with markup syntaxes, a bullet or numbering is added.\n\n    Args:\n        listStyle (Optional[str]): The style for the list marker, such as dash or star. Default is `dash`. Default is `\"dash\"`. Choices: `\"star\"`, `\"dash\"`, `\"plus\"`, `\"decimal\"`, `\"latin\"`.\n\n    Example:\n        ```xml\n        &lt;list listStyle=\"decimal\"&gt;\n          &lt;item&gt;Item 1&lt;/item&gt;\n          &lt;item&gt;Item 2&lt;/item&gt;\n        &lt;/list&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"List\",\n        listStyle=listStyle,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.list_item","title":"<code>list_item(**kwargs)</code>","text":"<p>ListItem (<code>&lt;item&gt;</code>) is an item within a List component. In markup mode, it is rendered with the specified bullet or numbering style.</p> Example <pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item blankLine=\"true\"&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def list_item(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"ListItem (`&lt;item&gt;`) is an item within a List component.\n    In markup mode, it is rendered with the specified bullet or numbering style.\n\n\n    Example:\n        ```xml\n        &lt;list listStyle=\"decimal\"&gt;\n          &lt;item blankLine=\"true\"&gt;Item 1&lt;/item&gt;\n          &lt;item&gt;Item 2&lt;/item&gt;\n        &lt;/list&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"ListItem\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.message_content","title":"<code>message_content(content=None, **kwargs)</code>","text":"<p>Display a message content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Optional[Any]</code> <p>The content of the message. It can be a string, or an array of strings and multimedia content.</p> <code>None</code> Example <pre><code>&lt;msg-content content=\"What is the capital of France?\" /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def message_content(\n    self,\n    content: Optional[Any] = None,\n    **kwargs: Any,\n):\n    \"\"\"Display a message content.\n\n    Args:\n        content (Optional[Any]): The content of the message. It can be a string, or an array of strings and multimedia content.\n\n    Example:\n        ```xml\n        &lt;msg-content content=\"What is the capital of France?\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"MessageContent\",\n        content=content,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.newline","title":"<code>newline(newLineCount=None, **kwargs)</code>","text":"<p>Newline (<code>&lt;br&gt;</code>) explicitly adds a line break, primarily in markup syntaxes. In serializer syntaxes, it's ignored.</p> <p>Parameters:</p> Name Type Description Default <code>newLineCount</code> <code>Optional[float]</code> <p>The number of linebreaks to add.</p> <code>None</code> Example <pre><code>&lt;br /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def newline(\n    self,\n    newLineCount: Optional[float] = None,\n    **kwargs: Any,\n):\n    \"\"\"Newline (`&lt;br&gt;`) explicitly adds a line break, primarily in markup syntaxes.\n    In serializer syntaxes, it's ignored.\n\n    Args:\n        newLineCount (Optional[float]): The number of linebreaks to add.\n\n    Example:\n        ```xml\n        &lt;br /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Newline\",\n        newLineCount=newLineCount,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.object","title":"<code>object(syntax=None, data=None, **kwargs)</code>","text":"<p>DataObject (<code>&lt;obj&gt;</code>, <code>&lt;object&gt;</code>, <code>&lt;dataObj&gt;</code>) displays external data or object content. When in serialize mode, it's serialized according to the given serializer.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[str]</code> <p>The syntax or serializer of the content. Default is <code>json</code>. Default is <code>\"json\"</code>. Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"xml\"</code>.</p> <code>None</code> <code>data</code> <code>Optional[Any]</code> <p>The data object to render.</p> <code>None</code> Example <pre><code>&lt;DataObject syntax=\"json\" data=\"{ key: 'value' }\" /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def object(\n    self,\n    syntax: Optional[str] = None,\n    data: Optional[Any] = None,\n    **kwargs: Any,\n):\n    \"\"\"DataObject (`&lt;obj&gt;`, `&lt;object&gt;`, `&lt;dataObj&gt;`) displays external data or object content.\n    When in serialize mode, it's serialized according to the given serializer.\n\n    Args:\n        syntax (Optional[str]): The syntax or serializer of the content. Default is `json`. Default is `\"json\"`. Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"xml\"`.\n        data (Optional[Any]): The data object to render.\n\n    Example:\n        ```xml\n        &lt;DataObject syntax=\"json\" data=\"{ key: 'value' }\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Object\",\n        syntax=syntax,\n        data=data,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.output_format","title":"<code>output_format(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>Output format deals with the format in which the model should provide the output. It can be a specific format such as JSON, XML, or CSV, or a general format such as a story, a diagram or steps of instructions. Please refrain from specifying too complex formats that the model may not be able to generate, such as a PDF file or a video.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the output format paragraph. Default is <code>Output Format</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>outputFormat</code>. Default is <code>\"outputFormat\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>header</code>. Default is <code>\"header\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;output-format&gt;Respond with a JSON without additional characters or punctuations.&lt;/output-format&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def output_format(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Output format deals with the format in which the model should provide the output.\n    It can be a specific format such as JSON, XML, or CSV, or a general format such as a story,\n    a diagram or steps of instructions.\n    Please refrain from specifying too complex formats that the model may not be able to generate,\n    such as a PDF file or a video.\n\n    Args:\n        caption (Optional[str]): The title or label for the output format paragraph. Default is `Output Format`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `outputFormat`. Default is `\"outputFormat\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `header`. Default is `\"header\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;output-format&gt;Respond with a JSON without additional characters or punctuations.&lt;/output-format&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"OutputFormat\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.paragraph","title":"<code>paragraph(blankLine=None, **kwargs)</code>","text":"<p>Paragraph (<code>&lt;p&gt;</code>) is a standalone section preceded by and followed by two blank lines in markup syntaxes. It's mostly used for text contents.</p> <p>Parameters:</p> Name Type Description Default <code>blankLine</code> <code>Optional[bool]</code> <p>Whether to add one more blank line (2 in total) before and after the paragraph.</p> <code>None</code> Example <pre><code>&lt;p&gt;Contents of the paragraph.&lt;/p&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def paragraph(\n    self,\n    blankLine: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"Paragraph (`&lt;p&gt;`) is a standalone section preceded by and followed by two blank lines in markup syntaxes.\n    It's mostly used for text contents.\n\n    Args:\n        blankLine (Optional[bool]): Whether to add one more blank line (2 in total) before and after the paragraph.\n\n    Example:\n        ```xml\n        &lt;p&gt;Contents of the paragraph.&lt;/p&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Paragraph\",\n        blankLine=blankLine,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.question","title":"<code>question(questionCaption=None, answerCaption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>Question (<code>&lt;qa&gt;</code>) is actually a combination of a question and a prompt for the answer. It's usually used at the end of a prompt to ask a question. The question is followed by a prompt for answer (e.g., <code>Answer:</code>) to guide the model to respond.</p> <p>Parameters:</p> Name Type Description Default <code>questionCaption</code> <code>Optional[str]</code> <p>The title or label for the question paragraph. Default is <code>Question</code>. Default is <code>\"Question\"</code>.</p> <code>None</code> <code>answerCaption</code> <code>Optional[str]</code> <p>The title or label for the answer paragraph. Default is <code>Answer</code>. Default is <code>\"Answer\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>question</code>. Default is <code>\"question\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>bold</code>. Default is <code>\"bold\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;qa&gt;What is the capital of France?&lt;/qa&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def question(\n    self,\n    questionCaption: Optional[str] = None,\n    answerCaption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Question (`&lt;qa&gt;`) is actually a combination of a question and a prompt for the answer.\n    It's usually used at the end of a prompt to ask a question.\n    The question is followed by a prompt for answer (e.g., `Answer:`) to guide the model to respond.\n\n    Args:\n        questionCaption (Optional[str]): The title or label for the question paragraph. Default is `Question`. Default is `\"Question\"`.\n        answerCaption (Optional[str]): The title or label for the answer paragraph. Default is `Answer`. Default is `\"Answer\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `question`. Default is `\"question\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `bold`. Default is `\"bold\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;qa&gt;What is the capital of France?&lt;/qa&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Question\",\n        questionCaption=questionCaption,\n        answerCaption=answerCaption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.render","title":"<code>render(chat=True, context=None, stylesheet=None)</code>","text":"<p>Renders the final XML. Raises error if tags are still open.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def render(self, chat: bool = True, context=None, stylesheet=None) -&gt; list | dict | str:\n    \"\"\"\n    Renders the final XML. Raises error if tags are still open.\n    \"\"\"\n    if self.current_parent_stack:\n        raise ValueError(\n            f\"Cannot render: Open tags remaining: {[el.tag for el in self.current_parent_stack]}. \"\n            \"Ensure all 'with' blocks for tags are properly exited.\"\n        )\n    # poml likely expects a compact, single XML string.\n    final_xml = self._generate_xml_string(pretty=False)\n    return poml(final_xml, context=context, stylesheet=stylesheet, chat=chat)\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.role","title":"<code>role(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>Specifies the role you want the language model to assume when responding. Defining a role provides the model with a perspective or context, such as a scientist, poet, child, or any other persona you choose.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the role paragraph. Default is <code>Role</code>. Default is <code>\"Role\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>role</code>. Default is <code>\"role\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>header</code>. Default is <code>\"header\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;role&gt;You are a data scientist.&lt;/role&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def role(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Specifies the role you want the language model to assume when responding.\n    Defining a role provides the model with a perspective or context,\n    such as a scientist, poet, child, or any other persona you choose.\n\n    Args:\n        caption (Optional[str]): The title or label for the role paragraph. Default is `Role`. Default is `\"Role\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `role`. Default is `\"role\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `header`. Default is `\"header\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;role&gt;You are a data scientist.&lt;/role&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Role\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.stepwise_instructions","title":"<code>stepwise_instructions(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>StepwiseInstructions that elaborates the task by providing a list of steps or instructions. Each step should be concise and clear, and the list should be easy to follow.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the stepwise instructions paragraph. Default is <code>Stepwise Instructions</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>stepwiseInstructions</code>. Default is <code>\"stepwiseInstructions\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>header</code>. Default is <code>\"header\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;stepwise-instructions&gt;\n  &lt;list&gt;\n    &lt;item&gt;Interpret and rewrite user's query.&lt;/item&gt;\n    &lt;item&gt;Think of a plan to solve the query.&lt;/item&gt;\n    &lt;item&gt;Generate a response based on the plan.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/stepwise-instructions&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def stepwise_instructions(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"StepwiseInstructions that elaborates the task by providing a list of steps or instructions.\n    Each step should be concise and clear, and the list should be easy to follow.\n\n    Args:\n        caption (Optional[str]): The title or label for the stepwise instructions paragraph. Default is `Stepwise Instructions`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `stepwiseInstructions`. Default is `\"stepwiseInstructions\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `header`. Default is `\"header\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;stepwise-instructions&gt;\n          &lt;list&gt;\n            &lt;item&gt;Interpret and rewrite user's query.&lt;/item&gt;\n            &lt;item&gt;Think of a plan to solve the query.&lt;/item&gt;\n            &lt;item&gt;Generate a response based on the plan.&lt;/item&gt;\n          &lt;/list&gt;\n        &lt;/stepwise-instructions&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"StepwiseInstructions\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.strikethrough","title":"<code>strikethrough(**kwargs)</code>","text":"<p>Strikethrough (<code>&lt;s&gt;</code>, <code>&lt;strike&gt;</code>) indicates removed or invalid text in markup syntaxes.</p> Example <pre><code>&lt;s&gt;This messages is removed.&lt;/s&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def strikethrough(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Strikethrough (`&lt;s&gt;`, `&lt;strike&gt;`) indicates removed or invalid text in markup syntaxes.\n\n\n    Example:\n        ```xml\n        &lt;s&gt;This messages is removed.&lt;/s&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Strikethrough\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.sub_content","title":"<code>sub_content(**kwargs)</code>","text":"<p>SubContent (<code>&lt;section&gt;</code>) renders nested content, often following a header. The headers within the section will be automatically adjusted to a lower level.</p> Example <pre><code>&lt;h&gt;Section Title&lt;/h&gt;\n&lt;section&gt;\n  &lt;h&gt;Sub-section Title&lt;/h&gt;  &lt;!-- Nested header --&gt;\n  &lt;p&gt;Sub-section details&lt;/p&gt;\n&lt;/section&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def sub_content(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"SubContent (`&lt;section&gt;`) renders nested content, often following a header.\n    The headers within the section will be automatically adjusted to a lower level.\n\n\n    Example:\n        ```xml\n        &lt;h&gt;Section Title&lt;/h&gt;\n        &lt;section&gt;\n          &lt;h&gt;Sub-section Title&lt;/h&gt;  &lt;!-- Nested header --&gt;\n          &lt;p&gt;Sub-section details&lt;/p&gt;\n        &lt;/section&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"SubContent\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.system_message","title":"<code>system_message(**kwargs)</code>","text":"<p>Wrap the contents in a system message.</p> Example <pre><code>&lt;system-msg&gt;Answer concisely.&lt;/system-msg&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def system_message(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Wrap the contents in a system message.\n\n\n    Example:\n        ```xml\n        &lt;system-msg&gt;Answer concisely.&lt;/system-msg&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"SystemMessage\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.table","title":"<code>table(syntax=None, records=None, columns=None, src=None, parser=None, selectedColumns=None, selectedRecords=None, maxRecords=None, maxColumns=None, **kwargs)</code>","text":"<p>Displaying a table with records and columns.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[str]</code> <p>The output syntax of the content. Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"text\"</code>, <code>\"csv\"</code>, <code>\"tsv\"</code>, <code>\"xml\"</code>.</p> <code>None</code> <code>records</code> <code>Optional[Any]</code> <p>A list, each element is an object / dictionary / list of elements. The keys are the fields and the values are the data in cells.</p> <code>None</code> <code>columns</code> <code>Optional[Any]</code> <p>A list of column definitions. Each column definition is an object with keys \"field\", \"header\", and \"description\". The field is the key in the record object, the header is displayed in the top row, and the description is meant to be an explanation. Columns are optional. If not provided, the columns are inferred from the records.</p> <code>None</code> <code>src</code> <code>Optional[str]</code> <p>The source file to read the data from. This must be provided if records is not provided.</p> <code>None</code> <code>parser</code> <code>Optional[str]</code> <p>The parser to use for reading the data. If not provided, it will be inferred from the file extension. Choices: <code>\"auto\"</code>, <code>\"csv\"</code>, <code>\"tsv\"</code>, <code>\"excel\"</code>, <code>\"json\"</code>, <code>\"jsonl\"</code>.</p> <code>None</code> <code>selectedColumns</code> <code>Optional[Any]</code> <p>The selected columns to display. If not provided, all columns will be displayed. It should be an array of column field names, e.g. <code>[\"name\", \"age\"]</code>; or a string like <code>2:4</code> to select columns 2 (inclusive) to 4 (exclusive). There is a special column name called <code>index</code> which is the enumeration of the records starting from 0. You can also use a special value called <code>+index</code> to add the index column to the original table.</p> <code>None</code> <code>selectedRecords</code> <code>Optional[Any]</code> <p>The selected records to display. If not provided, all records will be displayed. It should be an array of record indices, e.g. <code>[0, 1]</code>; or a string like <code>2:4</code> to select records 2 (inclusive) to 4 (exclusive).</p> <code>None</code> <code>maxRecords</code> <code>Optional[int]</code> <p>The maximum number of records to display. If not provided, all records will be displayed.</p> <code>None</code> <code>maxColumns</code> <code>Optional[int]</code> <p>The maximum number of columns to display. If not provided, all columns will be displayed.</p> <code>None</code> Example <pre><code>&lt;table records=\"{{[{ name: 'Alice', age: 20 }, { name: 'Bob', age: 30 }]}}\" /&gt;\n</code></pre> <p>To import an excel file, and display the first 10 records in csv syntax:</p> <pre><code>&lt;table src=\"data.xlsx\" parser=\"excel\" maxRecords=\"10\" syntax=\"csv\" /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def table(\n    self,\n    syntax: Optional[str] = None,\n    records: Optional[Any] = None,\n    columns: Optional[Any] = None,\n    src: Optional[str] = None,\n    parser: Optional[str] = None,\n    selectedColumns: Optional[Any] = None,\n    selectedRecords: Optional[Any] = None,\n    maxRecords: Optional[int] = None,\n    maxColumns: Optional[int] = None,\n    **kwargs: Any,\n):\n    \"\"\"Displaying a table with records and columns.\n\n    Args:\n        syntax (Optional[str]): The output syntax of the content. Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"text\"`, `\"csv\"`, `\"tsv\"`, `\"xml\"`.\n        records (Optional[Any]): A list, each element is an object / dictionary / list of elements. The keys are the fields and the values are the data in cells.\n        columns (Optional[Any]): A list of column definitions. Each column definition is an object with keys \"field\", \"header\", and \"description\".\n            The field is the key in the record object, the header is displayed in the top row, and the description is meant to be an explanation.\n            Columns are optional. If not provided, the columns are inferred from the records.\n        src (Optional[str]): The source file to read the data from. This must be provided if records is not provided.\n        parser (Optional[str]): The parser to use for reading the data. If not provided, it will be inferred from the file extension. Choices: `\"auto\"`, `\"csv\"`, `\"tsv\"`, `\"excel\"`, `\"json\"`, `\"jsonl\"`.\n        selectedColumns (Optional[Any]): The selected columns to display. If not provided, all columns will be displayed.\n            It should be an array of column field names, e.g. `[\"name\", \"age\"]`; or a string like `2:4` to select columns 2 (inclusive) to 4 (exclusive).\n            There is a special column name called `index` which is the enumeration of the records starting from 0.\n            You can also use a special value called `+index` to add the index column to the original table.\n        selectedRecords (Optional[Any]): The selected records to display. If not provided, all records will be displayed.\n            It should be an array of record indices, e.g. `[0, 1]`; or a string like `2:4` to select records 2 (inclusive) to 4 (exclusive).\n        maxRecords (Optional[int]): The maximum number of records to display. If not provided, all records will be displayed.\n        maxColumns (Optional[int]): The maximum number of columns to display. If not provided, all columns will be displayed.\n\n    Example:\n        ```xml\n        &lt;table records=\"{{[{ name: 'Alice', age: 20 }, { name: 'Bob', age: 30 }]}}\" /&gt;\n        ```\n\n        To import an excel file, and display the first 10 records in csv syntax:\n\n        ```xml\n        &lt;table src=\"data.xlsx\" parser=\"excel\" maxRecords=\"10\" syntax=\"csv\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Table\",\n        syntax=syntax,\n        records=records,\n        columns=columns,\n        src=src,\n        parser=parser,\n        selectedColumns=selectedColumns,\n        selectedRecords=selectedRecords,\n        maxRecords=maxRecords,\n        maxColumns=maxColumns,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.task","title":"<code>task(caption=None, captionSerialized=None, captionStyle=None, captionTextTransform=None, captionEnding=None, **kwargs)</code>","text":"<p>Task represents the action you want the language model to perform. It is a directive or instruction that you want the model to follow. Task is usually not long, but rather a concise and clear statement. Users can also include a list of steps or instructions to complete the task.</p> <p>Parameters:</p> Name Type Description Default <code>caption</code> <code>Optional[str]</code> <p>The title or label for the task paragraph. Default is <code>Task</code>. Default is <code>\"Task\"</code>.</p> <code>None</code> <code>captionSerialized</code> <code>Optional[str]</code> <p>The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>task</code>. Default is <code>\"task\"</code>.</p> <code>None</code> <code>captionStyle</code> <code>Optional[str]</code> <p>Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>header</code>. Default is <code>\"header\"</code>. Choices: <code>\"header\"</code>, <code>\"bold\"</code>, <code>\"plain\"</code>, <code>\"hidden\"</code>.</p> <code>None</code> <code>captionTextTransform</code> <code>Optional[str]</code> <p>Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>. Default is <code>\"none\"</code>. Choices: <code>\"upper\"</code>, <code>\"level\"</code>, <code>\"capitalize\"</code>, <code>\"none\"</code>.</p> <code>None</code> <code>captionEnding</code> <code>Optional[str]</code> <p>A caption can ends with a colon, a newline or simply nothing. If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise. Choices: <code>\"colon\"</code>, <code>\"newline\"</code>, <code>\"colon-newline\"</code>, <code>\"none\"</code>.</p> <code>None</code> Example <pre><code>&lt;task&gt;Cook a recipe on how to prepare a beef dish.&lt;/task&gt;\n</code></pre> <p>When including a list of steps: <pre><code>&lt;task&gt;\n  Planning a schedule for a travel.\n  &lt;list&gt;\n    &lt;item&gt;Decide on the destination and plan the duration.&lt;/item&gt;\n    &lt;item&gt;Find useful information about the destination.&lt;/item&gt;\n    &lt;item&gt;Write down the schedule for each day.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/task&gt;\n</code></pre></p> Source code in <code>python/poml/_tags.py</code> <pre><code>def task(\n    self,\n    caption: Optional[str] = None,\n    captionSerialized: Optional[str] = None,\n    captionStyle: Optional[str] = None,\n    captionTextTransform: Optional[str] = None,\n    captionEnding: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Task represents the action you want the language model to perform.\n    It is a directive or instruction that you want the model to follow.\n    Task is usually not long, but rather a concise and clear statement.\n    Users can also include a list of steps or instructions to complete the task.\n\n    Args:\n        caption (Optional[str]): The title or label for the task paragraph. Default is `Task`. Default is `\"Task\"`.\n        captionSerialized (Optional[str]): The serialized version of the caption when using \"serializer\" syntaxes. Default is `task`. Default is `\"task\"`.\n        captionStyle (Optional[str]): Determines the style of the caption,\n            applicable only for \"markup\" syntaxes. Default is `header`. Default is `\"header\"`. Choices: `\"header\"`, `\"bold\"`, `\"plain\"`, `\"hidden\"`.\n        captionTextTransform (Optional[str]): Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is `none`. Default is `\"none\"`. Choices: `\"upper\"`, `\"level\"`, `\"capitalize\"`, `\"none\"`.\n        captionEnding (Optional[str]): A caption can ends with a colon, a newline or simply nothing.\n            If not specified, it defaults to `colon` for `bold` or `plain` captionStyle, and `none` otherwise. Choices: `\"colon\"`, `\"newline\"`, `\"colon-newline\"`, `\"none\"`.\n\n    Example:\n        ```xml\n        &lt;task&gt;Cook a recipe on how to prepare a beef dish.&lt;/task&gt;\n        ```\n\n        When including a list of steps:\n        ```xml\n        &lt;task&gt;\n          Planning a schedule for a travel.\n          &lt;list&gt;\n            &lt;item&gt;Decide on the destination and plan the duration.&lt;/item&gt;\n            &lt;item&gt;Find useful information about the destination.&lt;/item&gt;\n            &lt;item&gt;Write down the schedule for each day.&lt;/item&gt;\n          &lt;/list&gt;\n        &lt;/task&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Task\",\n        caption=caption,\n        captionSerialized=captionSerialized,\n        captionStyle=captionStyle,\n        captionTextTransform=captionTextTransform,\n        captionEnding=captionEnding,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.text","title":"<code>text(content)</code>","text":"<p>Adds text content to the currently open XML element.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def text(self, content: str):\n    \"\"\"Adds text content to the currently open XML element.\"\"\"\n    if not self.current_parent_stack:\n        raise ValueError(\"Cannot add text: No tag is currently open. Use a 'with' block for a tag.\")\n\n    current_el = self.current_parent_stack[-1]\n    # ElementTree handles XML escaping for text content automatically\n    content_str = str(content)\n\n    # Append text correctly for mixed content (text between child elements)\n    if len(current_el) &gt; 0:  # If current element has children\n        last_child = current_el[-1]\n        if last_child.tail is None:\n            last_child.tail = content_str\n        else:\n            last_child.tail += content_str\n    else:  # No children yet in the current element, add to its primary text\n        if current_el.text is None:\n            current_el.text = content_str\n        else:\n            current_el.text += content_str\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.tool_request","title":"<code>tool_request(id=None, name=None, parameters=None, speaker=None, **kwargs)</code>","text":"<p>ToolRequest represents an AI-generated tool request with parameters. Used to display tool calls made by AI models.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>Optional[str]</code> <p>Tool request ID</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Tool name</p> <code>None</code> <code>parameters</code> <code>Optional[Any]</code> <p>Tool input parameters</p> <code>None</code> <code>speaker</code> <code>Optional[str]</code> <p>The speaker of the content. Default is <code>ai</code>. Default is <code>\"ai\"</code>. Choices: <code>\"human\"</code>, <code>\"ai\"</code>, <code>\"system\"</code>.</p> <code>None</code> Example <pre><code>&lt;ToolRequest id=\"123\" name=\"search\" parameters={{ query: \"hello\" }} /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def tool_request(\n    self,\n    id: Optional[str] = None,\n    name: Optional[str] = None,\n    parameters: Optional[Any] = None,\n    speaker: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"ToolRequest represents an AI-generated tool request with parameters.\n    Used to display tool calls made by AI models.\n\n    Args:\n        id (Optional[str]): Tool request ID\n        name (Optional[str]): Tool name\n        parameters (Optional[Any]): Tool input parameters\n        speaker (Optional[str]): The speaker of the content. Default is `ai`. Default is `\"ai\"`. Choices: `\"human\"`, `\"ai\"`, `\"system\"`.\n\n    Example:\n        ```xml\n        &lt;ToolRequest id=\"123\" name=\"search\" parameters={{ query: \"hello\" }} /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"ToolRequest\",\n        id=id,\n        name=name,\n        parameters=parameters,\n        speaker=speaker,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.tool_response","title":"<code>tool_response(syntax=None, id=None, name=None, speaker=None, **kwargs)</code>","text":"<p>ToolResponse represents the result of a tool execution. Used to display tool execution results with rich content.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[str]</code> <p>The syntax of ToolResponse is special.   It is always <code>multimedia</code> for itself. The syntax is used to render the content inside.   If not specified, it will inherit from the parent context. Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"xml\"</code>, <code>\"text\"</code>.</p> <code>None</code> <code>id</code> <code>Optional[str]</code> <p>Tool call ID to respond to</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Tool name</p> <code>None</code> <code>speaker</code> <code>Optional[str]</code> <p>The speaker of the content. Default is <code>tool</code>. Default is <code>\"tool\"</code>. Choices: <code>\"human\"</code>, <code>\"ai\"</code>, <code>\"system\"</code>, <code>\"tool\"</code>.</p> <code>None</code> Example <pre><code>&lt;ToolResponse id=\"123\" name=\"search\"&gt;\n &lt;Paragraph&gt;Search results for \"hello\":&lt;/Paragraph&gt;\n &lt;List&gt;\n  &lt;ListItem&gt;Result 1&lt;/ListItem&gt;\n  &lt;ListItem&gt;Result 2&lt;/ListItem&gt;\n &lt;/List&gt;\n&lt;/ToolResponse&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def tool_response(\n    self,\n    syntax: Optional[str] = None,\n    id: Optional[str] = None,\n    name: Optional[str] = None,\n    speaker: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"ToolResponse represents the result of a tool execution.\n    Used to display tool execution results with rich content.\n\n    Args:\n        syntax (Optional[str]): The syntax of ToolResponse is special.\n              It is always `multimedia` for itself. The syntax is used to render the content inside.\n              If not specified, it will inherit from the parent context. Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"xml\"`, `\"text\"`.\n        id (Optional[str]): Tool call ID to respond to\n        name (Optional[str]): Tool name\n        speaker (Optional[str]): The speaker of the content. Default is `tool`. Default is `\"tool\"`. Choices: `\"human\"`, `\"ai\"`, `\"system\"`, `\"tool\"`.\n\n    Example:\n        ```xml\n        &lt;ToolResponse id=\"123\" name=\"search\"&gt;\n         &lt;Paragraph&gt;Search results for \"hello\":&lt;/Paragraph&gt;\n         &lt;List&gt;\n          &lt;ListItem&gt;Result 1&lt;/ListItem&gt;\n          &lt;ListItem&gt;Result 2&lt;/ListItem&gt;\n         &lt;/List&gt;\n        &lt;/ToolResponse&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"ToolResponse\",\n        syntax=syntax,\n        id=id,\n        name=name,\n        speaker=speaker,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.tree","title":"<code>tree(syntax=None, items=None, showContent=None, **kwargs)</code>","text":"<p>Renders a tree structure in various formats.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[str]</code> <p>The output syntax to use for rendering the tree Choices: <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"text\"</code>, <code>\"xml\"</code>.</p> <code>None</code> <code>items</code> <code>Optional[List[Any]]</code> <p>Array of tree items to render</p> <code>None</code> <code>showContent</code> <code>Optional[bool]</code> <p>Whether to show content values of tree items</p> <code>None</code> Example <pre><code>&lt;Tree items={treeData} syntax=\"markdown\" showContent={true} /&gt;\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def tree(\n    self,\n    syntax: Optional[str] = None,\n    items: Optional[List[Any]] = None,\n    showContent: Optional[bool] = None,\n    **kwargs: Any,\n):\n    \"\"\"Renders a tree structure in various formats.\n\n    Args:\n        syntax (Optional[str]): The output syntax to use for rendering the tree Choices: `\"markdown\"`, `\"html\"`, `\"json\"`, `\"yaml\"`, `\"text\"`, `\"xml\"`.\n        items (Optional[List[Any]]): Array of tree items to render\n        showContent (Optional[bool]): Whether to show content values of tree items\n\n    Example:\n        ```xml\n        &lt;Tree items={treeData} syntax=\"markdown\" showContent={true} /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Tree\",\n        syntax=syntax,\n        items=items,\n        showContent=showContent,\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.underline","title":"<code>underline(**kwargs)</code>","text":"<p>Underline (<code>&lt;u&gt;</code>) draws a line beneath text in markup syntaxes.</p> Example <pre><code>This text is &lt;u&gt;underlined&lt;/u&gt;.\n</code></pre> Source code in <code>python/poml/_tags.py</code> <pre><code>def underline(\n    self,\n    **kwargs: Any,\n):\n    \"\"\"Underline (`&lt;u&gt;`) draws a line beneath text in markup syntaxes.\n\n\n    Example:\n        ```xml\n        This text is &lt;u&gt;underlined&lt;/u&gt;.\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Underline\",\n        **kwargs,\n    )\n</code></pre>"},{"location":"python/reference/prompt/#poml.prompt.Prompt.webpage","title":"<code>webpage(url=None, src=None, buffer=None, base64=None, extractText=None, selector=None, **kwargs)</code>","text":"<p>Displays content from a webpage.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>Optional[str]</code> <p>The URL of the webpage to fetch and display.</p> <code>None</code> <code>src</code> <code>Optional[str]</code> <p>Local file path to an HTML file to display.</p> <code>None</code> <code>buffer</code> <code>Optional[bytes]</code> <p>HTML content as string or buffer.</p> <code>None</code> <code>base64</code> <code>Optional[str]</code> <p>Base64 encoded HTML content.</p> <code>None</code> <code>extractText</code> <code>Optional[bool]</code> <p>Whether to extract plain text content (true) or convert HTML to structured POML (false). Default is false.</p> <code>None</code> <code>selector</code> <code>Optional[str]</code> <p>CSS selector to extract specific content from the page (e.g., \"article\", \".content\", \"#main\"). Default is \"body\".</p> <code>None</code> Example <p>Display content from a URL: <pre><code>&lt;webpage url=\"https://example.com\" /&gt;\n</code></pre></p> <p>Extract only specific content using a selector: <pre><code>&lt;webpage url=\"https://example.com\" selector=\"main article\" /&gt;\n</code></pre></p> <p>Convert HTML to structured POML components: <pre><code>&lt;webpage url=\"https://example.com\" extractText=\"false\" /&gt;\n</code></pre></p> Source code in <code>python/poml/_tags.py</code> <pre><code>def webpage(\n    self,\n    url: Optional[str] = None,\n    src: Optional[str] = None,\n    buffer: Optional[bytes] = None,\n    base64: Optional[str] = None,\n    extractText: Optional[bool] = None,\n    selector: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"Displays content from a webpage.\n\n    Args:\n        url (Optional[str]): The URL of the webpage to fetch and display.\n        src (Optional[str]): Local file path to an HTML file to display.\n        buffer (Optional[bytes]): HTML content as string or buffer.\n        base64 (Optional[str]): Base64 encoded HTML content.\n        extractText (Optional[bool]): Whether to extract plain text content (true) or convert HTML to structured POML (false). Default is false.\n        selector (Optional[str]): CSS selector to extract specific content from the page (e.g., \"article\", \".content\", \"#main\"). Default is \"body\".\n\n    Example:\n        Display content from a URL:\n        ```xml\n        &lt;webpage url=\"https://example.com\" /&gt;\n        ```\n\n        Extract only specific content using a selector:\n        ```xml\n        &lt;webpage url=\"https://example.com\" selector=\"main article\" /&gt;\n        ```\n\n        Convert HTML to structured POML components:\n        ```xml\n        &lt;webpage url=\"https://example.com\" extractText=\"false\" /&gt;\n        ```\n    \"\"\"\n    return self.tag(\n        tag_name=\"Webpage\",\n        url=url,\n        src=src,\n        buffer=buffer,\n        base64=base64,\n        extractText=extractText,\n        selector=selector,\n        **kwargs,\n    )\n</code></pre>"},{"location":"tutorial/expense_part1/","title":"Travel Expense Agent - Part 1: Building a Complete AI Workflow","text":"<p>Welcome to the Travel Expense Agent tutorial! This guide builds on what you learned in the quickstart and shows you how to create a sophisticated AI application that processes real business documents. We'll build an intelligent expense processing system that extracts data from receipts, validates against company policies, and generates automated responses.</p>"},{"location":"tutorial/expense_part1/#what-were-building","title":"What We're Building","text":"<p>Our travel expense agent handles the complete workflow of expense processing. When an employee submits expense documents, the system needs to extract structured data, check compliance against company policies, and respond with either approval or specific corrections needed. This is a perfect example of how POML, Python and VS Code work together to solve complex, multi-step business problems. We will focus on the Python workflow in this part, and cover debugging with the VS Code extension in part 2.</p> <p>The system processes various document formats including PDF invoices, image receipts, Excel budget tables, and Word policy documents. Each step in the workflow builds on the previous one, creating an agentic pipeline that can handle real-world business complexity.</p>"},{"location":"tutorial/expense_part1/#prerequisites-and-setup","title":"Prerequisites and Setup","text":"<p>Before we start, make sure you have Python 3.9+ installed and the POML Python SDK ready to go:</p> <pre><code>pip install poml openai pydantic\n</code></pre> <p>You'll also need an OpenAI API key configured in your environment. The beauty of POML is that it works with multiple LLM providers, so you can easily switch between OpenAI, Anthropic, or others as needed.</p>"},{"location":"tutorial/expense_part1/#understanding-pomls-python-integration","title":"Understanding POML's Python Integration","text":"<p>The POML Python SDK provides powerful integration capabilities that make it easy to build structured AI workflows. The core concept is simple: POML files act as templates that get rendered with your Python data, then sent to LLMs to get structured responses back.</p> <p>Let's start with the most essential imports:</p> <pre><code>import poml\n</code></pre>"},{"location":"tutorial/expense_part1/#step-1-extracting-structured-data-from-documents","title":"Step 1: Extracting Structured Data from Documents","text":"<p>The first step in our workflow takes raw documents and extracts structured business data. This is where POML's document handling capabilities really shine.</p> <p>First, let's define the Python data structures we want to extract. The approach is very similar to Structured Output with OpenAI:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Optional, Literal\n\nclass LineItem(BaseModel):\n    date: Optional[str] = Field(..., description=\"YYYY-MM-DD\")\n    description: str\n    category: str = Field(..., description=\"e.g., lodging, meals, ground_transportation, rental_car\")\n    amount: float\n\nclass TotalByCategory(BaseModel):\n    category: str\n    amount: float\n\nclass Document(BaseModel):\n    source: str = Field(..., description=\"Filename or doc label\")\n    doc_type: Literal[\"hotel_invoice\", \"flight_itinerary\", \"receipt\", \"other\"]\n    merchant: Optional[str] = Field(..., description=\"Merchant or provider name\")\n    currency: Optional[str] = Field(..., description=\"ISO currency code, e.g., USD, EUR\")\n    lines: List[LineItem]\n    subtotals_by_category: List[TotalByCategory]\n</code></pre> <p>Now let's write the Python code to process our documents:</p> <pre><code>from openai import OpenAI\nfrom poml.integration.pydantic import to_strict_json_schema\n\nclient = OpenAI()\n\ndocuments = []\ndocument_paths = [\n    \"assets/flight_itinerary.pdf\",\n    \"assets/hotel_invoice.pdf\",\n    \"assets/meal_receipt.png\",\n    \"assets/taxi_receipt.png\"\n]\n\nfor document_path in document_paths:\n    context = {\n        \"file\": document_path,\n        \"document_output_schema\": to_strict_json_schema(Document),\n    }\n\n    extraction_prompt = poml.poml(\n        \"expense_extract_document.poml\",\n        context,\n        format=\"openai_chat\"\n    )\n\n    response = client.chat.completions.create(\n        **extraction_prompt,\n        model=\"gpt-5\"\n    )\n\n    document = Document.model_validate_json(\n        response.choices[0].message.content\n    )\n    documents.append(document)\n</code></pre> <p>Note</p> <p>The <code>to_strict_json_schema</code> function automatically converts your Pydantic models into JSON schemas that guide the LLM's output format. You can also use <code>Document.model_json_schema()</code> from Pydantic official instead of <code>to_strict_json_schema()</code>, but it may produce a less strict schema that may result in 400 Bad Request errors from the LLM.</p> <p>Now let's create the POML file that handles the document extraction (and save it to <code>expense_extract_document.poml</code>):</p> <pre><code>&lt;poml&gt;\n  &lt;task&gt;Classify travel docs and extract with high recall. Return numbers as numbers. Compute ONLY per-document subtotals by category.&lt;/task&gt;\n\n  &lt;cp caption=\"File: {{ file }}\"&gt;\n    &lt;img if=\"{{ file.endsWith('.png') || file.endsWith('.jpg') }}\" src=\"{{ file }}\" /&gt;\n    &lt;document if=\"{{ file.endsWith('.pdf') }}\" src=\"{{ file }}\" parser=\"pdf\" /&gt;\n  &lt;/cp&gt;\n\n  &lt;hint&gt;For each file, return JSON per schema. If unknown, omit. Avoid hallucinating.&lt;/hint&gt;\n  &lt;output-schema&gt;{{ document_output_schema }}&lt;/output-schema&gt;\n&lt;/poml&gt;\n</code></pre> <p>Note</p> <p>The <code>&lt;task&gt;</code> and <code>&lt;hint&gt;</code> components are both \"intention components\" that help organize your prompts. They serve to denote special parts of instructions. When rendered, the only difference between them is their caption - <code>&lt;task&gt;</code> renders with \"# Task\" while <code>&lt;hint&gt;</code> renders with <code>**Hint:**</code>. Using these semantic components is not necessary when using POML, but they help you maintain clean, understandable, optimizable prompt structures rather than mixing all instructions together.</p> <p>This POML demonstrates several powerful features. The <code>if</code> attribute on components allows conditional rendering based on file type. When the POML engine evaluates <code>if=\"{{ file.endsWith('.png') }}\"</code>, it only includes that component if the condition is true. This lets us handle different document types with appropriate parsers - images are processed as visual content while PDFs are parsed to extract text and structure. With a PDF context available, this prompt renders to something like:</p> <pre><code># Task\n\nClassify travel docs and extract with high recall. Return numbers as numbers. Compute ONLY per-document subtotals_by_category (no combined totals).\n\n# File: assets/203_flight_itinerary.pdf\n\nFlight Itinerary\nPassenger Name John Doe\nBooking Reference ABC123\nFlight Airline From To Date Departure Arrival\nXY123 Sample Air New York (JFK) London (LHR) 01-Oct-2025 18:30 06:45\nXY124 Sample Air London (LHR) New York (JFK) 10-Oct-2025 10:00 13:00\n\n**Hint:** For each file, return JSON per schema. If unknown, omit. Avoid hallucinating.\n</code></pre> <p>The <code>poml.poml()</code> call renders our POML file with the provided context and formats it for OpenAI's API. Behind the scenes, POML reads the PDF / images files from your file system, and formats them into the prompt, so that you do not need to worry about how to send multi-media contexts to LLMs at all.</p> <p>POML also takes the Pydantic schema converted to JSON, embeds it in the prompt, and includes it as a <code>response_format</code> parameter in the API call. While you could manually pass the <code>Document</code> model directly to <code>client.chat.completions.create</code>, using POML centralizes all prompt components in one place, making it easier to debug and maintain. We'll explore these debugging capabilities in part 2.</p> <pre><code>flowchart TD\n  subgraph PY[Python code]\n    A[\"Pydantic models (Document)\"]\n    C[\"File path (file)\"]\n    A --&gt;|to_strict_json_schema| B[\"Strict JSON Schema\"]\n  end\n\n  subgraph POML[POML renderer by poml API]\n    D[\"&amp;lt;output-schema&amp;gt;\"]\n    E[\"&amp;lt;img&amp;gt;, &amp;lt;document&amp;gt;,&lt;br/&gt;if condition\"]\n  end\n\n  subgraph PY2[Python code]\n    G[Dict of messages and response_format]\n    H[\"Text loadable with JSON\"]\n    I[\"Pydantic model\"]\n  end\n\n  B --&gt;|injects into| D\n  C --&gt;|also drives| E\n  D --&gt;|embedded schema| G\n  E --&gt;|inputs &amp; instructions| G\n  G --&gt;|chat.completions.create| H\n  H --&gt;|json.load + model_validate_json| I</code></pre>"},{"location":"tutorial/expense_part1/#step-2-identifying-relevant-policy-rules","title":"Step 2: Identifying Relevant Policy Rules","text":"<p>Once we have structured document data, we need to determine which company policies apply to this specific expense report. This step demonstrates how POML handles multiple data sources and complex business logic.</p> <p>The Python code follows the same pattern, but notice how we pass the results from step 1 as input to step 2.</p> <pre><code>class TripContext(BaseModel):\n    ... # omitted for brevity\n\nclass Rule(BaseModel):\n    ... # omitted for brevity\n\nclass RelevantRules(BaseModel):\n    trip_context: TripContext\n    rules: List[Rule]\n\nemployee_email = \"\"\"\nHi, I just got back from a business trip to New York. Attached are my expense reports.\nPlease let me know if you need any more information.\n\"\"\"\n\ncontext = {\n    \"email_text\": employee_email,\n    \"extracted_documents\": [doc.model_dump() for doc in documents],  # Results from step 1\n    \"rules_output_schema\": to_strict_json_schema(RelevantRules),\n}\n\nrules_prompt = poml.poml(\n    \"expense_extract_rules.poml\",\n    context,\n    format=\"openai_chat\"\n)\n\nrules_response = client.chat.completions.create(**rules_prompt, model=\"gpt-5\")\nrelevant_rules = RelevantRules.model_validate_json(rules_response.choices[0].message.content)\n</code></pre> <p>Now let's look at the POML file for rule extraction that considers the employee's email, company policy documents, budget tables, and the extracted documents from step 1. Save it as <code>expense_extract_rules.poml</code>:</p> <pre><code>&lt;poml&gt;\n  &lt;task&gt;From the employee email, policy documents, and budget data, select rules that apply to the extracted documents. Focus on numeric caps and binary requirements.&lt;/task&gt;\n\n  &lt;cp caption=\"Travel Budget Table\"&gt;\n    &lt;table src=\"assets/travel_budget_table.xlsx\" syntax=\"csv\" /&gt;\n  &lt;/cp&gt;\n\n  &lt;cp caption=\"Travel Policy Document\"&gt;\n    &lt;document src=\"assets/travel_expense_policy.docx\" /&gt;\n  &lt;/cp&gt;\n\n  &lt;human-msg&gt;\n    &lt;cp caption=\"Email from Employee\"&gt;\n      &lt;text syntax=\"text\"&gt;{{ email_text }}&lt;/text&gt;\n    &lt;/cp&gt;\n\n    &lt;cp caption=\"Extracted Documents\"&gt;\n      &lt;object data=\"{{ extracted_documents }}\" syntax=\"xml\" /&gt;\n    &lt;/cp&gt;\n  &lt;/human-msg&gt;\n\n  &lt;output-schema&gt;{{ rules_output_schema }}&lt;/output-schema&gt;\n&lt;/poml&gt;\n</code></pre> <p>Notice how this file uses different component types to handle various data sources. The <code>&lt;table&gt;</code> component handles Excel files with <code>syntax=\"csv\"</code> to format the output as comma-separated values for better LLM readability. The <code>&lt;document&gt;</code> processes Word files. For the <code>&lt;text&gt;</code> component, <code>syntax=\"text\"</code> preserves the plain text formatting of the email. The <code>&lt;object&gt;</code> component with <code>syntax=\"xml\"</code> serializes our Python data structures (exported via <code>model_dump()</code> into a dict) as XML for structured representation in the prompt.</p> <p>This step demonstrates the power of POML's data flow capabilities. We're taking structured outputs from one step and using them as structured inputs to the next step, while also incorporating additional business context like policy documents and employee communications.</p>"},{"location":"tutorial/expense_part1/#step-3-checking-compliance-against-rules","title":"Step 3: Checking Compliance Against Rules","text":"<p>With our documents extracted and relevant rules identified, we need to validate compliance. This step performs the actual business logic of expense validation, checking each extracted expense against applicable rules and identifying violations. The Python code continues our data pipeline. The output structure captures both the financial totals and detailed rule violations:</p> <pre><code>class RuleCheck(BaseModel):\n    ... # omitted for brevity\n\nclass ComplianceCheck(BaseModel):\n    totals_by_category: List[TotalByCategory]\n    overall_total_usd: float\n    rule_checks: List[RuleCheck]\n    decision: Literal[\"approve\", \"needs_fixes\", \"reject\"]\n\ncontext = {\n    \"trip_context\": relevant_rules.trip_context.model_dump(),\n    \"extracted_documents\": [doc.model_dump() for doc in documents],\n    \"relevant_rules\": relevant_rules.model_dump(),\n    \"compliance_output_schema\": to_strict_json_schema(ComplianceCheck),\n}\n\ncompliance_prompt = poml.poml(\n    \"expense_check_compliance.poml\",\n    context,\n    format=\"openai_chat\"\n)\n\ncompliance_response = client.chat.completions.create(**compliance_prompt, model=\"gpt-5\")\ncompliance_check = ComplianceCheck.model_validate_json(compliance_response.choices[0].message.content)\n</code></pre> <p>The compliance checking POML file brings together all our data sources. Save it as <code>expense_check_compliance.poml</code>:</p> <pre><code>&lt;poml&gt;\n  &lt;task&gt;Check extracted documents against relevant rules. Calculate totals, identify violations, and determine approval status.&lt;/task&gt;\n\n  &lt;human-msg&gt;\n    &lt;cp caption=\"Trip Context\"&gt;\n      &lt;object data=\"{{ trip_context }}\" syntax=\"xml\" /&gt;\n    &lt;/cp&gt;\n\n    &lt;cp caption=\"Extracted Documents\"&gt;\n      &lt;object data=\"{{ extracted_documents }}\" syntax=\"xml\" /&gt;\n    &lt;/cp&gt;\n\n    &lt;cp caption=\"Relevant Rules\"&gt;\n      &lt;object data=\"{{ relevant_rules }}\" syntax=\"xml\" /&gt;\n    &lt;/cp&gt;\n  &lt;/human-msg&gt;\n\n  &lt;hint&gt;\n    Calculate totals by category. Check each rule against the evidence.\n    Determine severity of violations and suggest specific fixes.\n  &lt;/hint&gt;\n\n  &lt;output-schema&gt;{{ compliance_output_schema }}&lt;/output-schema&gt;\n&lt;/poml&gt;\n</code></pre> <p>This POML focuses entirely on the compliance logic, taking structured inputs and producing structured compliance results. At this point, our system has processed raw documents through structured extraction, identified relevant policies, and performed detailed compliance checking. The <code>compliance_check</code> object contains everything needed to make business decisions about the expense report.</p>"},{"location":"tutorial/expense_part1/#step-4-generating-automated-email-responses","title":"Step 4: Generating Automated Email Responses","text":"<p>The final step generates appropriate email responses based on the compliance check results. This demonstrates how POML can handle different output formats and integrate with business systems like email.</p> <p>The Python code for tool calls works seamlessly:</p> <pre><code>context = {\n    \"trip_context\": relevant_rules.trip_context.model_dump(),\n    \"compliance_result\": compliance_check.model_dump(),\n}\n\nemail_prompt = poml.poml(\n    \"expense_send_email.poml\",\n    context,\n    format=\"openai_chat\"\n)\n\n# The POML rendering automatically includes tool definitions\nemail_response = client.chat.completions.create(\n    **email_prompt,\n    model=\"gpt-5\",\n)\n\n# Handle the tool call\ntool_call = email_response.choices[0].message.tool_calls[0]\nemail_args = json.loads(tool_call.function.arguments)\nsend_email(**email_args)  # Your email implementation\n</code></pre> <p>Our email generation POML needs to produce different types of responses depending on the compliance results. Save it as <code>expense_send_email.poml</code>:</p> <pre><code>&lt;poml&gt;\n  &lt;task&gt;\n    &lt;p&gt;Use the tool to notify the employee about the expense report decision. Under 200 words.&lt;/p&gt;\n    &lt;p&gt;Summarize decision, list only the key violations with fixes, and include category totals and the overall total.&lt;/p&gt;\n  &lt;/task&gt;\n\n  &lt;human-msg&gt;\n    &lt;cp caption=\"Travel Context\"&gt;\n      &lt;object data=\"{{ trip_context }}\" syntax=\"xml\" /&gt;\n    &lt;/cp&gt;\n\n    &lt;cp caption=\"Compliance Check Result\"&gt;\n      &lt;object data=\"{{ compliance_result }}\" syntax=\"xml\" /&gt;\n    &lt;/cp&gt;\n  &lt;/human-msg&gt;\n\n  &lt;tool name=\"send_email\" description=\"Send an email\" parser=\"eval\"&gt;\n  z.object({\n    to: z.string(),\n    subject: z.string(),\n    body: z.string(),\n  })\n  &lt;/tool&gt;\n&lt;/poml&gt;\n</code></pre> <p>This POML introduces tool calling capability. Instead of returning structured data, it instructs the LLM to call a function. The <code>parser=\"eval\"</code> attribute tells POML to evaluate the tool schema using Zod (a JavaScript schema validation library). When rendered, POML automatically converts this into the appropriate tool definition format for the target LLM API, including it in the returned <code>email_prompt</code> dictionary (similar to the <code>response_format</code> above). This means you don't need to manually define tools in your Python code - POML handles the conversion for you.</p>"},{"location":"tutorial/expense_part1/#running-the-complete-example","title":"Running the Complete Example","text":"<p>To see the full system in action, the full prompt files are available at:</p> <ul> <li>Document extraction</li> <li>Rule extraction</li> <li>Compliance checking</li> <li>Email generation</li> </ul> <p>The full Python implementation is available at travel expense agent. You can run it by:</p> <pre><code>python 404_travel_expense_agent.py\n</code></pre> <p>This will process sample documents and walk through the complete workflow, showing you structured outputs at each step and the final email generation.</p>"},{"location":"tutorial/expense_part1/#next-step","title":"Next Step","text":"<ul> <li>Try the example file 404_travel_expense_agent.py.</li> <li>Explore different options with <code>syntax</code>.</li> <li>Go to part 2 to learn how to debug and optimize your prompts using the VS Code extension.</li> </ul>"},{"location":"tutorial/expense_part2/","title":"Travel Expense Agent - Part 2: Debugging and Optimizing with VS Code","text":"<p>Welcome to Part 2 of the Travel Expense Agent tutorial! In Part 1, we built a complete AI workflow using POML and Python. Now we'll explore how the VS Code extension transforms the debugging and optimization experience, making it dramatically easier to iterate on prompts and diagnose issues without constantly rerunning your entire Python workflow.</p>"},{"location":"tutorial/expense_part2/#why-debugging-matters-for-ai-workflows","title":"Why Debugging Matters for AI Workflows","text":"<p>When building AI applications, the challenge isn't just getting code to run - it's understanding why the LLM produced certain outputs and how to improve them. Traditional debugging approaches fall short because prompts are dynamic, context-dependent, and the LLM's behavior can vary. POML's VS Code extension solves these problems by providing visibility into every stage of prompt rendering and execution.</p> <p>The real power comes from being able to capture the exact state of your prompts in production, then iterate on them locally without needing to recreate complex runtime conditions. This workflow dramatically reduces the time from identifying an issue to deploying a fix.</p>"},{"location":"tutorial/expense_part2/#setting-up-tracing-in-python","title":"Setting Up Tracing in Python","text":"<p>Make sure you have the VS Code extension installed. You can find installation instructions in the VS Code documentation.</p> <p>Before we dive into VS Code features, let's understand how tracing captures the complete process of your AI workflow. When we ran the expense agent in Part 1, adding a single line transformed our debugging capabilities. Remember to add pomlruns to <code>.gitignore</code> if you haven't already.</p> <pre><code>import poml\n\n# Enable tracing for all POML calls\npoml.set_trace(trace_dir=\"pomlruns\")\n</code></pre> <p>This simple addition creates a comprehensive audit trail of every interaction with the LLM. Let's see what happens when we run our expense workflow:</p> <p></p> <p>The tracing system captures what we call the \"crime scene\" --- the exact state of your prompts at the moment before they're sent to the LLM. This includes the POML source, all context variables, the rendered output, and even environment metadata. When something goes wrong in production, these trace files give you everything needed to reproduce and fix the issue locally.</p>"},{"location":"tutorial/expense_part2/#understanding-trace-output-structure","title":"Understanding Trace Output Structure","text":"<p>After running the expense agent with tracing enabled, you'll find a timestamped directory containing all the captured interactions. Each execution generates multiple files that capture different aspects of the interaction. The <code>.context.json</code> files contain the exact data passed to each POML renderer, the <code>.poml</code> files show the source templates, and the <code>.result</code> files reveal what was actually sent to the LLM. Here's what a traced result looks like for our send email step:</p> <p></p> <p>The trace <code>.result</code> files also show the complete rendered prompt with all template variables replaced, giving you perfect visibility into what the LLM actually processes. This is valuable when debugging why a particular document wasn't extracted correctly or when optimizing prompts for better accuracy.</p>"},{"location":"tutorial/expense_part2/#working-with-context-files-in-vs-code","title":"Working with Context Files in VS Code","text":"<p>One of the powerful features of the VS Code extension is automatic context detection and loading. In the trace directory, you can see a <code>.context.json</code> file next to your POML source file. The extension automatically detects and uses it as the \"paired context file\" for the POML file. In addition, the VS Code extension also provides a live preview that updates as you edit your POML files:</p> <p></p> <p>The preview shows exactly how your prompt will render with the attached context, including conditional components, template variable substitutions, and formatted output schemas. This immediate feedback loop accelerates prompt development by showing you the results of your changes instantly. This also means that you can take a problematic interaction from production and immediately start iterating on the prompt locally. The context file contains all the runtime data, so you're working with exactly the same inputs that caused the issue.</p> <p>In case a <code>.context.json</code> file isn't automatically detected, do not worry. You can still manually attach it on the preview panel:</p> <p></p>"},{"location":"tutorial/expense_part2/#local-expression-evaluation-and-debugging","title":"Local Expression Evaluation and Debugging","text":"<p>The VS Code extension provides CodeLens buttons that let you evaluate template expressions directly in your editor. This feature is particularly useful when working with complex conditional logic or data transformations:</p> <p></p> <p>When you click the \"\u25b6\ufe0f Evaluate\" button above any expression, the extension evaluates it using your attached context and displays the result in the VS Code output panel. This helps you understand exactly what values your expressions produce without needing to run the entire workflow.</p> <p>For our expense extraction template, you can evaluate expressions like <code>{{ file.endsWith('.pdf') }}</code> to verify your conditional logic, or <code>{{ document_output_schema }}</code> to see the complete JSON schema being sent to the LLM.</p>"},{"location":"tutorial/expense_part2/#iterative-prompt-refinement-workflow","title":"Iterative Prompt Refinement Workflow","text":"<p>With all these tools in place, let's walk through a real debugging scenario. Suppose our compliance checking step isn't properly validating expenses against policy rules. Here's how we'd diagnose and fix the issue using the VS Code extension.</p> <p>First, we locate the problematic execution in our trace directory. The trace files show us exactly what was sent to the LLM. On the right of each <code>.source.poml</code> file items, you can see a small link icon, indicating that it's a soft link to the original POML file. Clicking it opens the link file directly:</p> <p></p> <p>Looking at the highlighted changes in the editor, we can see the power of iterative refinement. The original prompt was using <code>syntax=\"xml\"</code> to render all the context data. For brevity, we wish to change it to <code>syntax=\"json\"</code>. We can directly edit here, and the git-tracked POML source file will be updated accordingly.</p> <p>We can test our changes immediately using the VS Code test command, discussed in the next section.</p>"},{"location":"tutorial/expense_part2/#testing-individual-prompts-without-python","title":"Testing Individual Prompts Without Python","text":"<p>Perhaps the most powerful debugging feature is the ability to test individual prompts directly in VS Code, without running your Python workflow. This will significantly speed up iteration when refining specific steps:</p> <p></p> <p>Firstly, the side-by-side view shows the immediate impact - on the left, we're editing the POML source, and on the right, the preview panel instantly shows how this renders with our attached context. The preview confirms that our policy rules (including budget limits, receipt requirements, and expense categories) are now being included in the prompt with proper JSON formatting.</p> <p>The extension then uses your attached context file and sends the rendered prompt directly to the configured LLM. You can test against different models, compare outputs, and refine your prompts all within VS Code. This is especially valuable when debugging a specific step in a multi-stage workflow - you don't need to rerun steps 1-3 just to test changes to step 4.</p> <p>To enable this testing, configure your LLM settings (providers, models and API keys) in VS Code:</p> <p></p> <p>The settings support multiple providers including OpenAI, Anthropic, Azure OpenAI, and Google GenAI. You can quickly switch between models to test compatibility and compare outputs across different LLMs. After the configuration, hit the \"Play\" button in the upper right corner of your editor to run the test.</p>"},{"location":"tutorial/expense_part2/#summary-and-next-steps","title":"Summary and Next Steps","text":"<p>The VS Code extension transforms POML from a templating language into a complete prompt engineering toolkit. By combining Python-based tracing with VS Code's interactive debugging features, you can build, test, and optimize AI workflows with unprecedented visibility and control.</p> <p>The key insight is that prompts are code, and they deserve the same tooling and practices we apply to traditional software development. The trace-based workflow provides the visibility, the VS Code extension provides the interactivity, and together they make prompt engineering systematic and reliable.</p> <p>To continue your journey with POML:</p> <ul> <li>Explore the VS Code configuration options to customize your development environment</li> <li>Learn about advanced tracing and how to integrate it into other tracing systems</li> <li>Review the complete POML language reference to discover advanced features</li> <li>Try building your own multi-step AI workflows using the patterns from this tutorial</li> </ul> <p>The combination of POML's structured approach, Python's flexibility, and VS Code's debugging capabilities provides everything you need to build robust, maintainable AI applications. Happy prompting!</p>"},{"location":"tutorial/quickstart/","title":"Quick Start","text":"<p>Here's a very simple POML example. Please put it in a file named <code>example.poml</code>. Make sure it resides in the same directory as the <code>photosynthesis_diagram.png</code> image file.</p> <pre><code>&lt;poml&gt;\n  &lt;role&gt;You are a patient teacher explaining concepts to a 10-year-old.&lt;/role&gt;\n  &lt;task&gt;Explain the concept of photosynthesis using the provided image as a reference.&lt;/task&gt;\n\n  &lt;img src=\"photosynthesis_diagram.png\" alt=\"Diagram of photosynthesis\" /&gt;\n\n  &lt;output-format&gt;\n    Keep the explanation simple, engaging, and under 100 words.\n    Start with \"Hey there, future scientist!\".\n  &lt;/output-format&gt;\n&lt;/poml&gt;\n</code></pre> <p>This example defines a role and task for the LLM, includes an image for context, and specifies the desired output format. With the POML toolkit, the prompt can be easily rendered with a flexible format, and tested with a vision LLM.</p>"},{"location":"tutorial/quickstart/#youtube-video","title":"YouTube Video","text":"<p>We also recommend watching our YouTube video for a quick introduction to POML and how to get started.</p>"},{"location":"tutorial/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn POML Syntax: Understand the structure and syntax of POML files.</li> <li>Explore Components: Discover the available components and how to use them.</li> <li>Install VS Code Extension: Set up the POML extension for Visual Studio Code to enhance your development experience.</li> <li>Configure Python SDK: Learn how to configure the POML Python SDK for your projects and integrate into your workflow.</li> </ul>"},{"location":"typescript/","title":"TypeScript API Reference","text":"<p>Warning</p> <p>The TypeScript API is currently in rapid development and may change frequently. Please do not consider it a stable API. Use at your own risk.</p> <p>Note</p> <p>This documentation is auto-generated from the TypeScript source code using TypeDoc.</p>"},{"location":"typescript/#installation","title":"Installation","text":""},{"location":"typescript/#stable-release","title":"Stable Release","text":"<p>To use the POML TypeScript API, install the package via npm:</p> <pre><code>npm install pomljs\n</code></pre>"},{"location":"typescript/#nightly-build","title":"Nightly Build","text":"<pre><code>npm install pomljs@nightly\n</code></pre>"},{"location":"typescript/#quick-start","title":"Quick Start","text":"<pre><code>import { Paragraph, Image } from 'poml/essentials';\nimport { read, write } from 'poml';\nconst prompt = (\n  &lt;Paragraph&gt;\n    Hello, world! Here is an image:\n    &lt;Image src='photo.jpg' alt='A beautiful scenery' /&gt;\n  &lt;/Paragraph&gt;\n);\n\n// Parse the prompt components into an intermediate representation (IR)\nconst ir = await read(prompt);\n\n// Render it to different formats\nconst markdown = write(ir);\n</code></pre>"},{"location":"typescript/#links","title":"Links","text":"<ul> <li>Components Documentation: detailed component specifications with examples and parameters.</li> <li>TypeScript API Reference: auto-generated API reference for TypeScript components and utilities.</li> </ul>"},{"location":"typescript/reference/","title":"index","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/#functions","title":"Functions","text":""},{"location":"typescript/reference/#_readwithfile","title":"_readWithFile()","text":"<p>_readWithFile(<code>element</code>, <code>options?</code>, <code>context?</code>, <code>stylesheet?</code>, <code>sourcePath?</code>): <code>Promise</code>\\&lt;[<code>string</code>, <code>undefined</code> | <code>PomlFile</code>]&gt;</p> <p>Defined in: packages/poml/index.ts:51</p>"},{"location":"typescript/reference/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/#element","title":"element","text":"<p><code>string</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;</p>"},{"location":"typescript/reference/#options","title":"options?","text":"<p><code>PomlReaderOptions</code></p>"},{"location":"typescript/reference/#context","title":"context?","text":""},{"location":"typescript/reference/#stylesheet","title":"stylesheet?","text":""},{"location":"typescript/reference/#sourcepath","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;[<code>string</code>, <code>undefined</code> | <code>PomlFile</code>]&gt;</p>"},{"location":"typescript/reference/#cleartrace","title":"clearTrace()","text":"<p>clearTrace(): <code>void</code></p> <p>Defined in: packages/poml/util/trace.ts:56</p>"},{"location":"typescript/reference/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/#commandline","title":"commandLine()","text":"<p>commandLine(<code>args</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: packages/poml/index.ts:152</p>"},{"location":"typescript/reference/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/#args","title":"args","text":"<p><code>CliArgs</code></p>"},{"location":"typescript/reference/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"typescript/reference/#dumptrace","title":"dumpTrace()","text":"<p>dumpTrace(<code>markup</code>, <code>context?</code>, <code>stylesheet?</code>, <code>result?</code>, <code>sourcePath?</code>, <code>prettyResult?</code>): <code>void</code></p> <p>Defined in: packages/poml/util/trace.ts:100</p>"},{"location":"typescript/reference/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/#markup","title":"markup","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#context_1","title":"context?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#stylesheet_1","title":"stylesheet?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#result","title":"result?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#sourcepath_1","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#prettyresult","title":"prettyResult?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/#parsejsonwithbuffers","title":"parseJsonWithBuffers()","text":"<p>parseJsonWithBuffers(<code>text</code>): <code>any</code></p> <p>Defined in: packages/poml/util/trace.ts:24</p>"},{"location":"typescript/reference/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/#text","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_4","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#poml","title":"poml()","text":"<p>poml(<code>element</code>): <code>Promise</code>\\&lt;<code>RichContent</code>&gt;</p> <p>Defined in: packages/poml/index.ts:119</p>"},{"location":"typescript/reference/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/#element_1","title":"element","text":"<p><code>string</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;</p>"},{"location":"typescript/reference/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>RichContent</code>&gt;</p>"},{"location":"typescript/reference/#read","title":"read()","text":"<p>read(<code>element</code>, <code>options?</code>, <code>context?</code>, <code>stylesheet?</code>, <code>sourcePath?</code>): <code>Promise</code>\\&lt;<code>string</code>&gt;</p> <p>Defined in: packages/poml/index.ts:26</p>"},{"location":"typescript/reference/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/#element_2","title":"element","text":"<p><code>string</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;</p>"},{"location":"typescript/reference/#options_1","title":"options?","text":"<p><code>PomlReaderOptions</code></p>"},{"location":"typescript/reference/#context_2","title":"context?","text":""},{"location":"typescript/reference/#stylesheet_2","title":"stylesheet?","text":""},{"location":"typescript/reference/#sourcepath_2","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"typescript/reference/#settrace","title":"setTrace()","text":"<p>setTrace(<code>enabled</code>, <code>dir?</code>): <code>undefined</code> | <code>string</code></p> <p>Defined in: packages/poml/util/trace.ts:36</p>"},{"location":"typescript/reference/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/#enabled","title":"enabled","text":"<p><code>boolean</code> = <code>true</code></p>"},{"location":"typescript/reference/#dir","title":"dir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_7","title":"Returns","text":"<p><code>undefined</code> | <code>string</code></p>"},{"location":"typescript/reference/#write","title":"write()","text":"<p>Entry point for turning a parsed IR string into rich content or a list of speaker messages. The heavy lifting is done by <code>EnvironmentDispatcher</code>.</p>"},{"location":"typescript/reference/#call-signature","title":"Call Signature","text":"<p>write(<code>ir</code>, <code>options?</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/index.ts:87</p>"},{"location":"typescript/reference/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/#ir","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_2","title":"options?","text":"<p><code>WriteOptionsNoSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_8","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/#call-signature_1","title":"Call Signature","text":"<p>write(<code>ir</code>, <code>options</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/index.ts:88</p>"},{"location":"typescript/reference/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/#ir_1","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_3","title":"options","text":"<p><code>WriteOptionsSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_9","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/#call-signature_2","title":"Call Signature","text":"<p>write(<code>ir</code>, <code>options?</code>): <code>RichContent</code> | <code>Message</code>[]</p> <p>Defined in: packages/poml/index.ts:89</p>"},{"location":"typescript/reference/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/#ir_2","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_4","title":"options?","text":"<p><code>WriteOptions</code></p>"},{"location":"typescript/reference/#returns_10","title":"Returns","text":"<p><code>RichContent</code> | <code>Message</code>[]</p>"},{"location":"typescript/reference/#writewithsourcemap","title":"writeWithSourceMap()","text":"<p>Variant of write that also exposes a source map describing the mapping between input indices and output content.</p>"},{"location":"typescript/reference/#call-signature_3","title":"Call Signature","text":"<p>writeWithSourceMap(<code>ir</code>, <code>options?</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/index.ts:103</p>"},{"location":"typescript/reference/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/#ir_3","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_5","title":"options?","text":"<p><code>WriteOptionsNoSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_11","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/#call-signature_4","title":"Call Signature","text":"<p>writeWithSourceMap(<code>ir</code>, <code>options</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/index.ts:104</p>"},{"location":"typescript/reference/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/#ir_4","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_6","title":"options","text":"<p><code>WriteOptionsSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_12","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/#call-signature_5","title":"Call Signature","text":"<p>writeWithSourceMap(<code>ir</code>, <code>options?</code>): <code>SourceMapRichContent</code>[] | <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/index.ts:105</p>"},{"location":"typescript/reference/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/#ir_5","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_7","title":"options?","text":"<p><code>WriteOptions</code></p>"},{"location":"typescript/reference/#returns_13","title":"Returns","text":"<p><code>SourceMapRichContent</code>[] | <code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/base/","title":"base","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/base/#classes","title":"Classes","text":""},{"location":"typescript/reference/base/#buffercollection","title":"BufferCollection","text":"<p>Defined in: packages/poml/base.tsx:405</p>"},{"location":"typescript/reference/base/#accessors","title":"Accessors","text":""},{"location":"typescript/reference/base/#instance","title":"instance","text":""},{"location":"typescript/reference/base/#get-signature","title":"Get Signature","text":"<p>get <code>static</code> instance(): <code>BufferCollection</code></p> <p>Defined in: packages/poml/base.tsx:414</p>"},{"location":"typescript/reference/base/#returns","title":"Returns","text":"<p><code>BufferCollection</code></p>"},{"location":"typescript/reference/base/#methods","title":"Methods","text":""},{"location":"typescript/reference/base/#clear","title":"clear()","text":"<p><code>static</code> clear(): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:452</p>"},{"location":"typescript/reference/base/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#get","title":"get()","text":"<p><code>static</code> get\\&lt;<code>T</code>&gt;(<code>key</code>): <code>undefined</code> | <code>T</code></p> <p>Defined in: packages/poml/base.tsx:432</p>"},{"location":"typescript/reference/base/#type-parameters","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/base/#key","title":"key","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#returns_2","title":"Returns","text":"<p><code>undefined</code> | <code>T</code></p>"},{"location":"typescript/reference/base/#set","title":"set()","text":"<p><code>static</code> set(<code>key</code>, <code>value</code>): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:437</p>"},{"location":"typescript/reference/base/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/base/#key_1","title":"key","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#value","title":"value","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#errorcollection","title":"ErrorCollection","text":"<p>Defined in: packages/poml/base.tsx:320</p> <p>A can to hold all the errors.</p>"},{"location":"typescript/reference/base/#accessors_1","title":"Accessors","text":""},{"location":"typescript/reference/base/#instance_1","title":"instance","text":""},{"location":"typescript/reference/base/#get-signature_1","title":"Get Signature","text":"<p>get <code>static</code> instance(): <code>ErrorCollection</code></p> <p>Defined in: packages/poml/base.tsx:327</p>"},{"location":"typescript/reference/base/#returns_4","title":"Returns","text":"<p><code>ErrorCollection</code></p>"},{"location":"typescript/reference/base/#methods_1","title":"Methods","text":""},{"location":"typescript/reference/base/#add","title":"add()","text":"<p><code>static</code> add(<code>error</code>): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:334</p>"},{"location":"typescript/reference/base/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/base/#error","title":"error","text":"<p><code>PomlError</code></p>"},{"location":"typescript/reference/base/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#clear_1","title":"clear()","text":"<p><code>static</code> clear(): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:354</p>"},{"location":"typescript/reference/base/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#empty","title":"empty()","text":"<p><code>static</code> empty(): <code>boolean</code></p> <p>Defined in: packages/poml/base.tsx:350</p>"},{"location":"typescript/reference/base/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/base/#first","title":"first()","text":"<p><code>static</code> first(): <code>PomlError</code></p> <p>Defined in: packages/poml/base.tsx:338</p>"},{"location":"typescript/reference/base/#returns_8","title":"Returns","text":"<p><code>PomlError</code></p>"},{"location":"typescript/reference/base/#last","title":"last()","text":"<p><code>static</code> last(): <code>PomlError</code></p> <p>Defined in: packages/poml/base.tsx:342</p>"},{"location":"typescript/reference/base/#returns_9","title":"Returns","text":"<p><code>PomlError</code></p>"},{"location":"typescript/reference/base/#list","title":"list()","text":"<p><code>static</code> list(): <code>PomlError</code>[]</p> <p>Defined in: packages/poml/base.tsx:346</p>"},{"location":"typescript/reference/base/#returns_10","title":"Returns","text":"<p><code>PomlError</code>[]</p>"},{"location":"typescript/reference/base/#pomlcomponent","title":"PomlComponent","text":"<p>Defined in: packages/poml/base.tsx:619</p>"},{"location":"typescript/reference/base/#constructors","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor","title":"Constructor","text":"<p>new PomlComponent(<code>officialName</code>, <code>componentFunc</code>, <code>options</code>): <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:624</p>"},{"location":"typescript/reference/base/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/base/#officialname","title":"officialName","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#componentfunc","title":"componentFunc","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#options","title":"options","text":"<p><code>ComponentOptions</code></p>"},{"location":"typescript/reference/base/#returns_11","title":"Returns","text":"<p><code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#accessors_2","title":"Accessors","text":""},{"location":"typescript/reference/base/#name","title":"name","text":""},{"location":"typescript/reference/base/#get-signature_2","title":"Get Signature","text":"<p>get name(): <code>string</code></p> <p>Defined in: packages/poml/base.tsx:630</p>"},{"location":"typescript/reference/base/#returns_12","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#methods_2","title":"Methods","text":""},{"location":"typescript/reference/base/#getaliases","title":"getAliases()","text":"<p>getAliases(<code>lower</code>): <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:634</p>"},{"location":"typescript/reference/base/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/base/#lower","title":"lower","text":"<p><code>boolean</code> = <code>true</code></p>"},{"location":"typescript/reference/base/#returns_13","title":"Returns","text":"<p><code>string</code>[]</p>"},{"location":"typescript/reference/base/#ispublic","title":"isPublic()","text":"<p>isPublic(): <code>boolean</code></p> <p>Defined in: packages/poml/base.tsx:668</p>"},{"location":"typescript/reference/base/#returns_14","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/base/#mro","title":"mro()","text":"<p>mro(): <code>PomlComponent</code>[]</p> <p>Defined in: packages/poml/base.tsx:700</p>"},{"location":"typescript/reference/base/#returns_15","title":"Returns","text":"<p><code>PomlComponent</code>[]</p>"},{"location":"typescript/reference/base/#parameters_5","title":"parameters()","text":"<p>parameters(): <code>Parameter</code>[]</p> <p>Defined in: packages/poml/base.tsx:684</p>"},{"location":"typescript/reference/base/#returns_16","title":"Returns","text":"<p><code>Parameter</code>[]</p>"},{"location":"typescript/reference/base/#render","title":"render()","text":"<p>render(<code>props</code>): <code>any</code></p> <p>Defined in: packages/poml/base.tsx:813</p>"},{"location":"typescript/reference/base/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/base/#props","title":"props","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#returns_17","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#spec","title":"spec()","text":"<p>spec(): <code>undefined</code> | <code>ComponentSpec</code></p> <p>Defined in: packages/poml/base.tsx:680</p>"},{"location":"typescript/reference/base/#returns_18","title":"Returns","text":"<p><code>undefined</code> | <code>ComponentSpec</code></p>"},{"location":"typescript/reference/base/#style","title":"style()","text":"<p>style(<code>props</code>, <code>stylesheet?</code>): <code>any</code></p> <p>Defined in: packages/poml/base.tsx:727</p>"},{"location":"typescript/reference/base/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/base/#props_1","title":"props","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#stylesheet","title":"stylesheet?","text":"<p><code>StyleSheet</code></p>"},{"location":"typescript/reference/base/#returns_19","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#fromspec","title":"fromSpec()","text":"<p><code>static</code> fromSpec(<code>spec</code>): <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:672</p>"},{"location":"typescript/reference/base/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/base/#spec_1","title":"spec","text":"<p><code>ComponentSpec</code></p>"},{"location":"typescript/reference/base/#returns_20","title":"Returns","text":"<p><code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#readerror","title":"ReadError","text":"<p>Defined in: packages/poml/base.tsx:283</p>"},{"location":"typescript/reference/base/#extends","title":"Extends","text":"<ul> <li><code>PomlError</code></li> </ul>"},{"location":"typescript/reference/base/#constructors_1","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor_1","title":"Constructor","text":"<p>new ReadError(<code>message</code>, <code>startIndex?</code>, <code>endIndex?</code>, <code>sourcePath?</code>, <code>options?</code>): <code>ReadError</code></p> <p>Defined in: packages/poml/base.tsx:284</p>"},{"location":"typescript/reference/base/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/base/#message","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#startindex","title":"startIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#endindex","title":"endIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#sourcepath","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_1","title":"options?","text":"<p><code>PomlErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_21","title":"Returns","text":"<p><code>ReadError</code></p>"},{"location":"typescript/reference/base/#overrides","title":"Overrides","text":"<p><code>PomlError.constructor</code></p>"},{"location":"typescript/reference/base/#properties","title":"Properties","text":""},{"location":"typescript/reference/base/#cause","title":"cause?","text":"<p><code>optional</code> cause: <code>unknown</code></p> <p>Defined in: node_modules/typescript/lib/lib.es2022.error.d.ts:26</p>"},{"location":"typescript/reference/base/#inherited-from","title":"Inherited from","text":"<p><code>PomlError.cause</code></p>"},{"location":"typescript/reference/base/#endindex_1","title":"endIndex?","text":"<p><code>optional</code> endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:287</p>"},{"location":"typescript/reference/base/#message_1","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1077</p>"},{"location":"typescript/reference/base/#inherited-from_1","title":"Inherited from","text":"<p><code>PomlError.message</code></p>"},{"location":"typescript/reference/base/#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1076</p>"},{"location":"typescript/reference/base/#inherited-from_2","title":"Inherited from","text":"<p><code>PomlError.name</code></p>"},{"location":"typescript/reference/base/#severity","title":"severity","text":"<p>severity: <code>\"error\"</code> | <code>\"warning\"</code> = <code>'error'</code></p> <p>Defined in: packages/poml/base.tsx:265</p>"},{"location":"typescript/reference/base/#inherited-from_3","title":"Inherited from","text":"<p><code>PomlError.severity</code></p>"},{"location":"typescript/reference/base/#sourcepath_1","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:288</p>"},{"location":"typescript/reference/base/#stack","title":"stack?","text":"<p><code>optional</code> stack: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1078</p>"},{"location":"typescript/reference/base/#inherited-from_4","title":"Inherited from","text":"<p><code>PomlError.stack</code></p>"},{"location":"typescript/reference/base/#startindex_1","title":"startIndex?","text":"<p><code>optional</code> startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:286</p>"},{"location":"typescript/reference/base/#stacktracelimit","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:149</p> <p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p>"},{"location":"typescript/reference/base/#inherited-from_5","title":"Inherited from","text":"<p><code>PomlError.stackTraceLimit</code></p>"},{"location":"typescript/reference/base/#methods_3","title":"Methods","text":""},{"location":"typescript/reference/base/#capturestacktrace","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt?</code>): <code>void</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:133</p> <p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre><code>const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre> <p>The first line of the trace will be prefixed with <code>${myObject.name}: ${myObject.message}</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from the user. For instance:</p> <pre><code>function a() {\n  b();\n}\n\nfunction b() {\n  c();\n}\n\nfunction c() {\n  // Create an error without stack trace to avoid calculating the stack trace twice.\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  const error = new Error();\n  Error.stackTraceLimit = stackTraceLimit;\n\n  // Capture the stack trace above function b\n  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n  throw error;\n}\n\na();\n</code></pre>"},{"location":"typescript/reference/base/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/base/#targetobject","title":"targetObject","text":"<p><code>object</code></p>"},{"location":"typescript/reference/base/#constructoropt","title":"constructorOpt?","text":"<p><code>Function</code></p>"},{"location":"typescript/reference/base/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#inherited-from_6","title":"Inherited from","text":"<p><code>PomlError.captureStackTrace</code></p>"},{"location":"typescript/reference/base/#fromprops","title":"fromProps()","text":"<p><code>static</code> fromProps(<code>message</code>, <code>props</code>, <code>options?</code>): <code>ReadError</code></p> <p>Defined in: packages/poml/base.tsx:295</p>"},{"location":"typescript/reference/base/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/base/#message_2","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#props_2","title":"props","text":"<p><code>PropsBase</code></p>"},{"location":"typescript/reference/base/#options_2","title":"options?","text":"<p><code>PomlErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_23","title":"Returns","text":"<p><code>ReadError</code></p>"},{"location":"typescript/reference/base/#preparestacktrace","title":"prepareStackTrace()","text":"<p><code>static</code> prepareStackTrace(<code>err</code>, <code>stackTraces</code>): <code>any</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:137</p>"},{"location":"typescript/reference/base/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/base/#err","title":"err","text":"<p><code>Error</code></p>"},{"location":"typescript/reference/base/#stacktraces","title":"stackTraces","text":"<p><code>CallSite</code>[]</p>"},{"location":"typescript/reference/base/#returns_24","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#see","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"typescript/reference/base/#inherited-from_7","title":"Inherited from","text":"<p><code>PomlError.prepareStackTrace</code></p>"},{"location":"typescript/reference/base/#systemerror","title":"SystemError","text":"<p>Defined in: packages/poml/base.tsx:276</p>"},{"location":"typescript/reference/base/#extends_1","title":"Extends","text":"<ul> <li><code>PomlError</code></li> </ul>"},{"location":"typescript/reference/base/#constructors_2","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor_2","title":"Constructor","text":"<p>new SystemError(<code>message</code>, <code>options?</code>): <code>SystemError</code></p> <p>Defined in: packages/poml/base.tsx:277</p>"},{"location":"typescript/reference/base/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/base/#message_3","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_3","title":"options?","text":"<p><code>ErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_25","title":"Returns","text":"<p><code>SystemError</code></p>"},{"location":"typescript/reference/base/#overrides_1","title":"Overrides","text":"<p><code>PomlError.constructor</code></p>"},{"location":"typescript/reference/base/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/base/#cause_1","title":"cause?","text":"<p><code>optional</code> cause: <code>unknown</code></p> <p>Defined in: node_modules/typescript/lib/lib.es2022.error.d.ts:26</p>"},{"location":"typescript/reference/base/#inherited-from_8","title":"Inherited from","text":"<p><code>PomlError.cause</code></p>"},{"location":"typescript/reference/base/#message_4","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1077</p>"},{"location":"typescript/reference/base/#inherited-from_9","title":"Inherited from","text":"<p><code>PomlError.message</code></p>"},{"location":"typescript/reference/base/#name_2","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1076</p>"},{"location":"typescript/reference/base/#inherited-from_10","title":"Inherited from","text":"<p><code>PomlError.name</code></p>"},{"location":"typescript/reference/base/#severity_1","title":"severity","text":"<p>severity: <code>\"error\"</code> | <code>\"warning\"</code> = <code>'error'</code></p> <p>Defined in: packages/poml/base.tsx:265</p>"},{"location":"typescript/reference/base/#inherited-from_11","title":"Inherited from","text":"<p><code>ReadError</code>.<code>severity</code></p>"},{"location":"typescript/reference/base/#stack_1","title":"stack?","text":"<p><code>optional</code> stack: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1078</p>"},{"location":"typescript/reference/base/#inherited-from_12","title":"Inherited from","text":"<p><code>PomlError.stack</code></p>"},{"location":"typescript/reference/base/#stacktracelimit_1","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:149</p> <p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p>"},{"location":"typescript/reference/base/#inherited-from_13","title":"Inherited from","text":"<p><code>PomlError.stackTraceLimit</code></p>"},{"location":"typescript/reference/base/#methods_4","title":"Methods","text":""},{"location":"typescript/reference/base/#capturestacktrace_1","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt?</code>): <code>void</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:133</p> <p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre><code>const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre> <p>The first line of the trace will be prefixed with <code>${myObject.name}: ${myObject.message}</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from the user. For instance:</p> <pre><code>function a() {\n  b();\n}\n\nfunction b() {\n  c();\n}\n\nfunction c() {\n  // Create an error without stack trace to avoid calculating the stack trace twice.\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  const error = new Error();\n  Error.stackTraceLimit = stackTraceLimit;\n\n  // Capture the stack trace above function b\n  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n  throw error;\n}\n\na();\n</code></pre>"},{"location":"typescript/reference/base/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/base/#targetobject_1","title":"targetObject","text":"<p><code>object</code></p>"},{"location":"typescript/reference/base/#constructoropt_1","title":"constructorOpt?","text":"<p><code>Function</code></p>"},{"location":"typescript/reference/base/#returns_26","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#inherited-from_14","title":"Inherited from","text":"<p><code>PomlError.captureStackTrace</code></p>"},{"location":"typescript/reference/base/#preparestacktrace_1","title":"prepareStackTrace()","text":"<p><code>static</code> prepareStackTrace(<code>err</code>, <code>stackTraces</code>): <code>any</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:137</p>"},{"location":"typescript/reference/base/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/base/#err_1","title":"err","text":"<p><code>Error</code></p>"},{"location":"typescript/reference/base/#stacktraces_1","title":"stackTraces","text":"<p><code>CallSite</code>[]</p>"},{"location":"typescript/reference/base/#returns_27","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#see_1","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"typescript/reference/base/#inherited-from_15","title":"Inherited from","text":"<p><code>PomlError.prepareStackTrace</code></p>"},{"location":"typescript/reference/base/#writeerror","title":"WriteError","text":"<p>Defined in: packages/poml/base.tsx:300</p>"},{"location":"typescript/reference/base/#extends_2","title":"Extends","text":"<ul> <li><code>PomlError</code></li> </ul>"},{"location":"typescript/reference/base/#constructors_3","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor_3","title":"Constructor","text":"<p>new WriteError(<code>message</code>, <code>startIndex?</code>, <code>endIndex?</code>, <code>sourcePath?</code>, <code>irStartIndex?</code>, <code>irEndIndex?</code>, <code>relatedIr?</code>, <code>options?</code>): <code>WriteError</code></p> <p>Defined in: packages/poml/base.tsx:301</p>"},{"location":"typescript/reference/base/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/base/#message_5","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#startindex_2","title":"startIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#endindex_2","title":"endIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#sourcepath_2","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#irstartindex","title":"irStartIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#irendindex","title":"irEndIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#relatedir","title":"relatedIr?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_4","title":"options?","text":"<p><code>PomlErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_28","title":"Returns","text":"<p><code>WriteError</code></p>"},{"location":"typescript/reference/base/#overrides_2","title":"Overrides","text":"<p><code>PomlError.constructor</code></p>"},{"location":"typescript/reference/base/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/base/#cause_2","title":"cause?","text":"<p><code>optional</code> cause: <code>unknown</code></p> <p>Defined in: node_modules/typescript/lib/lib.es2022.error.d.ts:26</p>"},{"location":"typescript/reference/base/#inherited-from_16","title":"Inherited from","text":"<p><code>PomlError.cause</code></p>"},{"location":"typescript/reference/base/#endindex_3","title":"endIndex?","text":"<p><code>optional</code> endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:304</p>"},{"location":"typescript/reference/base/#irendindex_1","title":"irEndIndex?","text":"<p><code>optional</code> irEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:307</p>"},{"location":"typescript/reference/base/#irstartindex_1","title":"irStartIndex?","text":"<p><code>optional</code> irStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:306</p>"},{"location":"typescript/reference/base/#message_6","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1077</p>"},{"location":"typescript/reference/base/#inherited-from_17","title":"Inherited from","text":"<p><code>PomlError.message</code></p>"},{"location":"typescript/reference/base/#name_3","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1076</p>"},{"location":"typescript/reference/base/#inherited-from_18","title":"Inherited from","text":"<p><code>PomlError.name</code></p>"},{"location":"typescript/reference/base/#relatedir_1","title":"relatedIr?","text":"<p><code>optional</code> relatedIr: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:308</p>"},{"location":"typescript/reference/base/#severity_2","title":"severity","text":"<p>severity: <code>\"error\"</code> | <code>\"warning\"</code> = <code>'error'</code></p> <p>Defined in: packages/poml/base.tsx:265</p>"},{"location":"typescript/reference/base/#inherited-from_19","title":"Inherited from","text":"<p><code>PomlError.severity</code></p>"},{"location":"typescript/reference/base/#sourcepath_3","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:305</p>"},{"location":"typescript/reference/base/#stack_2","title":"stack?","text":"<p><code>optional</code> stack: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1078</p>"},{"location":"typescript/reference/base/#inherited-from_20","title":"Inherited from","text":"<p><code>PomlError.stack</code></p>"},{"location":"typescript/reference/base/#startindex_3","title":"startIndex?","text":"<p><code>optional</code> startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:303</p>"},{"location":"typescript/reference/base/#stacktracelimit_2","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:149</p> <p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p>"},{"location":"typescript/reference/base/#inherited-from_21","title":"Inherited from","text":"<p><code>PomlError.stackTraceLimit</code></p>"},{"location":"typescript/reference/base/#methods_5","title":"Methods","text":""},{"location":"typescript/reference/base/#capturestacktrace_2","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt?</code>): <code>void</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:133</p> <p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre><code>const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre> <p>The first line of the trace will be prefixed with <code>${myObject.name}: ${myObject.message}</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from the user. For instance:</p> <pre><code>function a() {\n  b();\n}\n\nfunction b() {\n  c();\n}\n\nfunction c() {\n  // Create an error without stack trace to avoid calculating the stack trace twice.\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  const error = new Error();\n  Error.stackTraceLimit = stackTraceLimit;\n\n  // Capture the stack trace above function b\n  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n  throw error;\n}\n\na();\n</code></pre>"},{"location":"typescript/reference/base/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/base/#targetobject_2","title":"targetObject","text":"<p><code>object</code></p>"},{"location":"typescript/reference/base/#constructoropt_2","title":"constructorOpt?","text":"<p><code>Function</code></p>"},{"location":"typescript/reference/base/#returns_29","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#inherited-from_22","title":"Inherited from","text":"<p><code>PomlError.captureStackTrace</code></p>"},{"location":"typescript/reference/base/#preparestacktrace_2","title":"prepareStackTrace()","text":"<p><code>static</code> prepareStackTrace(<code>err</code>, <code>stackTraces</code>): <code>any</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:137</p>"},{"location":"typescript/reference/base/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/base/#err_2","title":"err","text":"<p><code>Error</code></p>"},{"location":"typescript/reference/base/#stacktraces_2","title":"stackTraces","text":"<p><code>CallSite</code>[]</p>"},{"location":"typescript/reference/base/#returns_30","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#see_2","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"typescript/reference/base/#inherited-from_23","title":"Inherited from","text":"<p><code>PomlError.prepareStackTrace</code></p>"},{"location":"typescript/reference/base/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/base/#componentspec","title":"ComponentSpec","text":"<p>Defined in: packages/poml/base.tsx:595</p>"},{"location":"typescript/reference/base/#properties_3","title":"Properties","text":""},{"location":"typescript/reference/base/#basecomponents","title":"baseComponents","text":"<p>baseComponents: <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:599</p>"},{"location":"typescript/reference/base/#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:597</p>"},{"location":"typescript/reference/base/#example","title":"example","text":"<p>example: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:600</p>"},{"location":"typescript/reference/base/#name_4","title":"name?","text":"<p><code>optional</code> name: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:596</p>"},{"location":"typescript/reference/base/#params","title":"params","text":"<p>params: <code>Parameter</code>[]</p> <p>Defined in: packages/poml/base.tsx:598</p>"},{"location":"typescript/reference/base/#contentmultimediabinary","title":"ContentMultiMediaBinary","text":"<p>Defined in: packages/poml/base.tsx:21</p> <p>This is to show in the final rendered prompt.</p>"},{"location":"typescript/reference/base/#properties_4","title":"Properties","text":""},{"location":"typescript/reference/base/#alt","title":"alt?","text":"<p><code>optional</code> alt: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:24</p>"},{"location":"typescript/reference/base/#base64","title":"base64","text":"<p>base64: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:23</p>"},{"location":"typescript/reference/base/#type","title":"type","text":"<p>type: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:22</p>"},{"location":"typescript/reference/base/#contentmultimediajson","title":"ContentMultiMediaJson","text":"<p>Defined in: packages/poml/base.tsx:30</p> <p>A JSON-serializable payload, but not a string.</p>"},{"location":"typescript/reference/base/#properties_5","title":"Properties","text":""},{"location":"typescript/reference/base/#content","title":"content","text":"<p>content: <code>any</code></p> <p>Defined in: packages/poml/base.tsx:32</p>"},{"location":"typescript/reference/base/#type_1","title":"type","text":"<p>type: <code>\"application/json\"</code></p> <p>Defined in: packages/poml/base.tsx:31</p>"},{"location":"typescript/reference/base/#contentmultimediatoolrequest","title":"ContentMultiMediaToolRequest","text":"<p>Defined in: packages/poml/base.tsx:38</p> <p>Tool request generated by the model.</p>"},{"location":"typescript/reference/base/#properties_6","title":"Properties","text":""},{"location":"typescript/reference/base/#content_1","title":"content","text":"<p>content: <code>any</code></p> <p>Defined in: packages/poml/base.tsx:40</p>"},{"location":"typescript/reference/base/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:41</p>"},{"location":"typescript/reference/base/#name_5","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:42</p>"},{"location":"typescript/reference/base/#type_2","title":"type","text":"<p>type: <code>\"application/vnd.poml.toolrequest\"</code></p> <p>Defined in: packages/poml/base.tsx:39</p>"},{"location":"typescript/reference/base/#contentmultimediatoolresponse","title":"ContentMultiMediaToolResponse","text":"<p>Defined in: packages/poml/base.tsx:48</p> <p>Tool call result sent to the model.</p>"},{"location":"typescript/reference/base/#properties_7","title":"Properties","text":""},{"location":"typescript/reference/base/#content_2","title":"content","text":"<p>content: <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:50</p>"},{"location":"typescript/reference/base/#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:51</p>"},{"location":"typescript/reference/base/#name_6","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:52</p>"},{"location":"typescript/reference/base/#type_3","title":"type","text":"<p>type: <code>\"application/vnd.poml.toolresponse\"</code></p> <p>Defined in: packages/poml/base.tsx:49</p>"},{"location":"typescript/reference/base/#message_7","title":"Message","text":"<p>Defined in: packages/poml/base.tsx:63</p>"},{"location":"typescript/reference/base/#properties_8","title":"Properties","text":""},{"location":"typescript/reference/base/#content_3","title":"content","text":"<p>content: <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:65</p>"},{"location":"typescript/reference/base/#speaker","title":"speaker","text":"<p>speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:64</p>"},{"location":"typescript/reference/base/#parameter","title":"Parameter","text":"<p>Defined in: packages/poml/base.tsx:585</p>"},{"location":"typescript/reference/base/#properties_9","title":"Properties","text":""},{"location":"typescript/reference/base/#choices","title":"choices","text":"<p>choices: <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:589</p>"},{"location":"typescript/reference/base/#defaultvalue","title":"defaultValue","text":"<p>defaultValue: <code>undefined</code> | <code>string</code></p> <p>Defined in: packages/poml/base.tsx:591</p>"},{"location":"typescript/reference/base/#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:590</p>"},{"location":"typescript/reference/base/#fallbacktype","title":"fallbackType","text":"<p>fallbackType: <code>undefined</code> | <code>string</code></p> <p>Defined in: packages/poml/base.tsx:588</p>"},{"location":"typescript/reference/base/#name_7","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:586</p>"},{"location":"typescript/reference/base/#required","title":"required","text":"<p>required: <code>boolean</code></p> <p>Defined in: packages/poml/base.tsx:592</p>"},{"location":"typescript/reference/base/#type_4","title":"type","text":"<p>type: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:587</p>"},{"location":"typescript/reference/base/#propsbase","title":"PropsBase","text":"<p>Defined in: packages/poml/base.tsx:126</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/base/#extended-by","title":"Extended by","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/base/#properties_10","title":"Properties","text":""},{"location":"typescript/reference/base/#charlimit","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/base/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/base/#originalendindex","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/base/#originalstartindex","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/base/#priority","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/base/#sourcepath_4","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/base/#speaker_1","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/base/#tokenlimit","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/base/#whitespace","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/base/#writeroptions","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/base/#sourcemapmessage","title":"SourceMapMessage","text":"<p>Defined in: packages/poml/base.tsx:76</p>"},{"location":"typescript/reference/base/#properties_11","title":"Properties","text":""},{"location":"typescript/reference/base/#content_4","title":"content","text":"<p>content: <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/base.tsx:82</p>"},{"location":"typescript/reference/base/#endindex_4","title":"endIndex","text":"<p>endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:78</p>"},{"location":"typescript/reference/base/#irendindex_2","title":"irEndIndex","text":"<p>irEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:80</p>"},{"location":"typescript/reference/base/#irstartindex_2","title":"irStartIndex","text":"<p>irStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:79</p>"},{"location":"typescript/reference/base/#speaker_2","title":"speaker","text":"<p>speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:81</p>"},{"location":"typescript/reference/base/#startindex_4","title":"startIndex","text":"<p>startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:77</p>"},{"location":"typescript/reference/base/#sourcemaprichcontent","title":"SourceMapRichContent","text":"<p>Defined in: packages/poml/base.tsx:68</p>"},{"location":"typescript/reference/base/#properties_12","title":"Properties","text":""},{"location":"typescript/reference/base/#content_5","title":"content","text":"<p>content: <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:73</p>"},{"location":"typescript/reference/base/#endindex_5","title":"endIndex","text":"<p>endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:70</p>"},{"location":"typescript/reference/base/#irendindex_3","title":"irEndIndex","text":"<p>irEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:72</p>"},{"location":"typescript/reference/base/#irstartindex_3","title":"irStartIndex","text":"<p>irStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:71</p>"},{"location":"typescript/reference/base/#startindex_5","title":"startIndex","text":"<p>startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:69</p>"},{"location":"typescript/reference/base/#stylesheet_1","title":"StyleSheet","text":"<p>Defined in: packages/poml/base.tsx:512</p> <p>Stylesheet is a way to configure the props to be used in the components globally. It can be used to set multiple things, including markup syntax, presentation approach, text formats, and more, as long as they are supported by the components' props. If a globally set prop is not supported by a component, it will be ignored.</p> <p>The style can be set for all components or for a specific component type, such as:</p> <pre><code>const stylesheet = {\n  '*': {\n    presentation: 'markup',\n    markupLang: 'markdown',\n    listStyle: 'unordered'\n  },\n  'table': {\n    presentation: 'serialize',\n    serializer: 'json'\n  },\n  Example: {\n    messageInteraction: true\n  },\n  TaskDescription: {\n    titleMarkupTransform: 'header',\n    titleTextTransform: {\n      case: 'upper'\n    }\n  }\n}\n</code></pre> <p>The stylesheet can be then set via a <code>StyleSheetProvider</code> component:</p> <pre><code>&lt;StyleSheetProvider stylesheet={stylesheet}&gt;&lt;MyPrompt /&gt;&lt;/StyleSheetProvider&gt;\n</code></pre>"},{"location":"typescript/reference/base/#indexable","title":"Indexable","text":"<p>[<code>match</code>: <code>string</code>]: <code>AnyProps</code></p>"},{"location":"typescript/reference/base/#type-aliases","title":"Type Aliases","text":""},{"location":"typescript/reference/base/#contentmultimedia","title":"ContentMultiMedia","text":"<p>ContentMultiMedia = <code>ContentMultiMediaBinary</code> | <code>ContentMultiMediaJson</code> | <code>ContentMultiMediaToolRequest</code> | <code>ContentMultiMediaToolResponse</code></p> <p>Defined in: packages/poml/base.tsx:55</p>"},{"location":"typescript/reference/base/#richcontent","title":"RichContent","text":"<p>RichContent = <code>string</code> | (<code>string</code> | <code>ContentMultiMedia</code>)[]</p> <p>Defined in: packages/poml/base.tsx:61</p>"},{"location":"typescript/reference/base/#speaker_3","title":"Speaker","text":"<p>Speaker = <code>\"system\"</code> | <code>\"human\"</code> | <code>\"ai\"</code> | <code>\"tool\"</code></p> <p>Defined in: packages/poml/base.tsx:15</p>"},{"location":"typescript/reference/base/#variables","title":"Variables","text":""},{"location":"typescript/reference/base/#validspeakers","title":"ValidSpeakers","text":"<p><code>const</code> ValidSpeakers: <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:16</p>"},{"location":"typescript/reference/base/#functions","title":"Functions","text":""},{"location":"typescript/reference/base/#component","title":"component()","text":""},{"location":"typescript/reference/base/#call-signature","title":"Call Signature","text":"<p>component(<code>name</code>, <code>options?</code>): \\&lt;<code>T</code>&gt;(<code>fn</code>) =&gt; <code>T</code></p> <p>Defined in: packages/poml/base.tsx:945</p> <p>Usage: 1. <code>component('my-component', ['mc'])(MyComponent)</code> 2. <code>component('my-component', {   aliases: ['mc'],   requiredProps: ['requiredProp'],   unwantedProps: ['unwantedProp'],   applyStyleSheet: false })(MyComponent)</code></p>"},{"location":"typescript/reference/base/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/base/#name_8","title":"name","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_5","title":"options?","text":"<p><code>string</code>[]</p>"},{"location":"typescript/reference/base/#returns_31","title":"Returns","text":"<p>\\&lt;<code>T</code>&gt;(<code>fn</code>): <code>T</code></p>"},{"location":"typescript/reference/base/#type-parameters_1","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t_1","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/base/#fn","title":"fn","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#returns_32","title":"Returns","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#call-signature_1","title":"Call Signature","text":"<p>component(<code>name</code>, <code>options?</code>): \\&lt;<code>T</code>&gt;(<code>fn</code>) =&gt; <code>T</code></p> <p>Defined in: packages/poml/base.tsx:946</p> <p>Usage: 1. <code>component('my-component', ['mc'])(MyComponent)</code> 2. <code>component('my-component', {   aliases: ['mc'],   requiredProps: ['requiredProp'],   unwantedProps: ['unwantedProp'],   applyStyleSheet: false })(MyComponent)</code></p>"},{"location":"typescript/reference/base/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/base/#name_9","title":"name","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_6","title":"options?","text":"<p><code>NonStrictComponentOptions</code></p>"},{"location":"typescript/reference/base/#returns_33","title":"Returns","text":"<p>\\&lt;<code>T</code>&gt;(<code>fn</code>): <code>T</code></p>"},{"location":"typescript/reference/base/#type-parameters_2","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t_2","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters_22","title":"Parameters","text":""},{"location":"typescript/reference/base/#fn_1","title":"fn","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#returns_34","title":"Returns","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#expandrelative","title":"expandRelative()","text":"<p>expandRelative(<code>src</code>): <code>string</code></p> <p>Defined in: packages/poml/base.tsx:574</p>"},{"location":"typescript/reference/base/#parameters_23","title":"Parameters","text":""},{"location":"typescript/reference/base/#src","title":"src","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#returns_35","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#findcomponentbyalias","title":"findComponentByAlias()","text":"<p>findComponentByAlias(<code>alias</code>, <code>disabled?</code>): <code>string</code> | <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:988</p> <p>Find a component by its alias. If not found, return a string that suggests the closest match.</p>"},{"location":"typescript/reference/base/#parameters_24","title":"Parameters","text":""},{"location":"typescript/reference/base/#alias","title":"alias","text":"<p><code>string</code></p> <p>Alias or official name.</p>"},{"location":"typescript/reference/base/#disabled","title":"disabled?","text":"<p><code>Set</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"typescript/reference/base/#returns_36","title":"Returns","text":"<p><code>string</code> | <code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#findcomponentbyaliasorundefined","title":"findComponentByAliasOrUndefined()","text":"<p>findComponentByAliasOrUndefined(<code>alias</code>, <code>disabled?</code>): <code>undefined</code> | <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:992</p>"},{"location":"typescript/reference/base/#parameters_25","title":"Parameters","text":""},{"location":"typescript/reference/base/#alias_1","title":"alias","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#disabled_1","title":"disabled?","text":"<p><code>Set</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"typescript/reference/base/#returns_37","title":"Returns","text":"<p><code>undefined</code> | <code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#irelement","title":"irElement()","text":"<p>irElement(<code>type</code>, <code>props</code>, ...<code>children</code>): <code>DOMElement</code>\\&lt;{[<code>k</code>: <code>string</code>]: <code>undefined</code> | { }; }, <code>Element</code>&gt;</p> <p>Defined in: packages/poml/base.tsx:154</p> <p>Create an element that will be visible in the IR. Helper function for logging and debugging purposes.</p>"},{"location":"typescript/reference/base/#parameters_26","title":"Parameters","text":""},{"location":"typescript/reference/base/#type_5","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#props_3","title":"props","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#children","title":"children","text":"<p>...<code>ReactNode</code>[]</p>"},{"location":"typescript/reference/base/#returns_38","title":"Returns","text":"<p><code>DOMElement</code>\\&lt;{[<code>k</code>: <code>string</code>]: <code>undefined</code> | { }; }, <code>Element</code>&gt;</p>"},{"location":"typescript/reference/base/#listcomponents","title":"listComponents()","text":"<p>listComponents(): <code>PomlComponent</code>[]</p> <p>Defined in: packages/poml/base.tsx:996</p>"},{"location":"typescript/reference/base/#returns_39","title":"Returns","text":"<p><code>PomlComponent</code>[]</p>"},{"location":"typescript/reference/base/#richcontentfromsourcemap","title":"richContentFromSourceMap()","text":"<p>richContentFromSourceMap(<code>contents</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:85</p>"},{"location":"typescript/reference/base/#parameters_27","title":"Parameters","text":""},{"location":"typescript/reference/base/#contents","title":"contents","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/base/#returns_40","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/base/#sourceprovider","title":"SourceProvider()","text":"<p>SourceProvider(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: packages/poml/base.tsx:571</p>"},{"location":"typescript/reference/base/#parameters_28","title":"Parameters","text":""},{"location":"typescript/reference/base/#__namedparameters","title":"__namedParameters","text":"<p><code>PropsWithChildren</code>\\&lt;{ <code>source</code>: <code>string</code>; }&gt;</p>"},{"location":"typescript/reference/base/#returns_41","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/base/#stylesheetprovider","title":"StyleSheetProvider()","text":"<p>StyleSheetProvider(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: packages/poml/base.tsx:522</p>"},{"location":"typescript/reference/base/#parameters_29","title":"Parameters","text":""},{"location":"typescript/reference/base/#__namedparameters_1","title":"__namedParameters","text":"<p><code>PropsWithChildren</code>\\&lt;{ <code>stylesheet</code>: <code>StyleSheet</code>; }&gt;</p>"},{"location":"typescript/reference/base/#returns_42","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/base/#trimchildrenwhitespace","title":"trimChildrenWhiteSpace()","text":"<p>trimChildrenWhiteSpace(<code>children</code>, <code>props</code>): (<code>undefined</code> | <code>null</code> | <code>string</code> | <code>number</code> | <code>bigint</code> | <code>boolean</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt; | <code>Iterable</code>\\&lt;<code>ReactNode</code>, <code>any</code>, <code>any</code>&gt; | <code>Promise</code>\\&lt;<code>AwaitedReactNode</code>&gt;)[]</p> <p>Defined in: packages/poml/base.tsx:180</p>"},{"location":"typescript/reference/base/#parameters_30","title":"Parameters","text":""},{"location":"typescript/reference/base/#children_1","title":"children","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/base/#props_4","title":"props","text":"<p><code>PropsBase</code></p>"},{"location":"typescript/reference/base/#returns_43","title":"Returns","text":"<p>(<code>undefined</code> | <code>null</code> | <code>string</code> | <code>number</code> | <code>bigint</code> | <code>boolean</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt; | <code>Iterable</code>\\&lt;<code>ReactNode</code>, <code>any</code>, <code>any</code>&gt; | <code>Promise</code>\\&lt;<code>AwaitedReactNode</code>&gt;)[]</p>"},{"location":"typescript/reference/base/#unregistercomponent","title":"unregisterComponent()","text":"<p>unregisterComponent(<code>alias</code>): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:980</p>"},{"location":"typescript/reference/base/#parameters_31","title":"Parameters","text":""},{"location":"typescript/reference/base/#alias_2","title":"alias","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#returns_44","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#usewithcatch","title":"useWithCatch()","text":"<p>useWithCatch\\&lt;<code>T</code>&gt;(<code>promise</code>, <code>props</code>): <code>void</code> | <code>T</code></p> <p>Defined in: packages/poml/base.tsx:458</p>"},{"location":"typescript/reference/base/#type-parameters_3","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t_3","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters_32","title":"Parameters","text":""},{"location":"typescript/reference/base/#promise","title":"promise","text":"<p><code>Promise</code>\\&lt;<code>T</code>&gt;</p>"},{"location":"typescript/reference/base/#props_5","title":"props","text":"<p><code>PropsBase</code></p>"},{"location":"typescript/reference/base/#returns_45","title":"Returns","text":"<p><code>void</code> | <code>T</code></p>"},{"location":"typescript/reference/cli/","title":"cli","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/components/","title":"components","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/components/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/components/#basecaptionedparagraphprops","title":"BaseCaptionedParagraphProps","text":"<p>Defined in: packages/poml/components/utils.tsx:15</p>"},{"location":"typescript/reference/components/#extends","title":"Extends","text":"<ul> <li><code>PropsSyntaxAny</code></li> </ul>"},{"location":"typescript/reference/components/#properties","title":"Properties","text":""},{"location":"typescript/reference/components/#captionending","title":"captionEnding?","text":"<p><code>optional</code> captionEnding: <code>\"newline\"</code> | <code>\"none\"</code> | <code>\"colon\"</code> | <code>\"colon-newline\"</code></p> <p>Defined in: packages/poml/components/utils.tsx:19</p>"},{"location":"typescript/reference/components/#captionserialized","title":"captionSerialized?","text":"<p><code>optional</code> captionSerialized: <code>string</code></p> <p>Defined in: packages/poml/components/utils.tsx:16</p>"},{"location":"typescript/reference/components/#captionstyle","title":"captionStyle?","text":"<p><code>optional</code> captionStyle: <code>\"header\"</code> | <code>\"bold\"</code> | <code>\"plain\"</code> | <code>\"hidden\"</code></p> <p>Defined in: packages/poml/components/utils.tsx:17</p>"},{"location":"typescript/reference/components/#captiontailingspace","title":"captionTailingSpace?","text":"<p><code>optional</code> captionTailingSpace: <code>boolean</code></p> <p>Defined in: packages/poml/components/utils.tsx:20</p>"},{"location":"typescript/reference/components/#captiontexttransform","title":"captionTextTransform?","text":"<p><code>optional</code> captionTextTransform: <code>\"upper\"</code> | <code>\"lower\"</code> | <code>\"capitalize\"</code> | <code>\"none\"</code></p> <p>Defined in: packages/poml/components/utils.tsx:18</p>"},{"location":"typescript/reference/components/#charlimit","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from","title":"Inherited from","text":"<p><code>PropsSyntaxAny.charLimit</code></p>"},{"location":"typescript/reference/components/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/components/#inherited-from_1","title":"Inherited from","text":"<p><code>PropsSyntaxAny.className</code></p>"},{"location":"typescript/reference/components/#name","title":"name?","text":"<p><code>optional</code> name: <code>string</code></p> <p>Defined in: packages/poml/presentation.tsx:436</p>"},{"location":"typescript/reference/components/#inherited-from_2","title":"Inherited from","text":"<p><code>PropsSyntaxAny.name</code></p>"},{"location":"typescript/reference/components/#originalendindex","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/components/#inherited-from_3","title":"Inherited from","text":"<p><code>PropsSyntaxAny.originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/components/#inherited-from_4","title":"Inherited from","text":"<p><code>PropsSyntaxAny.originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_5","title":"Inherited from","text":"<p><code>PropsSyntaxAny.priority</code></p>"},{"location":"typescript/reference/components/#sourcepath","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/components/#inherited-from_6","title":"Inherited from","text":"<p><code>PropsSyntaxAny.sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/components/#inherited-from_7","title":"Inherited from","text":"<p><code>PropsSyntaxAny.speaker</code></p>"},{"location":"typescript/reference/components/#syntax","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_8","title":"Inherited from","text":"<p><code>PropsSyntaxAny.syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_9","title":"Inherited from","text":"<p><code>PropsSyntaxAny.tokenLimit</code></p>"},{"location":"typescript/reference/components/#type","title":"type?","text":"<p><code>optional</code> type: <code>AnyValue</code></p> <p>Defined in: packages/poml/presentation.tsx:437</p>"},{"location":"typescript/reference/components/#inherited-from_10","title":"Inherited from","text":"<p><code>PropsSyntaxAny.type</code></p>"},{"location":"typescript/reference/components/#whitespace","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/components/#inherited-from_11","title":"Inherited from","text":"<p><code>PropsSyntaxAny.whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/components/#inherited-from_12","title":"Inherited from","text":"<p><code>PropsSyntaxAny.writerOptions</code></p>"},{"location":"typescript/reference/components/#folderprops","title":"FolderProps","text":"<p>Defined in: packages/poml/components/tree.tsx:310</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_1","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/components/#charlimit_1","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_13","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_1","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/components/#inherited-from_14","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#data","title":"data?","text":"<p><code>optional</code> data: <code>TreeItemData</code>[]</p> <p>Defined in: packages/poml/components/tree.tsx:312</p>"},{"location":"typescript/reference/components/#filter","title":"filter?","text":"<p><code>optional</code> filter: <code>string</code> | <code>RegExp</code></p> <p>Defined in: packages/poml/components/tree.tsx:313</p>"},{"location":"typescript/reference/components/#maxdepth","title":"maxDepth?","text":"<p><code>optional</code> maxDepth: <code>number</code></p> <p>Defined in: packages/poml/components/tree.tsx:314</p>"},{"location":"typescript/reference/components/#originalendindex_1","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/components/#inherited-from_15","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_1","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/components/#inherited-from_16","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority_1","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_17","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#showcontent","title":"showContent?","text":"<p><code>optional</code> showContent: <code>boolean</code></p> <p>Defined in: packages/poml/components/tree.tsx:315</p>"},{"location":"typescript/reference/components/#sourcepath_1","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/components/#inherited-from_18","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_1","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/components/#inherited-from_19","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#src","title":"src?","text":"<p><code>optional</code> src: <code>string</code></p> <p>Defined in: packages/poml/components/tree.tsx:311</p>"},{"location":"typescript/reference/components/#syntax_1","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_20","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_1","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_21","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#whitespace_1","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/components/#inherited-from_22","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_1","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/components/#inherited-from_23","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#recordcolumns","title":"RecordColumns","text":"<p>Defined in: packages/poml/components/table.tsx:17</p>"},{"location":"typescript/reference/components/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/components/#columns","title":"columns?","text":"<p><code>optional</code> columns: <code>ColumnDefinition</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:19</p>"},{"location":"typescript/reference/components/#records","title":"records","text":"<p>records: <code>any</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:18</p>"},{"location":"typescript/reference/components/#tableprops","title":"TableProps","text":"<p>Defined in: packages/poml/components/table.tsx:24</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_2","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_3","title":"Properties","text":""},{"location":"typescript/reference/components/#charlimit_2","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_24","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_2","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/components/#inherited-from_25","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#columns_1","title":"columns?","text":"<p><code>optional</code> columns: <code>ColumnDefinition</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:26</p>"},{"location":"typescript/reference/components/#maxcolumns","title":"maxColumns?","text":"<p><code>optional</code> maxColumns: <code>number</code></p> <p>Defined in: packages/poml/components/table.tsx:32</p>"},{"location":"typescript/reference/components/#maxrecords","title":"maxRecords?","text":"<p><code>optional</code> maxRecords: <code>number</code></p> <p>Defined in: packages/poml/components/table.tsx:31</p>"},{"location":"typescript/reference/components/#originalendindex_2","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/components/#inherited-from_26","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_2","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/components/#inherited-from_27","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#parser","title":"parser?","text":"<p><code>optional</code> parser: <code>TableParser</code></p> <p>Defined in: packages/poml/components/table.tsx:28</p>"},{"location":"typescript/reference/components/#priority_2","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_28","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#records_1","title":"records?","text":"<p><code>optional</code> records: <code>string</code> | <code>any</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:25</p>"},{"location":"typescript/reference/components/#selectedcolumns","title":"selectedColumns?","text":"<p><code>optional</code> selectedColumns: <code>string</code> | <code>string</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:29</p>"},{"location":"typescript/reference/components/#selectedrecords","title":"selectedRecords?","text":"<p><code>optional</code> selectedRecords: <code>string</code> | <code>number</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:30</p>"},{"location":"typescript/reference/components/#sourcepath_2","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/components/#inherited-from_29","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_2","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/components/#inherited-from_30","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#src_1","title":"src?","text":"<p><code>optional</code> src: <code>string</code></p> <p>Defined in: packages/poml/components/table.tsx:27</p>"},{"location":"typescript/reference/components/#syntax_2","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_31","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_2","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_32","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#whitespace_2","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/components/#inherited-from_33","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_2","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/components/#inherited-from_34","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#treeitemdata","title":"TreeItemData","text":"<p>Defined in: packages/poml/components/tree.tsx:17</p>"},{"location":"typescript/reference/components/#properties_4","title":"Properties","text":""},{"location":"typescript/reference/components/#children","title":"children?","text":"<p><code>optional</code> children: <code>TreeItemData</code>[]</p> <p>Defined in: packages/poml/components/tree.tsx:20</p>"},{"location":"typescript/reference/components/#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/components/tree.tsx:18</p>"},{"location":"typescript/reference/components/#value","title":"value?","text":"<p><code>optional</code> value: <code>string</code></p> <p>Defined in: packages/poml/components/tree.tsx:19</p>"},{"location":"typescript/reference/components/#treeprops","title":"TreeProps","text":"<p>Defined in: packages/poml/components/tree.tsx:23</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_3","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_5","title":"Properties","text":""},{"location":"typescript/reference/components/#charlimit_3","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_35","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_3","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/components/#inherited-from_36","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#items","title":"items","text":"<p>items: <code>TreeItemData</code>[]</p> <p>Defined in: packages/poml/components/tree.tsx:24</p>"},{"location":"typescript/reference/components/#originalendindex_3","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/components/#inherited-from_37","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_3","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/components/#inherited-from_38","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority_3","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_39","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#showcontent_1","title":"showContent?","text":"<p><code>optional</code> showContent: <code>boolean</code></p> <p>Defined in: packages/poml/components/tree.tsx:25</p>"},{"location":"typescript/reference/components/#sourcepath_3","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/components/#inherited-from_40","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_3","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/components/#inherited-from_41","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#syntax_3","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_42","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_3","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_43","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#whitespace_3","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/components/#inherited-from_44","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_3","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/components/#inherited-from_45","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#webpageprops","title":"WebpageProps","text":"<p>Defined in: packages/poml/components/webpage.tsx:9</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_4","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_6","title":"Properties","text":""},{"location":"typescript/reference/components/#base64","title":"base64?","text":"<p><code>optional</code> base64: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:13</p>"},{"location":"typescript/reference/components/#buffer","title":"buffer?","text":"<p><code>optional</code> buffer: <code>string</code> | <code>Buffer</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p> <p>Defined in: packages/poml/components/webpage.tsx:12</p>"},{"location":"typescript/reference/components/#charlimit_4","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_46","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_4","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/components/#inherited-from_47","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#extracttext","title":"extractText?","text":"<p><code>optional</code> extractText: <code>boolean</code></p> <p>Defined in: packages/poml/components/webpage.tsx:14</p>"},{"location":"typescript/reference/components/#originalendindex_4","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/components/#inherited-from_48","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_4","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/components/#inherited-from_49","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority_4","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_50","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#selector","title":"selector?","text":"<p><code>optional</code> selector: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:15</p>"},{"location":"typescript/reference/components/#sourcepath_4","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/components/#inherited-from_51","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_4","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/components/#inherited-from_52","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#src_2","title":"src?","text":"<p><code>optional</code> src: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:10</p>"},{"location":"typescript/reference/components/#syntax_4","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_53","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_4","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_54","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#url","title":"url?","text":"<p><code>optional</code> url: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:11</p>"},{"location":"typescript/reference/components/#whitespace_4","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/components/#inherited-from_55","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_4","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/components/#inherited-from_56","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#variables","title":"Variables","text":""},{"location":"typescript/reference/components/#aimessage","title":"AiMessage()","text":"<p><code>const</code> AiMessage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:62</p> <p>Wrap the contents in a AI message.</p>"},{"location":"typescript/reference/components/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/components/#props","title":"props","text":""},{"location":"typescript/reference/components/#children_1","title":"children?","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/components/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/components/#example","title":"Example","text":"<pre><code>&lt;ai-msg&gt;Paris&lt;/ai-msg&gt;\n</code></pre>"},{"location":"typescript/reference/components/#caption","title":"Caption()","text":"<p><code>const</code> Caption: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/components/utils.tsx:60</p>"},{"location":"typescript/reference/components/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_1","title":"props","text":"<p><code>CaptionedParagraphProps</code></p>"},{"location":"typescript/reference/components/#returns_1","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/components/#captionedparagraph","title":"CaptionedParagraph()","text":"<p><code>const</code> CaptionedParagraph: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/utils.tsx:155</p> <p>CaptionedParagraph (<code>&lt;cp&gt;</code> for short) creates a paragraph with a customized caption title.</p>"},{"location":"typescript/reference/components/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_2","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CaptionedParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_2","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_1","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_1","title":"Example","text":"<pre><code>&lt;cp caption=\"Constraints\"&gt;\n  &lt;list&gt;\n    &lt;item&gt;Do not exceed 1000 tokens.&lt;/item&gt;\n    &lt;item&gt;Please use simple words.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/cp&gt;\n</code></pre>"},{"location":"typescript/reference/components/#conversation","title":"Conversation()","text":"<p><code>const</code> Conversation: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:148</p> <p>Display a conversation between system, human and AI.</p>"},{"location":"typescript/reference/components/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_3","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ConversationProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_3","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#example_2","title":"Example","text":"<pre><code>&lt;conversation messages=\"{{[{ speaker: 'human', content: 'What is the capital of France?' }, { speaker: 'ai', content: 'Paris' }]}}\" /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#document","title":"Document()","text":"<p><code>const</code> Document: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/document.tsx:266</p> <p>Displaying an external document like PDF, TXT or DOCX.</p>"},{"location":"typescript/reference/components/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_4","title":"props","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_4","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_2","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/components/#example_3","title":"Example","text":"<p>To display a Word document without including the real multimedia: <pre><code>&lt;Document src=\"sample.docx\" multimedia=\"false\"/&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#example_4","title":"Example()","text":"<p><code>const</code> Example: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:317</p> <p>Example is useful for providing a context, helping the model to understand what kind of inputs and outputs are expected. It can also be used to demonstrate the desired output style, clarifying the structure, tone, or level of detail in the response.</p>"},{"location":"typescript/reference/components/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_5","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ExampleProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_5","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_3","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_5","title":"Example","text":"<pre><code>&lt;example&gt;\n  &lt;input&gt;What is the capital of France?&lt;/input&gt;\n  &lt;output&gt;Paris&lt;/output&gt;\n&lt;/example&gt;\n</code></pre> <pre><code>&lt;task&gt;Summarize the following passage in a single sentence.&lt;/task&gt;\n&lt;example&gt;\n  &lt;input caption=\"Passage\"&gt;The sun provides energy for life on Earth through processes like photosynthesis.&lt;/input&gt;\n  &lt;output caption=\"Summary\"&gt;The sun is essential for energy and life processes on Earth.&lt;/output&gt;\n&lt;/example&gt;\n</code></pre>"},{"location":"typescript/reference/components/#exampleinput","title":"ExampleInput()","text":"<p><code>const</code> ExampleInput: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:375</p> <p>ExampleInput (<code>&lt;input&gt;</code>) is a paragraph that represents an example input. By default, it's spoken by a human speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"typescript/reference/components/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_6","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_6","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_4","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_6","title":"Example","text":"<pre><code>&lt;input&gt;What is the capital of France?&lt;/input&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;input&gt;What is the capital of {{country}}?&lt;/input&gt;\n</code></pre>"},{"location":"typescript/reference/components/#exampleoutput","title":"ExampleOutput()","text":"<p><code>const</code> ExampleOutput: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:420</p> <p>ExampleOutput (<code>&lt;output&gt;</code>) is a paragraph that represents an example output. By default, it's spoken by a AI speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"typescript/reference/components/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_7","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_7","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_5","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_7","title":"Example","text":"<pre><code>&lt;output&gt;The capital of France is Paris.&lt;/output&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;output&gt;The capital of {{country}} is {{capital}}.&lt;/output&gt;\n</code></pre>"},{"location":"typescript/reference/components/#exampleset","title":"ExampleSet()","text":"<p><code>const</code> ExampleSet: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:262</p> <p>Example set (<code>&lt;examples&gt;</code>) is a collection of examples that are usually presented in a list. With the example set, you can manage multiple examples under a single title and optionally an introducer, as well as the same <code>chat</code> format. You can also choose to use <code>&lt;example&gt;</code> purely without example set.</p>"},{"location":"typescript/reference/components/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_8","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ExampleSetProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_8","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_6","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_8","title":"Example","text":"<pre><code>&lt;examples chat={{true}}&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of France?&lt;/input&gt;\n    &lt;output&gt;Paris&lt;/output&gt;\n  &lt;/example&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of Germany?&lt;/input&gt;\n    &lt;output&gt;Berlin&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n</code></pre>"},{"location":"typescript/reference/components/#folder","title":"Folder()","text":"<p><code>const</code> Folder: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/tree.tsx:337</p> <p>Displays a directory structure as a tree.</p>"},{"location":"typescript/reference/components/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_9","title":"props","text":"<p><code>FolderProps</code></p>"},{"location":"typescript/reference/components/#returns_9","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#example_9","title":"Example","text":"<p>To display a directory structure with a filter for Python files: <pre><code>&lt;folder src=\"project_dir\" filter=\".*\\.py$\" maxDepth=\"3\" /&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#hint","title":"Hint()","text":"<p><code>const</code> Hint: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:174</p> <p>Hint can be used anywhere in the prompt where you want to provide a helpful tip or explanation. It is usually a short and concise statement that guides the LLM in the right direction.</p>"},{"location":"typescript/reference/components/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_10","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_10","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_7","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_10","title":"Example","text":"<pre><code>&lt;hint&gt;Alice first purchased 4 apples and then 3 more, so she has 7 apples in total.&lt;/hint&gt;\n</code></pre>"},{"location":"typescript/reference/components/#humanmessage","title":"HumanMessage()","text":"<p><code>const</code> HumanMessage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:43</p> <p>Wrap the contents in a user message.</p>"},{"location":"typescript/reference/components/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_11","title":"props","text":""},{"location":"typescript/reference/components/#children_2","title":"children?","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/components/#returns_11","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_8","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/components/#example_11","title":"Example","text":"<pre><code>&lt;user-msg&gt;What is the capital of France?&lt;/user-msg&gt;\n</code></pre>"},{"location":"typescript/reference/components/#introducer","title":"Introducer()","text":"<p><code>const</code> Introducer: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:203</p> <p>Introducer is a paragraph before a long paragraph (usually a list of examples, steps, or instructions). It serves as a context introducing what is expected to follow.</p>"},{"location":"typescript/reference/components/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_12","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_12","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_9","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_12","title":"Example","text":"<pre><code>&lt;introducer&gt;Here are some examples.&lt;/introducer&gt;\n</code></pre>"},{"location":"typescript/reference/components/#messagecontent","title":"MessageContent()","text":"<p><code>const</code> MessageContent: (<code>props</code>) =&gt; <code>undefined</code> | <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:85</p> <p>Display a message content.</p>"},{"location":"typescript/reference/components/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_13","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>MessageContentProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_13","title":"Returns","text":"<p><code>undefined</code> | <code>Element</code></p>"},{"location":"typescript/reference/components/#example_13","title":"Example","text":"<pre><code>&lt;msg-content content=\"What is the capital of France?\" /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#outputformat","title":"OutputFormat()","text":"<p><code>const</code> OutputFormat: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:106</p> <p>Output format deals with the format in which the model should provide the output. It can be a specific format such as JSON, XML, or CSV, or a general format such as a story, a diagram or steps of instructions. Please refrain from specifying too complex formats that the model may not be able to generate, such as a PDF file or a video.</p>"},{"location":"typescript/reference/components/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_14","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_14","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_10","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_14","title":"Example","text":"<pre><code>&lt;output-format&gt;Respond with a JSON without additional characters or punctuations.&lt;/output-format&gt;\n</code></pre>"},{"location":"typescript/reference/components/#question","title":"Question()","text":"<p><code>const</code> Question: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:465</p> <p>Question (<code>&lt;qa&gt;</code>) is actually a combination of a question and a prompt for the answer. It's usually used at the end of a prompt to ask a question. The question is followed by a prompt for answer (e.g., <code>Answer:</code>) to guide the model to respond.</p>"},{"location":"typescript/reference/components/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_15","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>QuestionProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_15","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_11","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_15","title":"Example","text":"<pre><code>&lt;qa&gt;What is the capital of France?&lt;/qa&gt;\n</code></pre>"},{"location":"typescript/reference/components/#role","title":"Role()","text":"<p><code>const</code> Role: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:31</p> <p>Specifies the role you want the language model to assume when responding. Defining a role provides the model with a perspective or context, such as a scientist, poet, child, or any other persona you choose.</p>"},{"location":"typescript/reference/components/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_16","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_16","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_12","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_16","title":"Example","text":"<pre><code>&lt;role&gt;You are a data scientist.&lt;/role&gt;\n</code></pre>"},{"location":"typescript/reference/components/#stepwiseinstructions","title":"StepwiseInstructions()","text":"<p><code>const</code> StepwiseInstructions: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:143</p> <p>StepwiseInstructions that elaborates the task by providing a list of steps or instructions. Each step should be concise and clear, and the list should be easy to follow.</p>"},{"location":"typescript/reference/components/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_17","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_17","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_13","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_17","title":"Example","text":"<pre><code>&lt;stepwise-instructions&gt;\n  &lt;list&gt;\n    &lt;item&gt;Interpret and rewrite user's query.&lt;/item&gt;\n    &lt;item&gt;Think of a plan to solve the query.&lt;/item&gt;\n    &lt;item&gt;Generate a response based on the plan.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/stepwise-instructions&gt;\n</code></pre>"},{"location":"typescript/reference/components/#systemmessage","title":"SystemMessage()","text":"<p><code>const</code> SystemMessage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:24</p> <p>Wrap the contents in a system message.</p>"},{"location":"typescript/reference/components/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_18","title":"props","text":""},{"location":"typescript/reference/components/#children_3","title":"children?","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/components/#returns_18","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_14","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/components/#example_18","title":"Example","text":"<pre><code>&lt;system-msg&gt;Answer concisely.&lt;/system-msg&gt;\n</code></pre>"},{"location":"typescript/reference/components/#table","title":"Table()","text":"<p><code>const</code> Table: (<code>props</code>) =&gt; <code>undefined</code> | <code>Element</code></p> <p>Defined in: packages/poml/components/table.tsx:382</p> <p>Displaying a table with records and columns.</p>"},{"location":"typescript/reference/components/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_19","title":"props","text":"<p><code>TableProps</code></p>"},{"location":"typescript/reference/components/#returns_19","title":"Returns","text":"<p><code>undefined</code> | <code>Element</code></p>"},{"location":"typescript/reference/components/#see_15","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/components/#example_19","title":"Example","text":"<pre><code>&lt;table records=\"{{[{ name: 'Alice', age: 20 }, { name: 'Bob', age: 30 }]}}\" /&gt;\n</code></pre> <p>To import an excel file, and display the first 10 records in csv syntax:</p> <pre><code>&lt;table src=\"data.xlsx\" parser=\"excel\" maxRecords=\"10\" syntax=\"csv\" /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#task","title":"Task()","text":"<p><code>const</code> Task: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:74</p> <p>Task represents the action you want the language model to perform. It is a directive or instruction that you want the model to follow. Task is usually not long, but rather a concise and clear statement. Users can also include a list of steps or instructions to complete the task.</p>"},{"location":"typescript/reference/components/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_20","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_20","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_16","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_20","title":"Example","text":"<pre><code>&lt;task&gt;Cook a recipe on how to prepare a beef dish.&lt;/task&gt;\n</code></pre> <p>When including a list of steps: <pre><code>&lt;task&gt;\n  Planning a schedule for a travel.\n  &lt;list&gt;\n    &lt;item&gt;Decide on the destination and plan the duration.&lt;/item&gt;\n    &lt;item&gt;Find useful information about the destination.&lt;/item&gt;\n    &lt;item&gt;Write down the schedule for each day.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/task&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#tree","title":"Tree()","text":"<p><code>const</code> Tree: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/tree.tsx:203</p> <p>Renders a tree structure in various formats.</p>"},{"location":"typescript/reference/components/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_21","title":"props","text":"<p><code>TreeProps</code></p>"},{"location":"typescript/reference/components/#returns_21","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#example_21","title":"Example","text":"<pre><code>&lt;Tree items={treeData} syntax=\"markdown\" showContent={true} /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#webpage","title":"Webpage()","text":"<p><code>const</code> Webpage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/webpage.tsx:128</p> <p>Displays content from a webpage.</p>"},{"location":"typescript/reference/components/#parameters_22","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_22","title":"props","text":"<p><code>WebpageProps</code></p>"},{"location":"typescript/reference/components/#returns_22","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_17","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/components/#example_22","title":"Example","text":"<p>Display content from a URL: <pre><code>&lt;webpage url=\"https://example.com\" /&gt;\n</code></pre></p> <p>Extract only specific content using a selector: <pre><code>&lt;webpage url=\"https://example.com\" selector=\"main article\" /&gt;\n</code></pre></p> <p>Convert HTML to structured POML components: <pre><code>&lt;webpage url=\"https://example.com\" extractText=\"false\" /&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#functions","title":"Functions","text":""},{"location":"typescript/reference/components/#htmltopoml","title":"htmlToPoml()","text":"<p>htmlToPoml(<code>element</code>, <code>$</code>, <code>options?</code>): <code>ReactElement</code></p> <p>Defined in: packages/poml/components/document.tsx:115</p>"},{"location":"typescript/reference/components/#parameters_23","title":"Parameters","text":""},{"location":"typescript/reference/components/#element","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/components/#_1","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/components/#options","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_23","title":"Returns","text":"<p><code>ReactElement</code></p>"},{"location":"typescript/reference/components/#parsepythonstyleslice","title":"parsePythonStyleSlice()","text":"<p>parsePythonStyleSlice(<code>slice</code>, <code>totalLength</code>): [<code>number</code>, <code>number</code>]</p> <p>Defined in: packages/poml/components/utils.tsx:196</p>"},{"location":"typescript/reference/components/#parameters_24","title":"Parameters","text":""},{"location":"typescript/reference/components/#slice","title":"slice","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#totallength","title":"totalLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/components/#returns_24","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>]</p>"},{"location":"typescript/reference/components/#readdocx","title":"readDocx()","text":"<p>readDocx(<code>dataBuffer</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:175</p>"},{"location":"typescript/reference/components/#parameters_25","title":"Parameters","text":""},{"location":"typescript/reference/components/#databuffer","title":"dataBuffer","text":"<p><code>Buffer</code></p>"},{"location":"typescript/reference/components/#options_1","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_25","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readdocxfrompath","title":"readDocxFromPath()","text":"<p>readDocxFromPath(<code>filePath</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:181</p>"},{"location":"typescript/reference/components/#parameters_26","title":"Parameters","text":""},{"location":"typescript/reference/components/#filepath","title":"filePath","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#options_2","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_26","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readpdf","title":"readPdf()","text":"<p>readPdf(<code>dataBuffer</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:47</p>"},{"location":"typescript/reference/components/#parameters_27","title":"Parameters","text":""},{"location":"typescript/reference/components/#databuffer_1","title":"dataBuffer","text":"<p><code>Buffer</code></p>"},{"location":"typescript/reference/components/#options_3","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_27","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readpdffrompath","title":"readPdfFromPath()","text":"<p>readPdfFromPath(<code>filePath</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:59</p>"},{"location":"typescript/reference/components/#parameters_28","title":"Parameters","text":""},{"location":"typescript/reference/components/#filepath_1","title":"filePath","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#options_4","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_28","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readtxt","title":"readTxt()","text":"<p>readTxt(<code>dataBuffer</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:186</p>"},{"location":"typescript/reference/components/#parameters_29","title":"Parameters","text":""},{"location":"typescript/reference/components/#databuffer_2","title":"dataBuffer","text":"<p><code>Buffer</code></p>"},{"location":"typescript/reference/components/#options_5","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_29","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readtxtfrompath","title":"readTxtFromPath()","text":"<p>readTxtFromPath(<code>filePath</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:191</p>"},{"location":"typescript/reference/components/#parameters_30","title":"Parameters","text":""},{"location":"typescript/reference/components/#filepath_2","title":"filePath","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#options_6","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_30","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#torecordcolumns","title":"toRecordColumns()","text":"<p>toRecordColumns(<code>props</code>): <code>RecordColumns</code></p> <p>Defined in: packages/poml/components/table.tsx:243</p>"},{"location":"typescript/reference/components/#parameters_31","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_23","title":"props","text":"<p><code>TableProps</code></p>"},{"location":"typescript/reference/components/#returns_31","title":"Returns","text":"<p><code>RecordColumns</code></p>"},{"location":"typescript/reference/essentials/","title":"essentials","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/essentials/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/essentials/#propssyntaxbase","title":"PropsSyntaxBase","text":"<p>Defined in: packages/poml/essentials.tsx:20</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/essentials/#extends","title":"Extends","text":"<ul> <li><code>PropsBase</code></li> </ul>"},{"location":"typescript/reference/essentials/#extended-by","title":"Extended by","text":"<ul> <li><code>ToolRequestProps</code></li> <li><code>ToolResponseProps</code></li> <li><code>TableProps</code></li> <li><code>TreeProps</code></li> <li><code>FolderProps</code></li> <li><code>WebpageProps</code></li> </ul>"},{"location":"typescript/reference/essentials/#properties","title":"Properties","text":""},{"location":"typescript/reference/essentials/#charlimit","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/essentials/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/essentials/#inherited-from_1","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>className</code></p>"},{"location":"typescript/reference/essentials/#originalendindex","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/essentials/#inherited-from_2","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/essentials/#originalstartindex","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/essentials/#inherited-from_3","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/essentials/#priority","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/essentials/#inherited-from_4","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/essentials/#sourcepath","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/essentials/#inherited-from_5","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/essentials/#speaker","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/essentials/#inherited-from_6","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/essentials/#syntax","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/essentials/#tokenlimit","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from_7","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/essentials/#whitespace","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/essentials/#inherited-from_8","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/essentials/#writeroptions","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/essentials/#inherited-from_9","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/essentials/#toolrequestprops","title":"ToolRequestProps","text":"<p>Defined in: packages/poml/essentials.tsx:744</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/essentials/#extends_1","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code>.<code>ToolRequestProps</code></li> </ul>"},{"location":"typescript/reference/essentials/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/essentials/#charlimit_1","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from_10","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/essentials/#classname_1","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/essentials/#inherited-from_11","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/essentials/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: packages/poml/presentation.tsx:612</p>"},{"location":"typescript/reference/essentials/#inherited-from_12","title":"Inherited from","text":"<p><code>MultiMedia.ToolRequestProps.id</code></p>"},{"location":"typescript/reference/essentials/#name","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/presentation.tsx:613</p>"},{"location":"typescript/reference/essentials/#inherited-from_13","title":"Inherited from","text":"<p><code>MultiMedia.ToolRequestProps.name</code></p>"},{"location":"typescript/reference/essentials/#originalendindex_1","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/essentials/#inherited-from_14","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/essentials/#originalstartindex_1","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/essentials/#inherited-from_15","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/essentials/#parameters","title":"parameters","text":"<p>parameters: <code>any</code></p> <p>Defined in: packages/poml/presentation.tsx:614</p>"},{"location":"typescript/reference/essentials/#inherited-from_16","title":"Inherited from","text":"<p><code>MultiMedia.ToolRequestProps.parameters</code></p>"},{"location":"typescript/reference/essentials/#priority_1","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/essentials/#inherited-from_17","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/essentials/#sourcepath_1","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/essentials/#inherited-from_18","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/essentials/#speaker_1","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/essentials/#inherited-from_19","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/essentials/#syntax_1","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/essentials/#inherited-from_20","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/essentials/#tokenlimit_1","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from_21","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/essentials/#whitespace_1","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/essentials/#inherited-from_22","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/essentials/#writeroptions_1","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/essentials/#inherited-from_23","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/essentials/#toolresponseprops","title":"ToolResponseProps","text":"<p>Defined in: packages/poml/essentials.tsx:746</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/essentials/#extends_2","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code>.<code>ToolResponseProps</code></li> </ul>"},{"location":"typescript/reference/essentials/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/essentials/#charlimit_2","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:143</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from_24","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/essentials/#classname_2","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:128</p>"},{"location":"typescript/reference/essentials/#inherited-from_25","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/essentials/#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: packages/poml/presentation.tsx:618</p>"},{"location":"typescript/reference/essentials/#inherited-from_26","title":"Inherited from","text":"<p><code>MultiMedia.ToolResponseProps.id</code></p>"},{"location":"typescript/reference/essentials/#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/presentation.tsx:619</p>"},{"location":"typescript/reference/essentials/#inherited-from_27","title":"Inherited from","text":"<p><code>MultiMedia.ToolResponseProps.name</code></p>"},{"location":"typescript/reference/essentials/#originalendindex_2","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:133</p>"},{"location":"typescript/reference/essentials/#inherited-from_28","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/essentials/#originalstartindex_2","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:132</p>"},{"location":"typescript/reference/essentials/#inherited-from_29","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/essentials/#priority_2","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:147</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/essentials/#inherited-from_30","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/essentials/#sourcepath_2","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:136</p>"},{"location":"typescript/reference/essentials/#inherited-from_31","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/essentials/#speaker_2","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:127</p>"},{"location":"typescript/reference/essentials/#inherited-from_32","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/essentials/#syntax_2","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/essentials/#inherited-from_33","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/essentials/#tokenlimit_2","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:145</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from_34","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/essentials/#whitespace_2","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:140</p>"},{"location":"typescript/reference/essentials/#inherited-from_35","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/essentials/#writeroptions_2","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:139</p>"},{"location":"typescript/reference/essentials/#inherited-from_36","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/essentials/#type-aliases","title":"Type Aliases","text":""},{"location":"typescript/reference/essentials/#propssyntaxany","title":"PropsSyntaxAny","text":"<p>PropsSyntaxAny = <code>PropsSyntaxBase</code> &amp; <code>Serialize.AnyProps</code></p> <p>Defined in: packages/poml/essentials.tsx:24</p>"},{"location":"typescript/reference/essentials/#variables","title":"Variables","text":""},{"location":"typescript/reference/essentials/#anyorfree","title":"AnyOrFree()","text":"<p><code>const</code> AnyOrFree: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:97</p>"},{"location":"typescript/reference/essentials/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>object</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#audio","title":"Audio()","text":"<p><code>const</code> Audio: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:719</p> <p>Audio (<code>&lt;audio&gt;</code>) embeds an audio file in the content.</p> <p>Accepts either a file path (<code>src</code>) or base64-encoded audio data (<code>base64</code>). The MIME type can be provided via <code>type</code> or will be inferred from the file extension.</p>"},{"location":"typescript/reference/essentials/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_1","title":"props","text":"<p><code>AudioProps</code></p>"},{"location":"typescript/reference/essentials/#returns_1","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/essentials/#examples","title":"Examples","text":"<pre><code>&lt;Audio src=\"path/to/audio.mp3\" /&gt;\n</code></pre> <pre><code>&lt;Audio base64=\"...\" type=\"audio/wav\" /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#bold","title":"Bold()","text":"<p><code>const</code> Bold: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:370</p> <p>Bold (<code>&lt;b&gt;</code>) emphasizes text in a bold style when using markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_2","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_2","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example","title":"Example","text":"<pre><code>&lt;p&gt;&lt;b&gt;Task:&lt;/b&gt; Do something.&lt;/p&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#code","title":"Code()","text":"<p><code>const</code> Code: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:493</p> <p>Code is used to represent code snippets or inline code in markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_3","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>InlineProps</code> &amp; <code>CodeProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_3","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_1","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_1","title":"Example","text":"<pre><code>&lt;code inline=\"true\"&gt;const x = 42;&lt;/code&gt;\n</code></pre> <pre><code>&lt;code lang=\"javascript\"&gt;\nconst x = 42;\n&lt;/code&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#dataobject","title":"DataObject()","text":"<p><code>const</code> DataObject: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:603</p> <p>DataObject (<code>&lt;obj&gt;</code>, <code>&lt;object&gt;</code>, <code>&lt;dataObj&gt;</code>) displays external data or object content. When in serialize mode, it's serialized according to the given serializer.</p>"},{"location":"typescript/reference/essentials/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_4","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>ObjectProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_4","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_2","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_2","title":"Example","text":"<pre><code>&lt;DataObject syntax=\"json\" data=\"{ key: 'value' }\" /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#header","title":"Header()","text":"<p><code>const</code> Header: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:305</p> <p>Header (<code>&lt;h&gt;</code>) renders headings in markup syntaxes. It's commonly used to highlight titles or section headings. The header level will be automatically computed based on the context. Use SubContent (<code>&lt;section&gt;</code>) for nested content.</p>"},{"location":"typescript/reference/essentials/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_5","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_5","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_3","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_3","title":"Example","text":"<pre><code>&lt;Header syntax=\"markdown\"&gt;Section Title&lt;/Header&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#image","title":"Image()","text":"<p><code>const</code> Image: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:650</p> <p>Image (<code>&lt;img&gt;</code>) displays an image in the content. Alternatively, it can also be shown as an alt text by specifying the <code>syntax</code> prop. Note that syntax must be specified as <code>multimedia</code> to show the image.</p>"},{"location":"typescript/reference/essentials/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_6","title":"props","text":"<p><code>ImageProps</code></p>"},{"location":"typescript/reference/essentials/#returns_6","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_4","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_4","title":"Example","text":"<pre><code>&lt;Image src=\"path/to/image.jpg\" alt=\"Image description\" position=\"bottom\" /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#inline","title":"Inline()","text":"<p><code>const</code> Inline: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:251</p> <p>Inline (<code>&lt;span&gt;</code>) is a container for inline content. When used with markup syntaxes, it wraps text in an inline style, without any preceding or following blank characters. In serializer syntaxes, it's treated as a generic value. Inline elements are not designed to be used alone (especially in serializer syntaxes). One might notice problematic renderings (e.g., speaker not applied) when using it alone.</p>"},{"location":"typescript/reference/essentials/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_7","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_7","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#example_5","title":"Example","text":"<pre><code>&lt;p&gt;I'm listening to &lt;span&gt;music&lt;/span&gt; right now.&lt;/p&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#italic","title":"Italic()","text":"<p><code>const</code> Italic: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:398</p> <p>Italic (<code>&lt;i&gt;</code>) emphasizes text in an italic style when using markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_8","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_8","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_5","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_6","title":"Example","text":"<pre><code>Your &lt;i&gt;italicized&lt;/i&gt; text.\n</code></pre>"},{"location":"typescript/reference/essentials/#list","title":"List()","text":"<p><code>const</code> List: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:529</p> <p>List (<code>&lt;list&gt;</code>) is a container for multiple ListItem (<code>&lt;item&gt;</code>) elements. When used with markup syntaxes, a bullet or numbering is added.</p>"},{"location":"typescript/reference/essentials/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_9","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ListProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_9","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_6","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_7","title":"Example","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#listitem","title":"ListItem()","text":"<p><code>const</code> ListItem: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:569</p> <p>ListItem (<code>&lt;item&gt;</code>) is an item within a List component. In markup mode, it is rendered with the specified bullet or numbering style.</p>"},{"location":"typescript/reference/essentials/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_10","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_10","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_7","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_8","title":"Example","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item blankLine=\"true\"&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#newline","title":"Newline()","text":"<p><code>const</code> Newline: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:282</p> <p>Newline (<code>&lt;br&gt;</code>) explicitly adds a line break, primarily in markup syntaxes. In serializer syntaxes, it's ignored.</p>"},{"location":"typescript/reference/essentials/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_11","title":"props","text":"<p><code>PropsSyntaxBase</code> &amp; <code>NewlineProps</code></p>"},{"location":"typescript/reference/essentials/#returns_11","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_8","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_9","title":"Example","text":"<pre><code>&lt;br /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#paragraph","title":"Paragraph()","text":"<p><code>const</code> Paragraph: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:207</p> <p>Paragraph (<code>&lt;p&gt;</code>) is a standalone section preceded by and followed by two blank lines in markup syntaxes. It's mostly used for text contents.</p>"},{"location":"typescript/reference/essentials/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_12","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_12","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_9","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/essentials/#example_10","title":"Example","text":"<pre><code>&lt;p&gt;Contents of the paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#poml","title":"Poml()","text":"<p><code>const</code> Poml: (<code>props</code>) =&gt; <code>Element</code> = <code>Text</code></p> <p>Defined in: packages/poml/essentials.tsx:192</p>"},{"location":"typescript/reference/essentials/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_13","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxAny</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_13","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#strikethrough","title":"Strikethrough()","text":"<p><code>const</code> Strikethrough: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:426</p> <p>Strikethrough (<code>&lt;s&gt;</code>, <code>&lt;strike&gt;</code>) indicates removed or invalid text in markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_14","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_14","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_10","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_11","title":"Example","text":"<pre><code>&lt;s&gt;This messages is removed.&lt;/s&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#subcontent","title":"SubContent()","text":"<p><code>const</code> SubContent: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:340</p> <p>SubContent (<code>&lt;section&gt;</code>) renders nested content, often following a header. The headers within the section will be automatically adjusted to a lower level.</p>"},{"location":"typescript/reference/essentials/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_15","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_15","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_11","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_12","title":"Example","text":"<pre><code>&lt;h&gt;Section Title&lt;/h&gt;\n&lt;section&gt;\n  &lt;h&gt;Sub-section Title&lt;/h&gt;  &lt;!-- Nested header --&gt;\n  &lt;p&gt;Sub-section details&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#text","title":"Text()","text":"<p><code>const</code> Text: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:173</p> <p>Text (<code>&lt;text&gt;</code>, <code>&lt;poml&gt;</code>) is a wrapper for any contents. By default, it uses <code>markdown</code> syntax and writes the contents within it directly to the output. When used with \"markup\" syntaxes, it renders a standalone section preceded and followed by one blank line. It's mostly used in the root element of a prompt, but it should also work in any other places. This component will be automatically added as a wrapping root element if it's not provided: 1. If the first element is pure text contents, <code>&lt;poml syntax=\"text\"&gt;</code> will be added. 2. If the first element is a POML component, <code>&lt;poml syntax=\"markdown\"&gt;</code> will be added.</p>"},{"location":"typescript/reference/essentials/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_16","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxAny</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_16","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#example_13","title":"Example","text":"<pre><code>&lt;poml syntax=\"text\"&gt;\nContents of the whole prompt.\n\n1. Your customized list.\n2. You don't need to know anything about POML.\n&lt;/poml&gt;\n</code></pre> <p>To render the whole prompt in markdown syntax with a \"human\" speaker:</p> <pre><code>&lt;poml syntax=\"markdown\" speaker=\"human\"&gt;\n  &lt;p&gt;You are a helpful assistant.&lt;/p&gt;\n  &lt;p&gt;What is the capital of France?&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>Experimental usage with limits and priority:</p> <pre><code>&lt;poml syntax=\"markdown\" tokenLimit=\"10\"&gt;\n  &lt;p priority=\"1\"&gt;This has lower priority and may be truncated first.&lt;/p&gt;\n  &lt;p priority=\"3\"&gt;This has higher priority and will be preserved longer.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#toolrequest","title":"ToolRequest()","text":"<p><code>const</code> ToolRequest: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:762</p> <p>ToolRequest represents an AI-generated tool request with parameters. Used to display tool calls made by AI models.</p>"},{"location":"typescript/reference/essentials/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_17","title":"props","text":"<p><code>ToolRequestProps</code></p>"},{"location":"typescript/reference/essentials/#returns_17","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#example_14","title":"Example","text":"<pre><code>&lt;ToolRequest id=\"123\" name=\"search\" parameters={{ query: \"hello\" }} /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#toolresponse","title":"ToolResponse()","text":"<p><code>const</code> ToolResponse: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:805</p> <p>ToolResponse represents the result of a tool execution. Used to display tool execution results with rich content.</p>"},{"location":"typescript/reference/essentials/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_18","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ToolResponseProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_18","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#example_15","title":"Example","text":"<pre><code>&lt;ToolResponse id=\"123\" name=\"search\"&gt;\n &lt;Paragraph&gt;Search results for \"hello\":&lt;/Paragraph&gt;\n &lt;List&gt;\n  &lt;ListItem&gt;Result 1&lt;/ListItem&gt;\n  &lt;ListItem&gt;Result 2&lt;/ListItem&gt;\n &lt;/List&gt;\n&lt;/ToolResponse&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#underline","title":"Underline()","text":"<p><code>const</code> Underline: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:456</p> <p>Underline (<code>&lt;u&gt;</code>) draws a line beneath text in markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_19","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_19","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_12","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_16","title":"Example","text":"<pre><code>This text is &lt;u&gt;underlined&lt;/u&gt;.\n</code></pre>"},{"location":"typescript/reference/essentials/#functions","title":"Functions","text":""},{"location":"typescript/reference/essentials/#computesyntaxcontext","title":"computeSyntaxContext()","text":"<p>computeSyntaxContext(<code>props</code>, <code>defaultSyntax?</code>, <code>invalidPresentations?</code>): <code>Presentation</code></p> <p>Defined in: packages/poml/essentials.tsx:34</p>"},{"location":"typescript/reference/essentials/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_20","title":"props","text":"<p><code>PropsSyntaxBase</code></p>"},{"location":"typescript/reference/essentials/#defaultsyntax","title":"defaultSyntax?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/essentials/#invalidpresentations","title":"invalidPresentations?","text":"<p><code>string</code>[]</p>"},{"location":"typescript/reference/essentials/#returns_20","title":"Returns","text":"<p><code>Presentation</code></p>"},{"location":"typescript/reference/file/","title":"file","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/file/#classes","title":"Classes","text":""},{"location":"typescript/reference/file/#pomlfile","title":"PomlFile","text":"<p>Defined in: packages/poml/file.tsx:56</p>"},{"location":"typescript/reference/file/#constructors","title":"Constructors","text":""},{"location":"typescript/reference/file/#constructor","title":"Constructor","text":"<p>new PomlFile(<code>text</code>, <code>options?</code>, <code>sourcePath?</code>): <code>PomlFile</code></p> <p>Defined in: packages/poml/file.tsx:71</p>"},{"location":"typescript/reference/file/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/file/#text","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/file/#options","title":"options?","text":"<p><code>PomlReaderOptions</code></p>"},{"location":"typescript/reference/file/#sourcepath","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/file/#returns","title":"Returns","text":"<p><code>PomlFile</code></p>"},{"location":"typescript/reference/file/#methods","title":"Methods","text":""},{"location":"typescript/reference/file/#getcompletions","title":"getCompletions()","text":"<p>getCompletions(<code>offset</code>): <code>PomlToken</code>[]</p> <p>Defined in: packages/poml/file.tsx:289</p>"},{"location":"typescript/reference/file/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/file/#offset","title":"offset","text":"<p><code>number</code></p>"},{"location":"typescript/reference/file/#returns_1","title":"Returns","text":"<p><code>PomlToken</code>[]</p>"},{"location":"typescript/reference/file/#getexpressionevaluations","title":"getExpressionEvaluations()","text":"<p>getExpressionEvaluations(<code>range</code>): <code>any</code>[]</p> <p>Defined in: packages/poml/file.tsx:411</p>"},{"location":"typescript/reference/file/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/file/#range","title":"range","text":"<p><code>Range</code></p>"},{"location":"typescript/reference/file/#returns_2","title":"Returns","text":"<p><code>any</code>[]</p>"},{"location":"typescript/reference/file/#getexpressiontokens","title":"getExpressionTokens()","text":"<p>getExpressionTokens(): <code>PomlToken</code>[]</p> <p>Defined in: packages/poml/file.tsx:311</p>"},{"location":"typescript/reference/file/#returns_3","title":"Returns","text":"<p><code>PomlToken</code>[]</p>"},{"location":"typescript/reference/file/#gethovertoken","title":"getHoverToken()","text":"<p>getHoverToken(<code>offset</code>): <code>undefined</code> | <code>PomlToken</code></p> <p>Defined in: packages/poml/file.tsx:281</p>"},{"location":"typescript/reference/file/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/file/#offset_1","title":"offset","text":"<p><code>number</code></p>"},{"location":"typescript/reference/file/#returns_4","title":"Returns","text":"<p><code>undefined</code> | <code>PomlToken</code></p>"},{"location":"typescript/reference/file/#getresponseschema","title":"getResponseSchema()","text":"<p>getResponseSchema(): <code>undefined</code> | <code>Schema</code></p> <p>Defined in: packages/poml/file.tsx:234</p>"},{"location":"typescript/reference/file/#returns_5","title":"Returns","text":"<p><code>undefined</code> | <code>Schema</code></p>"},{"location":"typescript/reference/file/#getruntimeparameters","title":"getRuntimeParameters()","text":"<p>getRuntimeParameters(): <code>undefined</code> | {[<code>key</code>: <code>string</code>]: <code>any</code>; }</p> <p>Defined in: packages/poml/file.tsx:242</p>"},{"location":"typescript/reference/file/#returns_6","title":"Returns","text":"<p><code>undefined</code> | {[<code>key</code>: <code>string</code>]: <code>any</code>; }</p>"},{"location":"typescript/reference/file/#gettoolsschema","title":"getToolsSchema()","text":"<p>getToolsSchema(): <code>undefined</code> | <code>ToolsSchema</code></p> <p>Defined in: packages/poml/file.tsx:238</p>"},{"location":"typescript/reference/file/#returns_7","title":"Returns","text":"<p><code>undefined</code> | <code>ToolsSchema</code></p>"},{"location":"typescript/reference/file/#react","title":"react()","text":"<p>react(<code>context?</code>): <code>ReactElement</code></p> <p>Defined in: packages/poml/file.tsx:258</p>"},{"location":"typescript/reference/file/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/file/#context","title":"context?","text":""},{"location":"typescript/reference/file/#returns_8","title":"Returns","text":"<p><code>ReactElement</code></p>"},{"location":"typescript/reference/file/#xmlrootelement","title":"xmlRootElement()","text":"<p>xmlRootElement(): <code>undefined</code> | <code>XMLElement</code></p> <p>Defined in: packages/poml/file.tsx:246</p>"},{"location":"typescript/reference/file/#returns_9","title":"Returns","text":"<p><code>undefined</code> | <code>XMLElement</code></p>"},{"location":"typescript/reference/file/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/file/#pomlreaderoptions","title":"PomlReaderOptions","text":"<p>Defined in: packages/poml/file.tsx:27</p>"},{"location":"typescript/reference/file/#properties","title":"Properties","text":""},{"location":"typescript/reference/file/#autoaddpoml","title":"autoAddPoml?","text":"<p><code>optional</code> autoAddPoml: <code>boolean</code></p> <p>Defined in: packages/poml/file.tsx:29</p>"},{"location":"typescript/reference/file/#crlftolf","title":"crlfToLf?","text":"<p><code>optional</code> crlfToLf: <code>boolean</code></p> <p>Defined in: packages/poml/file.tsx:30</p>"},{"location":"typescript/reference/file/#trim","title":"trim?","text":"<p><code>optional</code> trim: <code>boolean</code></p> <p>Defined in: packages/poml/file.tsx:28</p>"},{"location":"typescript/reference/file/#pomltoken","title":"PomlToken","text":"<p>Defined in: packages/poml/file.tsx:39</p>"},{"location":"typescript/reference/file/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/file/#attribute","title":"attribute?","text":"<p><code>optional</code> attribute: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:43</p>"},{"location":"typescript/reference/file/#element","title":"element?","text":"<p><code>optional</code> element: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:42</p>"},{"location":"typescript/reference/file/#expression","title":"expression?","text":"<p><code>optional</code> expression: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:45</p>"},{"location":"typescript/reference/file/#range_1","title":"range","text":"<p>range: <code>Range</code></p> <p>Defined in: packages/poml/file.tsx:41</p>"},{"location":"typescript/reference/file/#type","title":"type","text":"<p>type: <code>\"element\"</code> | <code>\"attribute\"</code> | <code>\"attributeValue\"</code> | <code>\"expression\"</code></p> <p>Defined in: packages/poml/file.tsx:40</p>"},{"location":"typescript/reference/file/#value","title":"value?","text":"<p><code>optional</code> value: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:44</p>"},{"location":"typescript/reference/writer/","title":"writer","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/writer/#classes","title":"Classes","text":""},{"location":"typescript/reference/writer/#csvwriter","title":"CsvWriter","text":"<p>Defined in: packages/poml/writer.ts:1288</p>"},{"location":"typescript/reference/writer/#extends","title":"Extends","text":"<ul> <li><code>MarkdownWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#extended-by","title":"Extended by","text":"<ul> <li><code>TsvWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#constructors","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor","title":"Constructor","text":"<p>new CsvWriter(<code>ir?</code>, <code>options?</code>): <code>CsvWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns","title":"Returns","text":"<p><code>CsvWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>constructor</code></p>"},{"location":"typescript/reference/writer/#properties","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_1","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_1","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>ir</code></p>"},{"location":"typescript/reference/writer/#options_1","title":"options","text":"<p><code>protected</code> options: <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_2","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_3","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_1","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_1","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_4","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_1","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_2","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_5","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_3","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_6","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>createMappingNode</code></p>"},{"location":"typescript/reference/writer/#handletable","title":"handleTable()","text":"<p><code>protected</code> handleTable(<code>tableHeadElements</code>, <code>tableBodyElements</code>, <code>tableElement</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1289</p>"},{"location":"typescript/reference/writer/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/writer/#tableheadelements","title":"tableHeadElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tablebodyelements","title":"tableBodyElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tableelement","title":"tableElement","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_2","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_4","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#overrides","title":"Overrides","text":"<p><code>MarkdownWriter</code>.<code>handleTable</code></p>"},{"location":"typescript/reference/writer/#indentmappings","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_5","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_7","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_1","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_1","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_6","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_8","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:646</p>"},{"location":"typescript/reference/writer/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_2","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_7","title":"Returns","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#inherited-from_9","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>initializeOptions</code></p>"},{"location":"typescript/reference/writer/#makebox","title":"makeBox()","text":"<p><code>protected</code> makeBox(<code>text</code>, <code>layout</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:664</p>"},{"location":"typescript/reference/writer/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text","title":"text","text":"<p><code>string</code> | <code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#layout","title":"layout","text":"<p><code>\"block\"</code> | <code>\"newline\"</code> | <code>\"inline\"</code></p>"},{"location":"typescript/reference/writer/#element_1","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_8","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_10","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>makeBox</code></p>"},{"location":"typescript/reference/writer/#markuplanguage","title":"markupLanguage()","text":"<p><code>protected</code> markupLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1333</p>"},{"location":"typescript/reference/writer/#returns_9","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_1","title":"Overrides","text":"<p><code>MarkdownWriter</code>.<code>markupLanguage</code></p>"},{"location":"typescript/reference/writer/#processmultipletablerows","title":"processMultipleTableRows()","text":"<p><code>protected</code> processMultipleTableRows(<code>elements</code>, <code>$</code>): <code>StringTableRow</code>[]</p> <p>Defined in: packages/poml/writer.ts:1030</p>"},{"location":"typescript/reference/writer/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_3","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_10","title":"Returns","text":"<p><code>StringTableRow</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_11","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>processMultipleTableRows</code></p>"},{"location":"typescript/reference/writer/#raiseerror","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_2","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_11","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_12","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>raiseError</code></p>"},{"location":"typescript/reference/writer/#raiseerrorandreturnempty","title":"raiseErrorAndReturnEmpty()","text":"<p><code>protected</code> raiseErrorAndReturnEmpty(<code>message</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:659</p>"},{"location":"typescript/reference/writer/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_1","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_3","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_12","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_13","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>raiseErrorAndReturnEmpty</code></p>"},{"location":"typescript/reference/writer/#reset","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_2","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_13","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_14","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_1","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_3","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_14","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_15","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>truncateText</code></p>"},{"location":"typescript/reference/writer/#write","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_3","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_15","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_16","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1174</p>"},{"location":"typescript/reference/writer/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_4","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_4","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_16","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_17","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtreeimpl","title":"writeElementTreeImpl()","text":"<p><code>protected</code> writeElementTreeImpl(<code>element</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1318</p>"},{"location":"typescript/reference/writer/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_5","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_5","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_17","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#overrides_2","title":"Overrides","text":"<p><code>MarkdownWriter</code>.<code>writeElementTreeImpl</code></p>"},{"location":"typescript/reference/writer/#writemessages","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_4","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_18","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_18","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_5","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_19","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_19","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_6","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_20","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_20","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#environmentdispatcher","title":"EnvironmentDispatcher","text":"<p>Defined in: packages/poml/writer.ts:564</p>"},{"location":"typescript/reference/writer/#extends_1","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>any</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_1","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_1","title":"Constructor","text":"<p>new EnvironmentDispatcher(<code>ir?</code>, <code>options?</code>): <code>EnvironmentDispatcher</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_7","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_4","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_21","title":"Returns","text":"<p><code>EnvironmentDispatcher</code></p>"},{"location":"typescript/reference/writer/#inherited-from_21","title":"Inherited from","text":"<p><code>Writer&lt;any&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_8","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_22","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>ir</code></p>"},{"location":"typescript/reference/writer/#options_5","title":"options","text":"<p><code>protected</code> options: <code>any</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_23","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_1","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_1","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_24","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_1","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_1","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_2","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_6","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_22","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_25","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_1","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_22","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_3","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_23","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_26","title":"Inherited from","text":"<p><code>Writer.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_1","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_23","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_6","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_1","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_24","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_27","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_1","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_24","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_1","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_2","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_2","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_25","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_28","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_1","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_25","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_1","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_3","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_3","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_26","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_29","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_1","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:82</p>"},{"location":"typescript/reference/writer/#parameters_26","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_6","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_27","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_30","title":"Inherited from","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_1","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_27","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_2","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_7","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_28","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_31","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_1","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_28","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_9","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_29","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_32","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_1","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_29","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_2","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_1","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_1","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_7","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_30","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_33","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_1","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_30","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_10","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_31","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_34","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_1","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:565</p>"},{"location":"typescript/reference/writer/#parameters_31","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_8","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_7","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_32","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_3","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_1","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_32","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_11","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_33","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_35","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_1","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_33","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_12","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_34","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_36","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_1","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_34","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_13","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_35","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_37","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#freewriter","title":"FreeWriter","text":"<p>Defined in: packages/poml/writer.ts:1655</p>"},{"location":"typescript/reference/writer/#extends_2","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>FreeOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_2","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_2","title":"Constructor","text":"<p>new FreeWriter(<code>ir?</code>, <code>options?</code>): <code>FreeWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_35","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_14","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_8","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_36","title":"Returns","text":"<p><code>FreeWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_38","title":"Inherited from","text":"<p><code>Writer&lt;FreeOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_15","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_39","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_9","title":"options","text":"<p><code>protected</code> options: <code>TruncateOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_40","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_2","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_2","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_41","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_2","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_2","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_36","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_4","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_8","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_37","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_42","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_2","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_37","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_5","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_38","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_43","title":"Inherited from","text":"<p><code>Writer.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_2","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_38","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_9","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_2","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_39","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_44","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_2","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_39","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_2","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_4","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_4","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_40","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_45","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_2","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_40","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_2","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_5","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_5","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_41","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_46","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_2","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>TruncateOptions</code></p> <p>Defined in: packages/poml/writer.ts:1656</p>"},{"location":"typescript/reference/writer/#parameters_41","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_10","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_42","title":"Returns","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_4","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_2","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_42","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_3","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_10","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_43","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_47","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_2","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_43","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_16","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_44","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_48","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_2","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_44","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_3","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_2","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_2","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_11","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_45","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_49","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_2","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_45","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_17","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_46","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_50","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_2","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1696</p>"},{"location":"typescript/reference/writer/#parameters_46","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_11","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_9","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_47","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_5","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_2","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_47","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_18","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_48","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_51","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_2","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_48","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_19","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_49","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_52","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_2","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_49","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_20","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_50","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_53","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#htmlwriter","title":"HtmlWriter","text":"<p>Defined in: packages/poml/writer.ts:1195</p>"},{"location":"typescript/reference/writer/#extends_3","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>HtmlOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_3","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_3","title":"Constructor","text":"<p>new HtmlWriter(<code>ir?</code>, <code>options?</code>): <code>HtmlWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_50","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_21","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_12","title":"options?","text":"<p><code>HtmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_51","title":"Returns","text":"<p><code>HtmlWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_54","title":"Inherited from","text":"<p><code>Writer&lt;HtmlOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_3","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_22","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_55","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_13","title":"options","text":"<p><code>protected</code> options: <code>HtmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_56","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_3","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_3","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_57","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_3","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_3","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_51","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_6","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_10","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_52","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_58","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_3","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_52","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_7","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_53","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_59","title":"Inherited from","text":"<p><code>Writer.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_3","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_53","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_12","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_3","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_54","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_60","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_3","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_54","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_3","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_6","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_6","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_55","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_61","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_3","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_55","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_3","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_7","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_7","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_56","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_62","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_3","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>HtmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:1198</p>"},{"location":"typescript/reference/writer/#parameters_56","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_14","title":"options?","text":"<p><code>HtmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_57","title":"Returns","text":"<p><code>HtmlOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_6","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_3","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_57","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_4","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_13","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_58","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_63","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_3","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_58","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_23","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_59","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_64","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_3","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_59","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_4","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_3","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_3","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_15","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_60","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_65","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_3","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_60","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_24","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_61","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_66","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_3","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1272</p>"},{"location":"typescript/reference/writer/#parameters_61","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_14","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_11","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_62","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_7","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_3","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_62","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_25","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_63","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_67","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_3","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_63","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_26","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_64","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_68","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_3","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_64","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_27","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_65","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_69","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#jsonwriter","title":"JsonWriter","text":"<p>Defined in: packages/poml/writer.ts:1515</p>"},{"location":"typescript/reference/writer/#extends_4","title":"Extends","text":"<ul> <li><code>SerializeWriter</code>\\&lt;<code>JsonOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_4","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_4","title":"Constructor","text":"<p>new JsonWriter(<code>ir?</code>, <code>options?</code>): <code>JsonWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_65","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_28","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_16","title":"options?","text":"<p><code>JsonOptions</code></p>"},{"location":"typescript/reference/writer/#returns_66","title":"Returns","text":"<p><code>JsonWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_70","title":"Inherited from","text":"<p><code>SerializeWriter&lt;JsonOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_4","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_29","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_71","title":"Inherited from","text":"<p><code>SerializeWriter.ir</code></p>"},{"location":"typescript/reference/writer/#options_17","title":"options","text":"<p><code>protected</code> options: <code>JsonOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_72","title":"Inherited from","text":"<p><code>SerializeWriter.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_4","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_4","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_73","title":"Inherited from","text":"<p><code>SerializeWriter.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#accessors","title":"Accessors","text":""},{"location":"typescript/reference/writer/#serializelanguage","title":"serializeLanguage","text":""},{"location":"typescript/reference/writer/#get-signature","title":"Get Signature","text":"<p>get serializeLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1516</p>"},{"location":"typescript/reference/writer/#returns_67","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_8","title":"Overrides","text":"<p><code>SerializeWriter.serializeLanguage</code></p>"},{"location":"typescript/reference/writer/#methods_4","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_4","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_66","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_8","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_12","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_68","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_74","title":"Inherited from","text":"<p><code>SerializeWriter.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_4","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_67","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_9","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_69","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_75","title":"Inherited from","text":"<p><code>SerializeWriter.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_4","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_68","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_15","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_4","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_70","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_76","title":"Inherited from","text":"<p><code>SerializeWriter.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_4","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_69","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_4","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_8","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_8","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_71","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_77","title":"Inherited from","text":"<p><code>SerializeWriter.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_4","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_70","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_4","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_9","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_9","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_72","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_78","title":"Inherited from","text":"<p><code>SerializeWriter.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_4","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>JsonOptions</code></p> <p>Defined in: packages/poml/writer.ts:1520</p>"},{"location":"typescript/reference/writer/#parameters_71","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_18","title":"options?","text":"<p><code>JsonOptions</code></p>"},{"location":"typescript/reference/writer/#returns_73","title":"Returns","text":"<p><code>JsonOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_9","title":"Overrides","text":"<p><code>SerializeWriter.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#parseany","title":"parseAny()","text":"<p><code>protected</code> parseAny(<code>element</code>, <code>$</code>, <code>singleAsObject?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1389</p>"},{"location":"typescript/reference/writer/#parameters_72","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_16","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_13","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#singleasobject","title":"singleAsObject?","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/writer/#returns_74","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_79","title":"Inherited from","text":"<p><code>SerializeWriter.parseAny</code></p>"},{"location":"typescript/reference/writer/#parseenv","title":"parseEnv()","text":"<p><code>protected</code> parseEnv(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1468</p>"},{"location":"typescript/reference/writer/#parameters_73","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_17","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_14","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_75","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_80","title":"Inherited from","text":"<p><code>SerializeWriter.parseEnv</code></p>"},{"location":"typescript/reference/writer/#parsegeneralelement","title":"parseGeneralElement()","text":"<p><code>protected</code> parseGeneralElement(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1496</p>"},{"location":"typescript/reference/writer/#parameters_74","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_18","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_15","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_76","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_81","title":"Inherited from","text":"<p><code>SerializeWriter.parseGeneralElement</code></p>"},{"location":"typescript/reference/writer/#parseobject","title":"parseObject()","text":"<p><code>protected</code> parseObject(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1454</p>"},{"location":"typescript/reference/writer/#parameters_75","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_19","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_16","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_77","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_82","title":"Inherited from","text":"<p><code>SerializeWriter.parseObject</code></p>"},{"location":"typescript/reference/writer/#parsetext","title":"parseText()","text":"<p><code>protected</code> parseText(<code>element</code>, <code>text</code>, <code>type</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1353</p>"},{"location":"typescript/reference/writer/#parameters_76","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_20","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#text_5","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#type","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_78","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_83","title":"Inherited from","text":"<p><code>SerializeWriter.parseText</code></p>"},{"location":"typescript/reference/writer/#raiseerror_4","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_77","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_5","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_21","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_79","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_84","title":"Inherited from","text":"<p><code>SerializeWriter.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_4","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_78","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_30","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_80","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_85","title":"Inherited from","text":"<p><code>SerializeWriter.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_4","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_79","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_6","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_4","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_4","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_19","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_81","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_86","title":"Inherited from","text":"<p><code>SerializeWriter.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_4","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_80","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_31","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_82","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_87","title":"Inherited from","text":"<p><code>SerializeWriter.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_4","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1526</p>"},{"location":"typescript/reference/writer/#parameters_81","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_22","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_17","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_83","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_10","title":"Overrides","text":"<p><code>SerializeWriter.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_4","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_82","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_32","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_84","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_88","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_4","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_83","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_33","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_85","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_89","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_4","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_84","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_34","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_86","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_90","title":"Inherited from","text":"<p><code>SerializeWriter.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#markdownwriter","title":"MarkdownWriter","text":"<p>Defined in: packages/poml/writer.ts:645</p>"},{"location":"typescript/reference/writer/#extends_5","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>MarkdownOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#extended-by_1","title":"Extended by","text":"<ul> <li><code>CsvWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#constructors_5","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_5","title":"Constructor","text":"<p>new MarkdownWriter(<code>ir?</code>, <code>options?</code>): <code>MarkdownWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_85","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_35","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_20","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_87","title":"Returns","text":"<p><code>MarkdownWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_91","title":"Inherited from","text":"<p><code>Writer&lt;MarkdownOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_5","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_36","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_92","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_21","title":"options","text":"<p><code>protected</code> options: <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_93","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_5","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_5","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_94","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_5","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_5","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_86","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_10","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_18","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_88","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_95","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_5","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_87","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_11","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_89","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_96","title":"Inherited from","text":"<p><code>Writer.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_5","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_88","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_23","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_5","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_90","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_97","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#handletable_1","title":"handleTable()","text":"<p><code>protected</code> handleTable(<code>tableHeadElements</code>, <code>tableBodyElements</code>, <code>tableElement</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1056</p>"},{"location":"typescript/reference/writer/#parameters_89","title":"Parameters","text":""},{"location":"typescript/reference/writer/#tableheadelements_1","title":"tableHeadElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tablebodyelements_1","title":"tableBodyElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tableelement_1","title":"tableElement","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_19","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_91","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#indentmappings_5","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_90","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_5","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_10","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_10","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_92","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_98","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_5","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_91","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_5","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_11","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_11","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_93","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_99","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_5","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:646</p>"},{"location":"typescript/reference/writer/#parameters_92","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_22","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_94","title":"Returns","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_11","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#makebox_1","title":"makeBox()","text":"<p><code>protected</code> makeBox(<code>text</code>, <code>layout</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:664</p>"},{"location":"typescript/reference/writer/#parameters_93","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_7","title":"text","text":"<p><code>string</code> | <code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#layout_1","title":"layout","text":"<p><code>\"block\"</code> | <code>\"newline\"</code> | <code>\"inline\"</code></p>"},{"location":"typescript/reference/writer/#element_24","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_95","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#markuplanguage_1","title":"markupLanguage()","text":"<p><code>protected</code> markupLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1183</p>"},{"location":"typescript/reference/writer/#returns_96","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#processmultipletablerows_1","title":"processMultipleTableRows()","text":"<p><code>protected</code> processMultipleTableRows(<code>elements</code>, <code>$</code>): <code>StringTableRow</code>[]</p> <p>Defined in: packages/poml/writer.ts:1030</p>"},{"location":"typescript/reference/writer/#parameters_94","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements_1","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_20","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_97","title":"Returns","text":"<p><code>StringTableRow</code>[]</p>"},{"location":"typescript/reference/writer/#raiseerror_5","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_95","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_6","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_25","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_98","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_100","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#raiseerrorandreturnempty_1","title":"raiseErrorAndReturnEmpty()","text":"<p><code>protected</code> raiseErrorAndReturnEmpty(<code>message</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:659</p>"},{"location":"typescript/reference/writer/#parameters_96","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_7","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_26","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_99","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#reset_5","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_97","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_37","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_100","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_101","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_5","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_98","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_8","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_5","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_5","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_23","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_101","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_102","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_5","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_99","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_38","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_102","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_103","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_5","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1174</p>"},{"location":"typescript/reference/writer/#parameters_100","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_27","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_21","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_103","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_12","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtreeimpl_1","title":"writeElementTreeImpl()","text":"<p><code>protected</code> writeElementTreeImpl(<code>element</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1107</p>"},{"location":"typescript/reference/writer/#parameters_101","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_28","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_22","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_104","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#writemessages_5","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_102","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_39","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_105","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_104","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_5","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_103","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_40","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_106","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_105","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_5","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_104","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_41","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_107","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_106","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#multimediawriter","title":"MultiMediaWriter","text":"<p>Defined in: packages/poml/writer.ts:1713</p>"},{"location":"typescript/reference/writer/#extends_6","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>MultiMediaOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_6","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_6","title":"Constructor","text":"<p>new MultiMediaWriter(<code>ir?</code>, <code>options?</code>): <code>MultiMediaWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_105","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_42","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_24","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_108","title":"Returns","text":"<p><code>MultiMediaWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_107","title":"Inherited from","text":"<p><code>Writer&lt;MultiMediaOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_6","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_43","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_108","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_25","title":"options","text":"<p><code>protected</code> options: <code>any</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_109","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_6","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_6","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_110","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_6","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_6","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_106","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_12","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_23","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_109","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_111","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_6","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_107","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_13","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_110","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_112","title":"Inherited from","text":"<p><code>Writer.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_6","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_108","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_29","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_6","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_111","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_113","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_6","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_109","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_6","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_12","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_12","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_112","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_114","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_6","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_110","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_6","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_13","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_13","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_113","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_115","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_6","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1714</p>"},{"location":"typescript/reference/writer/#parameters_111","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_26","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_114","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#overrides_13","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_6","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_112","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_8","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_30","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_115","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_116","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_6","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_113","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_44","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_116","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_117","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_6","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_114","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_9","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_6","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_6","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_27","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_117","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_118","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_6","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_115","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_45","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_118","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_119","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_6","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1847</p>"},{"location":"typescript/reference/writer/#parameters_116","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_31","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_24","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_119","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_14","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtrees","title":"writeElementTrees()","text":"<p>writeElementTrees(<code>elements</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1830</p>"},{"location":"typescript/reference/writer/#parameters_117","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements_2","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_25","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_120","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#writemessages_6","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_118","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_46","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_121","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_120","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_6","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_119","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_47","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_122","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_121","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_6","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_120","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_48","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_123","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_122","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#tsvwriter","title":"TsvWriter","text":"<p>Defined in: packages/poml/writer.ts:1338</p>"},{"location":"typescript/reference/writer/#extends_7","title":"Extends","text":"<ul> <li><code>CsvWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#constructors_7","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_7","title":"Constructor","text":"<p>new TsvWriter(<code>ir?</code>, <code>options?</code>): <code>TsvWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_121","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_49","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_28","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_124","title":"Returns","text":"<p><code>TsvWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_123","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>constructor</code></p>"},{"location":"typescript/reference/writer/#properties_7","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_50","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_124","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>ir</code></p>"},{"location":"typescript/reference/writer/#options_29","title":"options","text":"<p><code>protected</code> options: <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_125","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_7","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_7","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_126","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_7","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_7","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_122","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_14","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_26","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_125","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_127","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_7","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_123","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_15","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_126","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_128","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_7","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_124","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_32","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_7","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_127","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_129","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>createMappingNode</code></p>"},{"location":"typescript/reference/writer/#handletable_2","title":"handleTable()","text":"<p><code>protected</code> handleTable(<code>tableHeadElements</code>, <code>tableBodyElements</code>, <code>tableElement</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1289</p>"},{"location":"typescript/reference/writer/#parameters_125","title":"Parameters","text":""},{"location":"typescript/reference/writer/#tableheadelements_2","title":"tableHeadElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tablebodyelements_2","title":"tableBodyElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tableelement_2","title":"tableElement","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_27","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_128","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_130","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>handleTable</code></p>"},{"location":"typescript/reference/writer/#indentmappings_7","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_126","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_7","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_14","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_14","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_129","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_131","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_7","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_127","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_7","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_15","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_15","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_130","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_132","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_7","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:1339</p>"},{"location":"typescript/reference/writer/#parameters_128","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_30","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_131","title":"Returns","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_15","title":"Overrides","text":"<p><code>CsvWriter</code>.<code>initializeOptions</code></p>"},{"location":"typescript/reference/writer/#makebox_2","title":"makeBox()","text":"<p><code>protected</code> makeBox(<code>text</code>, <code>layout</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:664</p>"},{"location":"typescript/reference/writer/#parameters_129","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_10","title":"text","text":"<p><code>string</code> | <code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#layout_2","title":"layout","text":"<p><code>\"block\"</code> | <code>\"newline\"</code> | <code>\"inline\"</code></p>"},{"location":"typescript/reference/writer/#element_33","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_132","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_133","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>makeBox</code></p>"},{"location":"typescript/reference/writer/#markuplanguage_2","title":"markupLanguage()","text":"<p><code>protected</code> markupLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1343</p>"},{"location":"typescript/reference/writer/#returns_133","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_16","title":"Overrides","text":"<p><code>CsvWriter</code>.<code>markupLanguage</code></p>"},{"location":"typescript/reference/writer/#processmultipletablerows_2","title":"processMultipleTableRows()","text":"<p><code>protected</code> processMultipleTableRows(<code>elements</code>, <code>$</code>): <code>StringTableRow</code>[]</p> <p>Defined in: packages/poml/writer.ts:1030</p>"},{"location":"typescript/reference/writer/#parameters_130","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements_3","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_28","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_134","title":"Returns","text":"<p><code>StringTableRow</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_134","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>processMultipleTableRows</code></p>"},{"location":"typescript/reference/writer/#raiseerror_7","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_131","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_9","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_34","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_135","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_135","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>raiseError</code></p>"},{"location":"typescript/reference/writer/#raiseerrorandreturnempty_2","title":"raiseErrorAndReturnEmpty()","text":"<p><code>protected</code> raiseErrorAndReturnEmpty(<code>message</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:659</p>"},{"location":"typescript/reference/writer/#parameters_132","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_10","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_35","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_136","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_136","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>raiseErrorAndReturnEmpty</code></p>"},{"location":"typescript/reference/writer/#reset_7","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_133","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_51","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_137","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_137","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_7","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_134","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_11","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_7","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_7","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_31","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_138","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_138","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>truncateText</code></p>"},{"location":"typescript/reference/writer/#write_7","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_135","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_52","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_139","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_139","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_7","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1174</p>"},{"location":"typescript/reference/writer/#parameters_136","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_36","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_29","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_140","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_140","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtreeimpl_2","title":"writeElementTreeImpl()","text":"<p><code>protected</code> writeElementTreeImpl(<code>element</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1318</p>"},{"location":"typescript/reference/writer/#parameters_137","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_37","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_30","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_141","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_141","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeElementTreeImpl</code></p>"},{"location":"typescript/reference/writer/#writemessages_7","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_138","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_53","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_142","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_142","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_7","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_139","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_54","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_143","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_143","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_7","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_140","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_55","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_144","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_144","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#xmlwriter","title":"XmlWriter","text":"<p>Defined in: packages/poml/writer.ts:1574</p>"},{"location":"typescript/reference/writer/#extends_8","title":"Extends","text":"<ul> <li><code>SerializeWriter</code>\\&lt;<code>XmlOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_8","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_8","title":"Constructor","text":"<p>new XmlWriter(<code>ir?</code>, <code>options?</code>): <code>XmlWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_141","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_56","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_32","title":"options?","text":"<p><code>XmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_145","title":"Returns","text":"<p><code>XmlWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_145","title":"Inherited from","text":"<p><code>SerializeWriter&lt;XmlOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_8","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_57","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_146","title":"Inherited from","text":"<p><code>SerializeWriter.ir</code></p>"},{"location":"typescript/reference/writer/#options_33","title":"options","text":"<p><code>protected</code> options: <code>XmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_147","title":"Inherited from","text":"<p><code>SerializeWriter.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_8","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_8","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_148","title":"Inherited from","text":"<p><code>SerializeWriter.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#accessors_1","title":"Accessors","text":""},{"location":"typescript/reference/writer/#serializelanguage_1","title":"serializeLanguage","text":""},{"location":"typescript/reference/writer/#get-signature_1","title":"Get Signature","text":"<p>get serializeLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1575</p>"},{"location":"typescript/reference/writer/#returns_146","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_17","title":"Overrides","text":"<p><code>SerializeWriter.serializeLanguage</code></p>"},{"location":"typescript/reference/writer/#methods_8","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_8","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_142","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_16","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_31","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_147","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_149","title":"Inherited from","text":"<p><code>SerializeWriter.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_8","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_143","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_17","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_148","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_150","title":"Inherited from","text":"<p><code>SerializeWriter.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_8","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_144","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_38","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_8","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_149","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_151","title":"Inherited from","text":"<p><code>SerializeWriter.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_8","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_145","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_8","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_16","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_16","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_150","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_152","title":"Inherited from","text":"<p><code>SerializeWriter.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_8","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_146","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_8","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_17","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_17","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_151","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_153","title":"Inherited from","text":"<p><code>SerializeWriter.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_8","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>XmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:1579</p>"},{"location":"typescript/reference/writer/#parameters_147","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_34","title":"options?","text":"<p><code>XmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_152","title":"Returns","text":"<p><code>XmlOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_18","title":"Overrides","text":"<p><code>SerializeWriter.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#parseany_1","title":"parseAny()","text":"<p><code>protected</code> parseAny(<code>element</code>, <code>$</code>, <code>singleAsObject?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1389</p>"},{"location":"typescript/reference/writer/#parameters_148","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_39","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_32","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#singleasobject_1","title":"singleAsObject?","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/writer/#returns_153","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_154","title":"Inherited from","text":"<p><code>SerializeWriter.parseAny</code></p>"},{"location":"typescript/reference/writer/#parseenv_1","title":"parseEnv()","text":"<p><code>protected</code> parseEnv(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1468</p>"},{"location":"typescript/reference/writer/#parameters_149","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_40","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_33","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_154","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_155","title":"Inherited from","text":"<p><code>SerializeWriter.parseEnv</code></p>"},{"location":"typescript/reference/writer/#parsegeneralelement_1","title":"parseGeneralElement()","text":"<p><code>protected</code> parseGeneralElement(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1496</p>"},{"location":"typescript/reference/writer/#parameters_150","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_41","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_34","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_155","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_156","title":"Inherited from","text":"<p><code>SerializeWriter.parseGeneralElement</code></p>"},{"location":"typescript/reference/writer/#parseobject_1","title":"parseObject()","text":"<p><code>protected</code> parseObject(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1454</p>"},{"location":"typescript/reference/writer/#parameters_151","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_42","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_35","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_156","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_157","title":"Inherited from","text":"<p><code>SerializeWriter.parseObject</code></p>"},{"location":"typescript/reference/writer/#parsetext_1","title":"parseText()","text":"<p><code>protected</code> parseText(<code>element</code>, <code>text</code>, <code>type</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1353</p>"},{"location":"typescript/reference/writer/#parameters_152","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_43","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#text_12","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#type_1","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_157","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_158","title":"Inherited from","text":"<p><code>SerializeWriter.parseText</code></p>"},{"location":"typescript/reference/writer/#raiseerror_8","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_153","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_11","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_44","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_158","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_159","title":"Inherited from","text":"<p><code>SerializeWriter.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_8","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_154","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_58","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_159","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_160","title":"Inherited from","text":"<p><code>SerializeWriter.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_8","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_155","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_13","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_8","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_8","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_35","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_160","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_161","title":"Inherited from","text":"<p><code>SerializeWriter.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_8","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_156","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_59","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_161","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_162","title":"Inherited from","text":"<p><code>SerializeWriter.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_8","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1636</p>"},{"location":"typescript/reference/writer/#parameters_157","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_45","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_36","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_162","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_19","title":"Overrides","text":"<p><code>SerializeWriter.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_8","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_158","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_60","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_163","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_163","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_8","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_159","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_61","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_164","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_164","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_8","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_160","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_62","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_165","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_165","title":"Inherited from","text":"<p><code>SerializeWriter.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#yamlwriter","title":"YamlWriter","text":"<p>Defined in: packages/poml/writer.ts:1542</p>"},{"location":"typescript/reference/writer/#extends_9","title":"Extends","text":"<ul> <li><code>SerializeWriter</code>\\&lt;<code>YamlOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_9","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_9","title":"Constructor","text":"<p>new YamlWriter(<code>ir?</code>, <code>options?</code>): <code>YamlWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_161","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_63","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_36","title":"options?","text":"<p><code>YamlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_166","title":"Returns","text":"<p><code>YamlWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_166","title":"Inherited from","text":"<p><code>SerializeWriter&lt;YamlOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_9","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_64","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_167","title":"Inherited from","text":"<p><code>SerializeWriter.ir</code></p>"},{"location":"typescript/reference/writer/#options_37","title":"options","text":"<p><code>protected</code> options: <code>YamlOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_168","title":"Inherited from","text":"<p><code>SerializeWriter.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_9","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_9","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_169","title":"Inherited from","text":"<p><code>SerializeWriter.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#accessors_2","title":"Accessors","text":""},{"location":"typescript/reference/writer/#serializelanguage_2","title":"serializeLanguage","text":""},{"location":"typescript/reference/writer/#get-signature_2","title":"Get Signature","text":"<p>get serializeLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1543</p>"},{"location":"typescript/reference/writer/#returns_167","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_20","title":"Overrides","text":"<p><code>SerializeWriter.serializeLanguage</code></p>"},{"location":"typescript/reference/writer/#methods_9","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_9","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:260</p>"},{"location":"typescript/reference/writer/#parameters_162","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_18","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_37","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_168","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_170","title":"Inherited from","text":"<p><code>SerializeWriter.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#buildsourcemap_9","title":"buildSourceMap()","text":"<p><code>protected</code> buildSourceMap(<code>result</code>): <code>SourceSegment</code>[]</p> <p>Defined in: packages/poml/writer.ts:425</p> <p>Transform a WriterResult into discrete source map segments.</p> <p>The segments are ordered so that rich content can be reconstructed in the correct visual order while preserving multimedia positioning.</p>"},{"location":"typescript/reference/writer/#parameters_163","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_19","title":"result","text":"<p><code>WriterResult</code></p>"},{"location":"typescript/reference/writer/#returns_169","title":"Returns","text":"<p><code>SourceSegment</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_171","title":"Inherited from","text":"<p><code>SerializeWriter.buildSourceMap</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_9","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:154</p>"},{"location":"typescript/reference/writer/#parameters_164","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_46","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_9","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_170","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_172","title":"Inherited from","text":"<p><code>SerializeWriter.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_9","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:178</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_165","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_9","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_18","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_18","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_171","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_173","title":"Inherited from","text":"<p><code>SerializeWriter.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_9","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:188</p>"},{"location":"typescript/reference/writer/#parameters_166","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_9","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_19","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_19","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_172","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_174","title":"Inherited from","text":"<p><code>SerializeWriter.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_9","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>YamlOptions</code></p> <p>Defined in: packages/poml/writer.ts:1547</p>"},{"location":"typescript/reference/writer/#parameters_167","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_38","title":"options?","text":"<p><code>YamlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_173","title":"Returns","text":"<p><code>YamlOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_21","title":"Overrides","text":"<p><code>SerializeWriter.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#parseany_2","title":"parseAny()","text":"<p><code>protected</code> parseAny(<code>element</code>, <code>$</code>, <code>singleAsObject?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1389</p>"},{"location":"typescript/reference/writer/#parameters_168","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_47","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_38","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#singleasobject_2","title":"singleAsObject?","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/writer/#returns_174","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_175","title":"Inherited from","text":"<p><code>SerializeWriter.parseAny</code></p>"},{"location":"typescript/reference/writer/#parseenv_2","title":"parseEnv()","text":"<p><code>protected</code> parseEnv(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1468</p>"},{"location":"typescript/reference/writer/#parameters_169","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_48","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_39","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_175","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_176","title":"Inherited from","text":"<p><code>SerializeWriter.parseEnv</code></p>"},{"location":"typescript/reference/writer/#parsegeneralelement_2","title":"parseGeneralElement()","text":"<p><code>protected</code> parseGeneralElement(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1496</p>"},{"location":"typescript/reference/writer/#parameters_170","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_49","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_40","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_176","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_177","title":"Inherited from","text":"<p><code>SerializeWriter.parseGeneralElement</code></p>"},{"location":"typescript/reference/writer/#parseobject_2","title":"parseObject()","text":"<p><code>protected</code> parseObject(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1454</p>"},{"location":"typescript/reference/writer/#parameters_171","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_50","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_41","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_177","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_178","title":"Inherited from","text":"<p><code>SerializeWriter.parseObject</code></p>"},{"location":"typescript/reference/writer/#parsetext_2","title":"parseText()","text":"<p><code>protected</code> parseText(<code>element</code>, <code>text</code>, <code>type</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1353</p>"},{"location":"typescript/reference/writer/#parameters_172","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_51","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#text_14","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#type_2","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_178","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_179","title":"Inherited from","text":"<p><code>SerializeWriter.parseText</code></p>"},{"location":"typescript/reference/writer/#raiseerror_9","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:201</p>"},{"location":"typescript/reference/writer/#parameters_173","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_12","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_52","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_179","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_180","title":"Inherited from","text":"<p><code>SerializeWriter.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_9","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_174","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_65","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_180","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_181","title":"Inherited from","text":"<p><code>SerializeWriter.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_9","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_175","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_15","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_9","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_9","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_39","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_181","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_182","title":"Inherited from","text":"<p><code>SerializeWriter.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_9","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:241</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_176","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_66","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_182","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_183","title":"Inherited from","text":"<p><code>SerializeWriter.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_9","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1554</p>"},{"location":"typescript/reference/writer/#parameters_177","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_53","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_42","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_183","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_22","title":"Overrides","text":"<p><code>SerializeWriter.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_9","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:252</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_178","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_67","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_184","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_184","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_9","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:378</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_179","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_68","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_185","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_185","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_9","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:362</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_180","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_69","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_186","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_186","title":"Inherited from","text":"<p><code>SerializeWriter.writeWithSourceMap</code></p>"},{"location":"vscode/","title":"POML Visual Code Extension","text":"<p>The POML Visual Studio Code extension provides comprehensive support for working with POML files.</p>"},{"location":"vscode/#features","title":"Features","text":"<ul> <li>Syntax Highlighting: Full syntax highlighting for <code>.poml</code> files</li> <li>IntelliSense: Auto-completion and suggestions</li> <li>Preview Panel: Live preview of POML rendering</li> <li>Model Testing: Test prompts directly in VS Code</li> <li>Gallery: Built-in prompt gallery for common patterns</li> </ul>"},{"location":"vscode/#installation","title":"Installation","text":""},{"location":"vscode/#stable-release","title":"Stable Release","text":"<p>Install from Visual Studio Code Marketplace.</p> <p>You can also install the extension manually by downloading the <code>.vsix</code> file from our GitHub releases page and installing it in VS Code via the Extensions view.</p>"},{"location":"vscode/#nightly-build","title":"Nightly Build","text":"<p>Download the nightly build from this index</p> <p>Install the downloaded <code>.vsix</code> file in VS Code via the Extensions view (thanks stackoverflow for the image below).</p> <p></p> <p>Before testing prompts with the POML toolkit, make sure you have configured your preferred LLM model, API key, and endpoint. If these are not set, prompt testing will not work. Configuration instructions.</p>"},{"location":"vscode/configuration/","title":"Configuration","text":"<p>Configure POML in VS Code settings (<code>Ctrl+,</code> or <code>Cmd+,</code>).</p>"},{"location":"vscode/configuration/#example-complete-configuration","title":"Example Complete Configuration","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"openai\",\n  \"poml.languageModel.model\": \"gpt-4o\",\n  \"poml.languageModel.apiKey\": \"sk-your-api-key-here\",\n  \"poml.languageModel.apiUrl\": \"https://api.openai.com/v1/\",\n  \"poml.languageModel.temperature\": 0.7,\n  \"poml.languageModel.maxTokens\": 1500,\n  \"poml.scrollPreviewWithEditor\": true,\n  \"poml.markEditorSelection\": true,\n  \"poml.trace\": \"off\"\n}\n</code></pre> <p>For multiple providers with different API keys, which is useful when overriding the default provider setting in POML files:</p> <pre><code>{\n  \"poml.languageModel.provider\": \"openai\",\n  \"poml.languageModel.model\": \"gpt-4o\",\n  \"poml.languageModel.apiKey\": {\n    \"openai\": \"sk-your-openai-key\",\n    \"anthropic\": \"sk-ant-your-anthropic-key\",\n    \"google\": \"your-google-key\"\n  },\n  \"poml.languageModel.apiUrl\": {\n    \"openai\": \"https://api.openai.com/v1/\",\n    \"microsoft\": \"https://your-resource.openai.azure.com/openai\"\n  }\n}\n</code></pre>"},{"location":"vscode/configuration/#language-model-configuration","title":"Language Model Configuration","text":"<p>The following settings mainly control the language model used for POML testing feature within VSCode.</p>"},{"location":"vscode/configuration/#language-model-provider","title":"Language Model Provider","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"openai\"\n}\n</code></pre> <p>Options: <code>vscode</code>, <code>openai</code>, <code>openaiResponse</code>, <code>microsoft</code>, <code>anthropic</code>, <code>google</code> Default: <code>openai</code></p> <p>Note</p> <p>If you have GitHub Copilot enabled in VS Code, you can set this to <code>vscode</code> to use VS Code's Language Model API. The API URL and API Key settings will be ignored in this case.</p>"},{"location":"vscode/configuration/#model-name","title":"Model Name","text":"<pre><code>{\n  \"poml.languageModel.model\": \"gpt-4o\"\n}\n</code></pre> <p>Default: <code>gpt-4o</code></p> <p>For Azure OpenAI, use the deployment name. For other providers, use the model code name.</p> <p>For GitHub Copilot in VS Code, the model name will be used as the family name to select the model. See this guide for explanations of model families.</p>"},{"location":"vscode/configuration/#temperature","title":"Temperature","text":"<pre><code>{\n  \"poml.languageModel.temperature\": 0.5\n}\n</code></pre> <p>Default: <code>0.5</code> Range: <code>0.0</code> to <code>2.0</code> Controls randomness in responses. Lower values are more deterministic.</p>"},{"location":"vscode/configuration/#max-tokens","title":"Max Tokens","text":"<pre><code>{\n  \"poml.languageModel.maxTokens\": 2000\n}\n</code></pre> <p>Default: <code>0</code> (unlimited) Maximum number of completion tokens to generate.</p>"},{"location":"vscode/configuration/#api-key","title":"API Key","text":"<pre><code>{\n  \"poml.languageModel.apiKey\": \"your-api-key-here\"\n}\n</code></pre> <p>Or use provider-specific keys:</p> <pre><code>{\n  \"poml.languageModel.apiKey\": {\n    \"openai\": \"sk-your-openai-key\",\n    \"anthropic\": \"sk-ant-your-anthropic-key\",\n    \"google\": \"your-google-key\",\n    \"microsoft\": \"your-azure-key\"\n  }\n}\n</code></pre> <p>Required for most providers. Keep this secure and never commit to version control.</p> <p>The API key can be:</p> <ul> <li>A string for a single key used across all providers</li> <li>An object with provider-specific keys, useful when switching between providers or when prompts override the provider at runtime</li> </ul>"},{"location":"vscode/configuration/#api-url","title":"API URL","text":"<pre><code>{\n  \"poml.languageModel.apiUrl\": \"https://api.openai.com/v1/\"\n}\n</code></pre> <p>Or use provider-specific URLs:</p> <pre><code>{\n  \"poml.languageModel.apiUrl\": {\n    \"openai\": \"https://api.openai.com/v1/\",\n    \"microsoft\": \"https://westeurope.api.cognitive.microsoft.com/openai\",\n    \"anthropic\": \"https://api.anthropic.com/\"\n  }\n}\n</code></pre> <p>Examples:</p> <ul> <li>OpenAI: <code>https://api.openai.com/v1/</code></li> <li>Azure OpenAI: <code>https://westeurope.api.cognitive.microsoft.com/openai</code></li> <li>Custom OpenAI-compatible: <code>https://api.example.com/v2/</code></li> </ul> <p>The API URL can be:</p> <ul> <li>A string for a single URL used across all providers</li> <li>An object with provider-specific URLs, useful when different providers require different endpoints</li> </ul> <p>Warning</p> <p>If you are using Azure OpenAI and encounter a <code>Resource not found</code> error, you may want to change the configuration from <code>https://xxx.cognitiveservices.azure.com/</code> to <code>https://xxx.cognitiveservices.azure.com/openai</code> or vice versa. Refer to Vercel AI Azure Provider for more details.</p>"},{"location":"vscode/configuration/#api-version","title":"API Version","text":"<pre><code>{\n  \"poml.languageModel.apiVersion\": \"2024-02-15-preview\"\n}\n</code></pre> <p>Optional - Mainly used for OpenAI and Azure OpenAI services.</p>"},{"location":"vscode/configuration/#provider-specific-examples","title":"Provider-Specific Examples","text":""},{"location":"vscode/configuration/#azure-openai","title":"Azure OpenAI","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"microsoft\",\n  \"poml.languageModel.model\": \"my-gpt4-deployment\",\n  \"poml.languageModel.apiKey\": \"your-azure-api-key\",\n  \"poml.languageModel.apiUrl\": \"https://your-resource.openai.azure.com/openai\",\n  \"poml.languageModel.apiVersion\": \"2024-02-15-preview\"\n}\n</code></pre>"},{"location":"vscode/configuration/#anthropic-claude","title":"Anthropic Claude","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"anthropic\",\n  \"poml.languageModel.model\": \"claude-3-5-sonnet-20241022\",\n  \"poml.languageModel.apiKey\": \"your-anthropic-api-key\"\n}\n</code></pre>"},{"location":"vscode/configuration/#google-gemini","title":"Google Gemini","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"google\",\n  \"poml.languageModel.model\": \"gemini-1.5-pro\",\n  \"poml.languageModel.apiKey\": \"your-google-api-key\"\n}\n</code></pre>"},{"location":"vscode/configuration/#preview-editor-settings","title":"Preview &amp; Editor Settings","text":"<p>These features need further testing. Please report bugs if you need this feature but it does not work as expected.</p>"},{"location":"vscode/configuration/#scroll-synchronization","title":"Scroll Synchronization","text":"<pre><code>{\n  \"poml.scrollPreviewWithEditor\": true,\n  \"poml.scrollEditorWithPreview\": true\n}\n</code></pre> <p>Default: <code>true</code> Synchronize scrolling between editor and preview panes.</p>"},{"location":"vscode/configuration/#editor-selection","title":"Editor Selection","text":"<pre><code>{\n  \"poml.markEditorSelection\": true,\n  \"poml.doubleClickToSwitchToEditor\": true\n}\n</code></pre> <p>Default: <code>true</code> Highlight current editor selection in preview and enable double-click navigation.</p>"},{"location":"vscode/configuration/#development-settings","title":"Development Settings","text":""},{"location":"vscode/configuration/#debugging","title":"Debugging","text":"<pre><code>{\n  \"poml.trace\": \"verbose\"\n}\n</code></pre> <p>Options: <code>off</code>, <code>verbose</code> Default: <code>off</code></p> <p>Enable detailed tracing for troubleshooting.</p>"},{"location":"vscode/configuration/#telemetry","title":"Telemetry","text":"<pre><code>{\n  \"poml.telemetry.connection\": \"\"\n}\n</code></pre> <p>Default: <code>\"\"</code> (empty) Development setting for telemetry connection string.</p>"},{"location":"vscode/features/","title":"VS Code IntelliSense Features","text":"<p>POML comes with features that enhance your editing experience in Visual Studio Code, offering a more interactive way to work with your prompt files. Here\u2019s how to make the most of these features:</p>"},{"location":"vscode/features/#diagnostics","title":"Diagnostics","text":"<p>The POML extension provides real-time error detection and validation for your <code>.poml</code> files through VS Code's diagnostics system. This helps you catch syntax errors, invalid attributes, and other issues as you write your prompts.</p>"},{"location":"vscode/features/#types-of-diagnostics","title":"Types of Diagnostics","text":"<p>The POML extension detects various types of issues:</p> <ul> <li>Syntax Errors: Invalid XML/POML syntax, unclosed tags, malformed attributes</li> <li>Component Validation: Unknown components or incorrect component usage</li> <li>Attribute Errors: Invalid attributes for specific components or incorrect attribute values</li> <li>File Reference Issues: Problems with referenced context files, stylesheets, or other external resources</li> <li>Expression Evaluation Errors: Issues with template expressions and variable references</li> </ul>"},{"location":"vscode/features/#real-time-validation-and-working-with-multiple-files","title":"Real-time Validation and Working with Multiple Files","text":"<p>Diagnostics are updated automatically as you edit:</p> <ol> <li>On File Save: Complete validation is triggered when you save the file</li> <li>Incremental Updates: Basic syntax checking happens as you type</li> <li>Context-aware: Validation considers your context files and stylesheets for more accurate error reporting</li> </ol> <p>The diagnostics system can validate references across multiple files. It validates that referenced <code>.context.json</code> files exist and are properly formatted. It also checks <code>.stylesheet.json</code> files for syntax and structure issues.</p>"},{"location":"vscode/features/#hover-tooltips","title":"Hover Tooltips","text":"<p>When you hover over tags, attributes, or expression parts in your <code>.poml</code> file, VSCode will display helpful tooltips.</p> <ul> <li>Tags: Hovering over a tag (e.g., <code>&lt;p&gt;</code>) will show you the documentation for that component (if available).</li> <li>Attributes: Hovering over an attribute (e.g., <code>speaker</code> in <code>&lt;p speaker=\"human\"&gt;</code>) will show you the documentation for that attribute, including its type and accepted values.</li> <li>Errors: Hovering over a problematic element, it will show you the error cause and reason, which will help you understand the issue and fix it.</li> </ul> <p>To use it, simply open your <code>.poml</code> file in VSCode and hover over any token.</p>"},{"location":"vscode/features/#side-preview","title":"Side Preview","text":"<p>The side preview feature shows a live rendering of your prompt. As you make changes, you can see how your prompt structure and styles are applied.</p> <p>Install the POML VSCode extension, then open your <code>.poml</code> file. Activate the side preview panel by:</p> <ol> <li>Click Show Preview Button: Click the show preview button at the top-right corner of active editor, or type \"POML: Open POML Preview\" in the command palette and select the command.</li> <li>Side-by-side: The preview will update automatically as you edit.</li> </ol>"},{"location":"vscode/features/#auto-completion","title":"Auto-completion","text":"<p>Autocompletion assists you by suggesting component tags, attribute names, and possible attribute values. This helps ensure your syntax is correct and speeds up development.</p> <p>While editing a <code>.poml</code> file in VSCode:</p> <ul> <li>Tag Completion: Start typing a tag name (e.g., <code>&lt;p</code>). VSCode with the POML extension will offer completions, such as <code>&lt;p&gt;</code>, <code>&lt;paragraph&gt;</code>, or other available components. It also suggests closing tags.</li> <li>Attribute Completion: Inside an opening tag, type a space or start typing an attribute name (e.g., <code>class</code>). You'll see suggestions for valid attributes for that component (e.g., <code>className</code>).</li> <li>Attribute Value Completion: For some attributes, POML can suggest possible values. For example, if you type <code>&lt;question speaker=\"</code>, you might see suggestions like <code>\"human\"</code> or <code>\"ai\"</code>.</li> </ul> <p>This feature significantly improves the efficiency and accuracy of writing POML code.</p>"},{"location":"vscode/features/#expression-evaluation-with-codelens","title":"Expression Evaluation with CodeLens","text":"<p>The POML extension provides CodeLens buttons that allow you to evaluate template variables directly in your editor. This powerful debugging feature helps you understand what values your expressions produce locally.</p>"},{"location":"vscode/features/#how-to-use-expression-evaluation","title":"How to Use Expression Evaluation","text":"<ol> <li>CodeLens Buttons: When you open a <code>.poml</code> file, you'll see \"\u25b6\ufe0f Evaluate\" buttons appearing above expressions and variables.</li> <li>Click to Evaluate: Click any \"\u25b6\ufe0f Evaluate\" button to execute the expression and see its result.</li> <li>View Output: Go to View \u2192 Output in VS Code. Results are displayed in the POML Debug output channel.</li> </ol>"},{"location":"vscode/features/#what-gets-evaluated","title":"What Gets Evaluated","text":"<p>The CodeLens evaluation feature works with:</p> <ul> <li>Template Expressions: Any <code>{{ expression }}</code> in your POML content</li> <li>Variable Definitions: <code>&lt;let&gt;</code> element value attributes</li> <li>Control Flow: Expressions in <code>for</code> and <code>if</code> attributes</li> <li>Schema Expressions: Expressions in meta elements with <code>parser=\"eval\"</code></li> </ul>"},{"location":"vscode/features/#example","title":"Example","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"items\" value='[\"apple\", \"banana\", \"cherry\"]' /&gt;\n  &lt;let name=\"count\" value=\"items.length\" /&gt;\n\n  &lt;p&gt;We have {{ count }} items: {{ items.join(', ') }}&lt;/p&gt;\n\n  &lt;output-schema parser=\"eval\"&gt;\n    z.object({\n      total: z.number().max(count),\n      items: z.array(z.enum(items))\n    })\n  &lt;/output-schema&gt;\n&lt;/poml&gt;\n</code></pre> <p>In this example, you can evaluate:</p> <ul> <li>The <code>items</code> array definition to see <code>[\"apple\", \"banana\", \"cherry\"]</code></li> <li>The <code>count</code> calculation to see <code>3</code></li> <li>The template expressions to see <code>\"3\"</code> and <code>\"apple, banana, cherry\"</code></li> <li>The schema expression to see the generated Zod schema object</li> </ul>"},{"location":"vscode/features/#testing-prompts","title":"Testing Prompts","text":"<p>POML provides integrated testing capabilities that allow you to test your prompts directly within VS Code against various language models. This feature helps you validate your prompts and see their output without leaving the editor.</p>"},{"location":"vscode/features/#testing-with-chat-models","title":"Testing with Chat Models","text":"<p>Use the Test current prompt on Chat Models command to test your <code>.poml</code> file with chat-based language models. This sends your prompt to the configured language model and displays the response in VS Code's output panel.</p>"},{"location":"vscode/features/#testing-with-text-completion-models","title":"Testing with Text Completion Models","text":"<p>For non-chat models, use the Test current prompt on Text Completion Models command. This is useful for testing prompts designed for text completion rather than conversational AI models.</p>"},{"location":"vscode/features/#rerunning-tests","title":"Rerunning Tests","text":"<p>The Clear output and rerun last test command allows you to quickly clear the previous output and rerun your last test, making it easy to iterate on your prompts.</p>"},{"location":"vscode/features/#aborting-tests","title":"Aborting Tests","text":"<p>If a test is taking too long or you need to stop it, use the Abort current prompt test command to cancel the ongoing request.</p> <p>Before testing prompts, make sure you have configured your language model settings:</p> <ul> <li>Set your model provider (OpenAI, Azure OpenAI, Anthropic, or Google GenAI)</li> <li>Configure your API key and endpoint URL</li> <li>Choose your preferred model name</li> </ul>"},{"location":"vscode/features/#prompt-gallery","title":"Prompt Gallery","text":"<p>Warning</p> <p>The Prompt Gallery is an experimental feature. It is likely to be removed after we find a replacement to use models from GitHub Copilot. Related discussions: #102.</p> <p>The Prompt Gallery provides access to pre-built prompt templates and allows you to manage your own custom prompts. Access it from the POML activity bar in VS Code.</p>"},{"location":"vscode/features/#built-in-templates","title":"Built-in Templates","text":"<p>The gallery includes several built-in prompt templates covering common use cases:</p> <ul> <li>Ask: General question-answering prompts</li> <li>Chat: Conversational prompts</li> <li>Edit: Text editing and revision prompts</li> </ul> <p>Gallery prompts can be used with the POML chat participant by typing <code>@poml /&lt;prompt-name&gt;</code> in any VS Code chat interface, where <code>&lt;prompt-name&gt;</code> is the name of your gallery prompt.</p>"},{"location":"vscode/features/#managing-custom-prompts","title":"Managing Custom Prompts","text":"<p>You can add your own prompts to the gallery:</p> <ol> <li>Add Prompt: Click the plus (+) icon in the gallery view to add a new prompt template</li> <li>Edit Prompt: Use the pencil icon to modify existing user-created prompts</li> <li>Delete Prompt: Remove prompts you no longer need with the trash icon</li> </ol> <p>The usage of custom prompts are the same as built-in prompts. You can use them in the POML chat participant or test them directly.</p>"},{"location":"vscode/features/#list-of-available-commands","title":"List of Available Commands","text":"Command Description <code>poml.test</code> Test current prompt on Chat Models <code>poml.testNonChat</code> Test current prompt on Text Completion Models <code>poml.testRerun</code> Clear output and rerun last test <code>poml.testAbort</code> Abort current prompt test <code>poml.showPreview</code> Open POML Preview <code>poml.showPreviewToSide</code> Open POML Preview to the Side <code>poml.showLockedPreviewToSide</code> Open Locked POML Preview <code>poml.showSource</code> Show Source File <code>poml.addContextFile</code> Add Context File <code>poml.addStylesheetFile</code> Add Stylesheet File <code>poml.removeContextFile</code> Remove Context File <code>poml.removeStylesheetFile</code> Remove Stylesheet File <code>poml.gallery.addPrompt</code> Add Prompt to Gallery <code>poml.gallery.deletePrompt</code> Delete Prompt from Gallery <code>poml.gallery.editPrompt</code> Edit Prompt in Gallery <code>poml.telemetry.completion</code> Telemetry: Completion"}]}